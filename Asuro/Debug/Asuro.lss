
Asuro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000102  00800060  000005d0  00000644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000954  00000000  00000000  00000748  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000183  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000121f  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  0000124e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006eb  00000000  00000000  000013ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000043f  00000000  00000000  00001a99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000077f  00000000  00000000  00001ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000328  00000000  00000000  00002658  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000225  00000000  00000000  00002980  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000551  00000000  00000000  00002ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000030f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
uint8_t counter = 0;            // Anzahl Schleifendurchläufe



void test(void)
{    
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
    
                    
}
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	01 c2       	rjmp	.+1026   	; 0x416 <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	11 e0       	ldi	r17, 0x01	; 1
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 ed       	ldi	r30, 0xD0	; 208
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a2 36       	cpi	r26, 0x62	; 98
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	b8 c2       	rjmp	.+1392   	; 0x5cc <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:
/** Test **/
#include "test.h"


int main(void)
{    
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
  62:	cd b7       	in	r28, 0x3d	; 61
  64:	de b7       	in	r29, 0x3e	; 62
    /** Initialisierungen **/    
    init_uart();                            // initialisiere IR Übertragung
  66:	e9 d1       	rcall	.+978    	; 0x43a <init_uart>
    init_led();                             // initialisiere LED Steuerung
  68:	16 d1       	rcall	.+556    	; 0x296 <init_led>
    init_motor();                           // initialisiere Motor Steuerung
  6a:	a7 d0       	rcall	.+334    	; 0x1ba <init_motor>
    init_od();                              // initialisiere Odometrie
  6c:	ef d0       	rcall	.+478    	; 0x24c <init_od>
    init_timer();                           // initialisiere Timer
  6e:	b7 d1       	rcall	.+878    	; 0x3de <init_timer>
    init_line();                            // initialisiere Linienerkennung
  70:	19 d0       	rcall	.+50     	; 0xa4 <init_line>
    
    status_led( _GREEN);                    
  72:	81 e0       	ldi	r24, 0x01	; 1
  74:	3e d1       	rcall	.+636    	; 0x2f2 <status_led>
    line_led(_ON);
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	8b d1       	rcall	.+790    	; 0x390 <line_led>
    uart_puts("all inits done..." _CR);
  7a:	80 e6       	ldi	r24, 0x60	; 96
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	22 d2       	rcall	.+1092   	; 0x4c4 <uart_puts>
    sei();                                  // aktiviere globale Interrupts
  80:	78 94       	sei
    
         
    while(1)
    {
        uart_puti(get_line_adc(_LEFT));
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	2e d0       	rcall	.+92     	; 0xe2 <get_line_adc>
  86:	88 2f       	mov	r24, r24
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	3c d2       	rcall	.+1144   	; 0x504 <uart_puti>
        uart_puts(";");
  8c:	84 e7       	ldi	r24, 0x74	; 116
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	19 d2       	rcall	.+1074   	; 0x4c4 <uart_puts>
        uart_puti(get_line_adc(_RIGHT));
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	26 d0       	rcall	.+76     	; 0xe2 <get_line_adc>
  96:	88 2f       	mov	r24, r24
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	34 d2       	rcall	.+1128   	; 0x504 <uart_puti>
        uart_puts(_CR);
  9c:	86 e7       	ldi	r24, 0x76	; 118
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	11 d2       	rcall	.+1058   	; 0x4c4 <uart_puts>


    }//while(1)
  a2:	ef cf       	rjmp	.-34     	; 0x82 <main+0x24>

000000a4 <init_line>:
*
* /return   none
*
************************************************************************/
void init_line(void)
{
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
    DDRC &= ~( 1 << PC3);                   // Pin als Eingang
  ac:	84 e3       	ldi	r24, 0x34	; 52
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	24 e3       	ldi	r18, 0x34	; 52
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	f9 01       	movw	r30, r18
  b6:	20 81       	ld	r18, Z
  b8:	27 7f       	andi	r18, 0xF7	; 247
  ba:	fc 01       	movw	r30, r24
  bc:	20 83       	st	Z, r18
    DDRC &= ~( 1 << PC2);                   // Pin als Eingang
  be:	84 e3       	ldi	r24, 0x34	; 52
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	24 e3       	ldi	r18, 0x34	; 52
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	f9 01       	movw	r30, r18
  c8:	20 81       	ld	r18, Z
  ca:	2b 7f       	andi	r18, 0xFB	; 251
  cc:	fc 01       	movw	r30, r24
  ce:	20 83       	st	Z, r18

    uart_puts("line init done...");
  d0:	89 e7       	ldi	r24, 0x79	; 121
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	f7 d1       	rcall	.+1006   	; 0x4c4 <uart_puts>
    uart_puts(_CR);
  d6:	8b e8       	ldi	r24, 0x8B	; 139
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	f4 d1       	rcall	.+1000   	; 0x4c4 <uart_puts>
}
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <get_line_adc>:
*           ...
*           65536   max. hell
*
************************************************************************/
uint8_t get_line_adc(char side)
{
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	1f 92       	push	r1
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
  ec:	89 83       	std	Y+1, r24	; 0x01
    if(side == _LEFT)                       // Auswahl ADC für den linken Liniensensor
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	88 23       	and	r24, r24
  f2:	29 f5       	brne	.+74     	; 0x13e <get_line_adc+0x5c>
    {
        ADMUX |=  ( 1 << MUX0);
  f4:	87 e2       	ldi	r24, 0x27	; 39
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	27 e2       	ldi	r18, 0x27	; 39
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	f9 01       	movw	r30, r18
  fe:	20 81       	ld	r18, Z
 100:	21 60       	ori	r18, 0x01	; 1
 102:	fc 01       	movw	r30, r24
 104:	20 83       	st	Z, r18
        ADMUX |=  ( 1 << MUX1);
 106:	87 e2       	ldi	r24, 0x27	; 39
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	27 e2       	ldi	r18, 0x27	; 39
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	f9 01       	movw	r30, r18
 110:	20 81       	ld	r18, Z
 112:	22 60       	ori	r18, 0x02	; 2
 114:	fc 01       	movw	r30, r24
 116:	20 83       	st	Z, r18
        ADMUX &= ~( 1 << MUX2);
 118:	87 e2       	ldi	r24, 0x27	; 39
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	27 e2       	ldi	r18, 0x27	; 39
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	f9 01       	movw	r30, r18
 122:	20 81       	ld	r18, Z
 124:	2b 7f       	andi	r18, 0xFB	; 251
 126:	fc 01       	movw	r30, r24
 128:	20 83       	st	Z, r18
        ADMUX &= ~( 1 << MUX3);
 12a:	87 e2       	ldi	r24, 0x27	; 39
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	27 e2       	ldi	r18, 0x27	; 39
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	f9 01       	movw	r30, r18
 134:	20 81       	ld	r18, Z
 136:	27 7f       	andi	r18, 0xF7	; 247
 138:	fc 01       	movw	r30, r24
 13a:	20 83       	st	Z, r18
 13c:	2b c0       	rjmp	.+86     	; 0x194 <get_line_adc+0xb2>
    }
    
    else if(side == _RIGHT)                 // Auswahl ADC für den rechten Liniensensor
 13e:	89 81       	ldd	r24, Y+1	; 0x01
 140:	81 30       	cpi	r24, 0x01	; 1
 142:	29 f5       	brne	.+74     	; 0x18e <get_line_adc+0xac>
    {
        ADMUX &= ~( 1 << MUX0);
 144:	87 e2       	ldi	r24, 0x27	; 39
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	27 e2       	ldi	r18, 0x27	; 39
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	f9 01       	movw	r30, r18
 14e:	20 81       	ld	r18, Z
 150:	2e 7f       	andi	r18, 0xFE	; 254
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
        ADMUX |=  ( 1 << MUX1);
 156:	87 e2       	ldi	r24, 0x27	; 39
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	27 e2       	ldi	r18, 0x27	; 39
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	f9 01       	movw	r30, r18
 160:	20 81       	ld	r18, Z
 162:	22 60       	ori	r18, 0x02	; 2
 164:	fc 01       	movw	r30, r24
 166:	20 83       	st	Z, r18
        ADMUX &= ~( 1 << MUX2);
 168:	87 e2       	ldi	r24, 0x27	; 39
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	27 e2       	ldi	r18, 0x27	; 39
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	f9 01       	movw	r30, r18
 172:	20 81       	ld	r18, Z
 174:	2b 7f       	andi	r18, 0xFB	; 251
 176:	fc 01       	movw	r30, r24
 178:	20 83       	st	Z, r18
        ADMUX &= ~( 1 << MUX3);
 17a:	87 e2       	ldi	r24, 0x27	; 39
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	27 e2       	ldi	r18, 0x27	; 39
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	f9 01       	movw	r30, r18
 184:	20 81       	ld	r18, Z
 186:	27 7f       	andi	r18, 0xF7	; 247
 188:	fc 01       	movw	r30, r24
 18a:	20 83       	st	Z, r18
 18c:	03 c0       	rjmp	.+6      	; 0x194 <get_line_adc+0xb2>
    }

    else                                    // Ungültige Auswahl
    {
        uart_puts("kein gültiger ADC Kanal in get_line_adc()");
 18e:	8e e8       	ldi	r24, 0x8E	; 142
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	98 d1       	rcall	.+816    	; 0x4c4 <uart_puts>
    }

    ADCSRA |= ( 1 << ADSC);                 // Starte ADC Messung
 194:	86 e2       	ldi	r24, 0x26	; 38
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	26 e2       	ldi	r18, 0x26	; 38
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	f9 01       	movw	r30, r18
 19e:	20 81       	ld	r18, Z
 1a0:	20 64       	ori	r18, 0x40	; 64
 1a2:	fc 01       	movw	r30, r24
 1a4:	20 83       	st	Z, r18
            
    while( ADSC == 1)                       // Warte bis ADC-Messung beendet
 1a6:	00 00       	nop
    {
        //wait
    }
        
    return ADC;                             // gib ADC Wert zurück
 1a8:	84 e2       	ldi	r24, 0x24	; 36
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	fc 01       	movw	r30, r24
 1ae:	80 81       	ld	r24, Z
 1b0:	91 81       	ldd	r25, Z+1	; 0x01
 1b2:	0f 90       	pop	r0
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <init_motor>:
* /return   none
*
*
************************************************************************/
void init_motor(void)
{
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
    /** IOs definieren **/
    DDRD |= (1 << PD4) | (1 << PD5);                // Pins für linken Motor als Ausgänge
 1c2:	81 e3       	ldi	r24, 0x31	; 49
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	21 e3       	ldi	r18, 0x31	; 49
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	f9 01       	movw	r30, r18
 1cc:	20 81       	ld	r18, Z
 1ce:	20 63       	ori	r18, 0x30	; 48
 1d0:	fc 01       	movw	r30, r24
 1d2:	20 83       	st	Z, r18
    DDRB |= (1 << PB4) | (1 << PB5);                // Pins für rechten Motor als Ausgänge
 1d4:	87 e3       	ldi	r24, 0x37	; 55
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	27 e3       	ldi	r18, 0x37	; 55
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	f9 01       	movw	r30, r18
 1de:	20 81       	ld	r18, Z
 1e0:	20 63       	ori	r18, 0x30	; 48
 1e2:	fc 01       	movw	r30, r24
 1e4:	20 83       	st	Z, r18
    DDRB |= (1 << PB1) | (1 << PB2);                // PWM Pins als Ausgänge
 1e6:	87 e3       	ldi	r24, 0x37	; 55
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	27 e3       	ldi	r18, 0x37	; 55
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	f9 01       	movw	r30, r18
 1f0:	20 81       	ld	r18, Z
 1f2:	26 60       	ori	r18, 0x06	; 6
 1f4:	fc 01       	movw	r30, r24
 1f6:	20 83       	st	Z, r18
    
    /** Motor stoppen **/
    PORTD |= (1 << PD4) | (1 << PD5);               // Ausgänge auf HIGH -> Motor blockiert
 1f8:	82 e3       	ldi	r24, 0x32	; 50
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	22 e3       	ldi	r18, 0x32	; 50
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	f9 01       	movw	r30, r18
 202:	20 81       	ld	r18, Z
 204:	20 63       	ori	r18, 0x30	; 48
 206:	fc 01       	movw	r30, r24
 208:	20 83       	st	Z, r18
    PORTB |= (1 << PB4) | (1 << PB5);               // Ausgänge auf HIGH -> Motor blockiert
 20a:	88 e3       	ldi	r24, 0x38	; 56
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	28 e3       	ldi	r18, 0x38	; 56
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	f9 01       	movw	r30, r18
 214:	20 81       	ld	r18, Z
 216:	20 63       	ori	r18, 0x30	; 48
 218:	fc 01       	movw	r30, r24
 21a:	20 83       	st	Z, r18
        
    /** Timer konfigurieren **/
    TCCR1A |= (1 << COM1A1) | (1 << WGM10) | (1 << COM1B1);
 21c:	8f e4       	ldi	r24, 0x4F	; 79
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	2f e4       	ldi	r18, 0x4F	; 79
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	f9 01       	movw	r30, r18
 226:	20 81       	ld	r18, Z
 228:	21 6a       	ori	r18, 0xA1	; 161
 22a:	fc 01       	movw	r30, r24
 22c:	20 83       	st	Z, r18
    TCCR1B |= (1 << CS11);
 22e:	8e e4       	ldi	r24, 0x4E	; 78
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	2e e4       	ldi	r18, 0x4E	; 78
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	f9 01       	movw	r30, r18
 238:	20 81       	ld	r18, Z
 23a:	22 60       	ori	r18, 0x02	; 2
 23c:	fc 01       	movw	r30, r24
 23e:	20 83       	st	Z, r18
    
    uart_puts("motor init done..." _CR);
 240:	88 eb       	ldi	r24, 0xB8	; 184
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	3f d1       	rcall	.+638    	; 0x4c4 <uart_puts>
}
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	08 95       	ret

0000024c <init_od>:
* /return   none
*
*
************************************************************************/
void init_od(void)
{
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	cd b7       	in	r28, 0x3d	; 61
 252:	de b7       	in	r29, 0x3e	; 62
    ADMUX |= (1 << REFS0);                    // AVCC mit externem Kondensator am AREF-Pin
 254:	87 e2       	ldi	r24, 0x27	; 39
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	27 e2       	ldi	r18, 0x27	; 39
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	f9 01       	movw	r30, r18
 25e:	20 81       	ld	r18, Z
 260:	20 64       	ori	r18, 0x40	; 64
 262:	fc 01       	movw	r30, r24
 264:	20 83       	st	Z, r18
    ADCSRA |= (1 << ADEN);                    // ADC Enable
 266:	86 e2       	ldi	r24, 0x26	; 38
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	26 e2       	ldi	r18, 0x26	; 38
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	f9 01       	movw	r30, r18
 270:	20 81       	ld	r18, Z
 272:	20 68       	ori	r18, 0x80	; 128
 274:	fc 01       	movw	r30, r24
 276:	20 83       	st	Z, r18
    ADCSRA |= (1 << ADPS2) | (1 << ADPS0);    // Abtastfrequenz: 8MHz/32=250kHz (4µs)
 278:	86 e2       	ldi	r24, 0x26	; 38
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	26 e2       	ldi	r18, 0x26	; 38
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	f9 01       	movw	r30, r18
 282:	20 81       	ld	r18, Z
 284:	25 60       	ori	r18, 0x05	; 5
 286:	fc 01       	movw	r30, r24
 288:	20 83       	st	Z, r18
    
    uart_puts("odometrie init done..." _CR);
 28a:	8d ec       	ldi	r24, 0xCD	; 205
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	1a d1       	rcall	.+564    	; 0x4c4 <uart_puts>
}
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <init_led>:
* /return    none
*
*
************************************************************************/
void init_led (void)
{
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
    DDRD |= (1 << PD7);                        // PD7 als Ausgang für Back LEDs
 29e:	81 e3       	ldi	r24, 0x31	; 49
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	21 e3       	ldi	r18, 0x31	; 49
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	f9 01       	movw	r30, r18
 2a8:	20 81       	ld	r18, Z
 2aa:	20 68       	ori	r18, 0x80	; 128
 2ac:	fc 01       	movw	r30, r24
 2ae:	20 83       	st	Z, r18
    DDRD |= (1 << PD2);                        // PD2 als Ausgang für RG_LED
 2b0:	81 e3       	ldi	r24, 0x31	; 49
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	21 e3       	ldi	r18, 0x31	; 49
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	f9 01       	movw	r30, r18
 2ba:	20 81       	ld	r18, Z
 2bc:	24 60       	ori	r18, 0x04	; 4
 2be:	fc 01       	movw	r30, r24
 2c0:	20 83       	st	Z, r18
    DDRB |= (1 << PB0);                        // PB0 als Ausgang für RG_LED
 2c2:	87 e3       	ldi	r24, 0x37	; 55
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	27 e3       	ldi	r18, 0x37	; 55
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	f9 01       	movw	r30, r18
 2cc:	20 81       	ld	r18, Z
 2ce:	21 60       	ori	r18, 0x01	; 1
 2d0:	fc 01       	movw	r30, r24
 2d2:	20 83       	st	Z, r18
    DDRD |= (1 << PD6);
 2d4:	81 e3       	ldi	r24, 0x31	; 49
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	21 e3       	ldi	r18, 0x31	; 49
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	f9 01       	movw	r30, r18
 2de:	20 81       	ld	r18, Z
 2e0:	20 64       	ori	r18, 0x40	; 64
 2e2:	fc 01       	movw	r30, r24
 2e4:	20 83       	st	Z, r18
    
    uart_puts("led init done..." _CR);
 2e6:	86 ee       	ldi	r24, 0xE6	; 230
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	ec d0       	rcall	.+472    	; 0x4c4 <uart_puts>
}
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <status_led>:
* /return   none
*
*
************************************************************************/
void status_led( char colour)
{
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	1f 92       	push	r1
 2f8:	cd b7       	in	r28, 0x3d	; 61
 2fa:	de b7       	in	r29, 0x3e	; 62
 2fc:	89 83       	std	Y+1, r24	; 0x01
    if ( colour == _GREEN)
 2fe:	89 81       	ldd	r24, Y+1	; 0x01
 300:	81 30       	cpi	r24, 0x01	; 1
 302:	99 f4       	brne	.+38     	; 0x32a <status_led+0x38>
    {
        PORTB |=  ( 1 << PB0 );
 304:	88 e3       	ldi	r24, 0x38	; 56
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	28 e3       	ldi	r18, 0x38	; 56
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	f9 01       	movw	r30, r18
 30e:	20 81       	ld	r18, Z
 310:	21 60       	ori	r18, 0x01	; 1
 312:	fc 01       	movw	r30, r24
 314:	20 83       	st	Z, r18
        PORTD &= ~( 1 << PD2 );
 316:	82 e3       	ldi	r24, 0x32	; 50
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	22 e3       	ldi	r18, 0x32	; 50
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	f9 01       	movw	r30, r18
 320:	20 81       	ld	r18, Z
 322:	2b 7f       	andi	r18, 0xFB	; 251
 324:	fc 01       	movw	r30, r24
 326:	20 83       	st	Z, r18
 328:	2f c0       	rjmp	.+94     	; 0x388 <status_led+0x96>
    }
     
    else if ( colour == _RED )
 32a:	89 81       	ldd	r24, Y+1	; 0x01
 32c:	82 30       	cpi	r24, 0x02	; 2
 32e:	99 f4       	brne	.+38     	; 0x356 <status_led+0x64>
    {
        PORTB &= ~( 1 << PB0 );
 330:	88 e3       	ldi	r24, 0x38	; 56
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	28 e3       	ldi	r18, 0x38	; 56
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	f9 01       	movw	r30, r18
 33a:	20 81       	ld	r18, Z
 33c:	2e 7f       	andi	r18, 0xFE	; 254
 33e:	fc 01       	movw	r30, r24
 340:	20 83       	st	Z, r18
        PORTD |=  ( 1 << PD2 );
 342:	82 e3       	ldi	r24, 0x32	; 50
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	22 e3       	ldi	r18, 0x32	; 50
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	f9 01       	movw	r30, r18
 34c:	20 81       	ld	r18, Z
 34e:	24 60       	ori	r18, 0x04	; 4
 350:	fc 01       	movw	r30, r24
 352:	20 83       	st	Z, r18
 354:	19 c0       	rjmp	.+50     	; 0x388 <status_led+0x96>
    }
     
    else if ( colour == _ORANGE )
 356:	89 81       	ldd	r24, Y+1	; 0x01
 358:	83 30       	cpi	r24, 0x03	; 3
 35a:	99 f4       	brne	.+38     	; 0x382 <status_led+0x90>
    {
        PORTB |= ( 1 << PB0 );
 35c:	88 e3       	ldi	r24, 0x38	; 56
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	28 e3       	ldi	r18, 0x38	; 56
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	f9 01       	movw	r30, r18
 366:	20 81       	ld	r18, Z
 368:	21 60       	ori	r18, 0x01	; 1
 36a:	fc 01       	movw	r30, r24
 36c:	20 83       	st	Z, r18
        PORTD |= ( 1 << PD2 );
 36e:	82 e3       	ldi	r24, 0x32	; 50
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	22 e3       	ldi	r18, 0x32	; 50
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	f9 01       	movw	r30, r18
 378:	20 81       	ld	r18, Z
 37a:	24 60       	ori	r18, 0x04	; 4
 37c:	fc 01       	movw	r30, r24
 37e:	20 83       	st	Z, r18
 380:	03 c0       	rjmp	.+6      	; 0x388 <status_led+0x96>
    }
     
    else
    {
        uart_puts("falsche Eingabe bei status_led()");
 382:	89 ef       	ldi	r24, 0xF9	; 249
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	9e d0       	rcall	.+316    	; 0x4c4 <uart_puts>
    }     
     
}
 388:	0f 90       	pop	r0
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
 38e:	08 95       	ret

00000390 <line_led>:
* /return    none
*
*
************************************************************************/ 
void line_led(char status)
{
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	1f 92       	push	r1
 396:	cd b7       	in	r28, 0x3d	; 61
 398:	de b7       	in	r29, 0x3e	; 62
 39a:	89 83       	std	Y+1, r24	; 0x01
    if(status == _ON)
 39c:	89 81       	ldd	r24, Y+1	; 0x01
 39e:	81 30       	cpi	r24, 0x01	; 1
 3a0:	51 f4       	brne	.+20     	; 0x3b6 <line_led+0x26>
    {
        PORTD |= ( 1 << PD6 );
 3a2:	82 e3       	ldi	r24, 0x32	; 50
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	22 e3       	ldi	r18, 0x32	; 50
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	f9 01       	movw	r30, r18
 3ac:	20 81       	ld	r18, Z
 3ae:	20 64       	ori	r18, 0x40	; 64
 3b0:	fc 01       	movw	r30, r24
 3b2:	20 83       	st	Z, r18
 3b4:	10 c0       	rjmp	.+32     	; 0x3d6 <line_led+0x46>
    }
    
    else if( status == _OFF)
 3b6:	89 81       	ldd	r24, Y+1	; 0x01
 3b8:	88 23       	and	r24, r24
 3ba:	51 f4       	brne	.+20     	; 0x3d0 <line_led+0x40>
    {
        PORTD &= ~( 1 << PD6);
 3bc:	82 e3       	ldi	r24, 0x32	; 50
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	22 e3       	ldi	r18, 0x32	; 50
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	f9 01       	movw	r30, r18
 3c6:	20 81       	ld	r18, Z
 3c8:	2f 7b       	andi	r18, 0xBF	; 191
 3ca:	fc 01       	movw	r30, r24
 3cc:	20 83       	st	Z, r18
 3ce:	03 c0       	rjmp	.+6      	; 0x3d6 <line_led+0x46>
    }
    
    else
    {
        uart_puts("falsche Eingabe bei line_led()");
 3d0:	8a e1       	ldi	r24, 0x1A	; 26
 3d2:	91 e0       	ldi	r25, 0x01	; 1
 3d4:	77 d0       	rcall	.+238    	; 0x4c4 <uart_puts>
    }
 3d6:	0f 90       	pop	r0
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	08 95       	ret

000003de <init_timer>:
* /return   none
*
*
************************************************************************/
void init_timer(void)
{
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	cd b7       	in	r28, 0x3d	; 61
 3e4:	de b7       	in	r29, 0x3e	; 62
    TCCR0 |=  (1 << CS02) | (1 << CS00);                //prescaler 1024
 3e6:	83 e5       	ldi	r24, 0x53	; 83
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	23 e5       	ldi	r18, 0x53	; 83
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	f9 01       	movw	r30, r18
 3f0:	20 81       	ld	r18, Z
 3f2:	25 60       	ori	r18, 0x05	; 5
 3f4:	fc 01       	movw	r30, r24
 3f6:	20 83       	st	Z, r18
                                                        // -> 8MHz/1024= 7,8Khz ~ 128µs
    TIMSK |= (1 << TOIE0);                                // enable Timer-Overflow interrupt
 3f8:	89 e5       	ldi	r24, 0x59	; 89
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	29 e5       	ldi	r18, 0x59	; 89
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	f9 01       	movw	r30, r18
 402:	20 81       	ld	r18, Z
 404:	21 60       	ori	r18, 0x01	; 1
 406:	fc 01       	movw	r30, r24
 408:	20 83       	st	Z, r18
                                                        
    uart_puts("timer init done..." _CR);
 40a:	89 e3       	ldi	r24, 0x39	; 57
 40c:	91 e0       	ldi	r25, 0x01	; 1
 40e:	5a d0       	rcall	.+180    	; 0x4c4 <uart_puts>
}
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	08 95       	ret

00000416 <__vector_9>:
* /return   none
*
*
************************************************************************/
ISR (TIMER0_OVF_vect)
{
 416:	1f 92       	push	r1
 418:	0f 92       	push	r0
 41a:	00 90 5f 00 	lds	r0, 0x005F
 41e:	0f 92       	push	r0
 420:	11 24       	eor	r1, r1
 422:	cf 93       	push	r28
 424:	df 93       	push	r29
 426:	cd b7       	in	r28, 0x3d	; 61
 428:	de b7       	in	r29, 0x3e	; 62
    //enter Code here    

}
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	0f 90       	pop	r0
 430:	00 92 5f 00 	sts	0x005F, r0
 434:	0f 90       	pop	r0
 436:	1f 90       	pop	r1
 438:	18 95       	reti

0000043a <init_uart>:
* /return   none
*
*
************************************************************************/
void init_uart(void)
{
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
 43e:	1f 92       	push	r1
 440:	cd b7       	in	r28, 0x3d	; 61
 442:	de b7       	in	r29, 0x3e	; 62
        uint8_t ubrr;
        ubrr = _FOSC/16/_BAUD-1;
 444:	8f ec       	ldi	r24, 0xCF	; 207
 446:	89 83       	std	Y+1, r24	; 0x01
        /* Set baud rate */
        UBRRH = (unsigned char)(ubrr>>8);
 448:	80 e4       	ldi	r24, 0x40	; 64
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	29 81       	ldd	r18, Y+1	; 0x01
 44e:	22 2f       	mov	r18, r18
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	23 2f       	mov	r18, r19
 454:	33 0f       	add	r19, r19
 456:	33 0b       	sbc	r19, r19
 458:	fc 01       	movw	r30, r24
 45a:	20 83       	st	Z, r18
        UBRRL = (unsigned char)ubrr;
 45c:	89 e2       	ldi	r24, 0x29	; 41
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	29 81       	ldd	r18, Y+1	; 0x01
 462:	fc 01       	movw	r30, r24
 464:	20 83       	st	Z, r18
        /* Enable receiver and transmitter */
        UCSRB |= (1<<TXEN);
 466:	8a e2       	ldi	r24, 0x2A	; 42
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	2a e2       	ldi	r18, 0x2A	; 42
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	f9 01       	movw	r30, r18
 470:	20 81       	ld	r18, Z
 472:	28 60       	ori	r18, 0x08	; 8
 474:	fc 01       	movw	r30, r24
 476:	20 83       	st	Z, r18
        /* Set frame format: 8data, 1stop bit */
        UCSRC = (1<<URSEL) |(3<<UCSZ0);
 478:	80 e4       	ldi	r24, 0x40	; 64
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	26 e8       	ldi	r18, 0x86	; 134
 47e:	fc 01       	movw	r30, r24
 480:	20 83       	st	Z, r18
        
        uart_puts("uart init done..." _CR);
 482:	8e e4       	ldi	r24, 0x4E	; 78
 484:	91 e0       	ldi	r25, 0x01	; 1
 486:	1e d0       	rcall	.+60     	; 0x4c4 <uart_puts>
}
 488:	0f 90       	pop	r0
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	08 95       	ret

00000490 <uart_putc>:
* /return   none
*
*
************************************************************************/
void uart_putc(unsigned char data) 
{    
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	1f 92       	push	r1
 496:	cd b7       	in	r28, 0x3d	; 61
 498:	de b7       	in	r29, 0x3e	; 62
 49a:	89 83       	std	Y+1, r24	; 0x01
    /* Wait for empty transmit buffer */
    while ( !( UCSRA & (1<<UDRE)) )
 49c:	00 00       	nop
 49e:	8b e2       	ldi	r24, 0x2B	; 43
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	fc 01       	movw	r30, r24
 4a4:	80 81       	ld	r24, Z
 4a6:	88 2f       	mov	r24, r24
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	80 72       	andi	r24, 0x20	; 32
 4ac:	99 27       	eor	r25, r25
 4ae:	00 97       	sbiw	r24, 0x00	; 0
 4b0:	b1 f3       	breq	.-20     	; 0x49e <uart_putc+0xe>
    ;
    /* Put data into buffer, sends the data */
    UDR = data;
 4b2:	8c e2       	ldi	r24, 0x2C	; 44
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	29 81       	ldd	r18, Y+1	; 0x01
 4b8:	fc 01       	movw	r30, r24
 4ba:	20 83       	st	Z, r18
}
 4bc:	0f 90       	pop	r0
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	08 95       	ret

000004c4 <uart_puts>:
*
* /example    uart_puts("Test");
*
************************************************************************/
void uart_puts (const char *s)
{
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	00 d0       	rcall	.+0      	; 0x4ca <uart_puts+0x6>
 4ca:	cd b7       	in	r28, 0x3d	; 61
 4cc:	de b7       	in	r29, 0x3e	; 62
 4ce:	9a 83       	std	Y+2, r25	; 0x02
 4d0:	89 83       	std	Y+1, r24	; 0x01
    do
    {
        uart_putc (*s);
 4d2:	89 81       	ldd	r24, Y+1	; 0x01
 4d4:	9a 81       	ldd	r25, Y+2	; 0x02
 4d6:	fc 01       	movw	r30, r24
 4d8:	80 81       	ld	r24, Z
 4da:	da df       	rcall	.-76     	; 0x490 <uart_putc>
    }
    while (*s++);
 4dc:	89 81       	ldd	r24, Y+1	; 0x01
 4de:	9a 81       	ldd	r25, Y+2	; 0x02
 4e0:	fc 01       	movw	r30, r24
 4e2:	80 81       	ld	r24, Z
 4e4:	21 e0       	ldi	r18, 0x01	; 1
 4e6:	88 23       	and	r24, r24
 4e8:	09 f4       	brne	.+2      	; 0x4ec <uart_puts+0x28>
 4ea:	20 e0       	ldi	r18, 0x00	; 0
 4ec:	89 81       	ldd	r24, Y+1	; 0x01
 4ee:	9a 81       	ldd	r25, Y+2	; 0x02
 4f0:	01 96       	adiw	r24, 0x01	; 1
 4f2:	9a 83       	std	Y+2, r25	; 0x02
 4f4:	89 83       	std	Y+1, r24	; 0x01
 4f6:	22 23       	and	r18, r18
 4f8:	61 f7       	brne	.-40     	; 0x4d2 <uart_puts+0xe>
}
 4fa:	0f 90       	pop	r0
 4fc:	0f 90       	pop	r0
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	08 95       	ret

00000504 <uart_puti>:
*
*           uart_puti(i);
*
************************************************************************/
void uart_puti( uint16_t data )
{
 504:	cf 93       	push	r28
 506:	df 93       	push	r29
 508:	cd b7       	in	r28, 0x3d	; 61
 50a:	de b7       	in	r29, 0x3e	; 62
 50c:	28 97       	sbiw	r28, 0x08	; 8
 50e:	0f b6       	in	r0, 0x3f	; 63
 510:	f8 94       	cli
 512:	de bf       	out	0x3e, r29	; 62
 514:	0f be       	out	0x3f, r0	; 63
 516:	cd bf       	out	0x3d, r28	; 61
 518:	98 87       	std	Y+8, r25	; 0x08
 51a:	8f 83       	std	Y+7, r24	; 0x07
    char buffer[6];
    itoa(data, buffer, 10);
 51c:	8f 81       	ldd	r24, Y+7	; 0x07
 51e:	98 85       	ldd	r25, Y+8	; 0x08
 520:	4a e0       	ldi	r20, 0x0A	; 10
 522:	50 e0       	ldi	r21, 0x00	; 0
 524:	9e 01       	movw	r18, r28
 526:	2f 5f       	subi	r18, 0xFF	; 255
 528:	3f 4f       	sbci	r19, 0xFF	; 255
 52a:	b9 01       	movw	r22, r18
 52c:	0c d0       	rcall	.+24     	; 0x546 <itoa>
    uart_puts(buffer);
 52e:	ce 01       	movw	r24, r28
 530:	01 96       	adiw	r24, 0x01	; 1
 532:	c8 df       	rcall	.-112    	; 0x4c4 <uart_puts>
}
 534:	28 96       	adiw	r28, 0x08	; 8
 536:	0f b6       	in	r0, 0x3f	; 63
 538:	f8 94       	cli
 53a:	de bf       	out	0x3e, r29	; 62
 53c:	0f be       	out	0x3f, r0	; 63
 53e:	cd bf       	out	0x3d, r28	; 61
 540:	df 91       	pop	r29
 542:	cf 91       	pop	r28
 544:	08 95       	ret

00000546 <itoa>:
 546:	fb 01       	movw	r30, r22
 548:	9f 01       	movw	r18, r30
 54a:	e8 94       	clt
 54c:	42 30       	cpi	r20, 0x02	; 2
 54e:	bc f0       	brlt	.+46     	; 0x57e <itoa+0x38>
 550:	45 32       	cpi	r20, 0x25	; 37
 552:	ac f4       	brge	.+42     	; 0x57e <itoa+0x38>
 554:	4a 30       	cpi	r20, 0x0A	; 10
 556:	29 f4       	brne	.+10     	; 0x562 <itoa+0x1c>
 558:	97 fb       	bst	r25, 7
 55a:	1e f4       	brtc	.+6      	; 0x562 <itoa+0x1c>
 55c:	90 95       	com	r25
 55e:	81 95       	neg	r24
 560:	9f 4f       	sbci	r25, 0xFF	; 255
 562:	64 2f       	mov	r22, r20
 564:	77 27       	eor	r23, r23
 566:	1e d0       	rcall	.+60     	; 0x5a4 <__udivmodhi4>
 568:	80 5d       	subi	r24, 0xD0	; 208
 56a:	8a 33       	cpi	r24, 0x3A	; 58
 56c:	0c f0       	brlt	.+2      	; 0x570 <itoa+0x2a>
 56e:	89 5d       	subi	r24, 0xD9	; 217
 570:	81 93       	st	Z+, r24
 572:	cb 01       	movw	r24, r22
 574:	00 97       	sbiw	r24, 0x00	; 0
 576:	a9 f7       	brne	.-22     	; 0x562 <itoa+0x1c>
 578:	16 f4       	brtc	.+4      	; 0x57e <itoa+0x38>
 57a:	5d e2       	ldi	r21, 0x2D	; 45
 57c:	51 93       	st	Z+, r21
 57e:	10 82       	st	Z, r1
 580:	c9 01       	movw	r24, r18
 582:	00 c0       	rjmp	.+0      	; 0x584 <strrev>

00000584 <strrev>:
 584:	dc 01       	movw	r26, r24
 586:	fc 01       	movw	r30, r24
 588:	67 2f       	mov	r22, r23
 58a:	71 91       	ld	r23, Z+
 58c:	77 23       	and	r23, r23
 58e:	e1 f7       	brne	.-8      	; 0x588 <strrev+0x4>
 590:	32 97       	sbiw	r30, 0x02	; 2
 592:	04 c0       	rjmp	.+8      	; 0x59c <strrev+0x18>
 594:	7c 91       	ld	r23, X
 596:	6d 93       	st	X+, r22
 598:	70 83       	st	Z, r23
 59a:	62 91       	ld	r22, -Z
 59c:	ae 17       	cp	r26, r30
 59e:	bf 07       	cpc	r27, r31
 5a0:	c8 f3       	brcs	.-14     	; 0x594 <strrev+0x10>
 5a2:	08 95       	ret

000005a4 <__udivmodhi4>:
 5a4:	aa 1b       	sub	r26, r26
 5a6:	bb 1b       	sub	r27, r27
 5a8:	51 e1       	ldi	r21, 0x11	; 17
 5aa:	07 c0       	rjmp	.+14     	; 0x5ba <__udivmodhi4_ep>

000005ac <__udivmodhi4_loop>:
 5ac:	aa 1f       	adc	r26, r26
 5ae:	bb 1f       	adc	r27, r27
 5b0:	a6 17       	cp	r26, r22
 5b2:	b7 07       	cpc	r27, r23
 5b4:	10 f0       	brcs	.+4      	; 0x5ba <__udivmodhi4_ep>
 5b6:	a6 1b       	sub	r26, r22
 5b8:	b7 0b       	sbc	r27, r23

000005ba <__udivmodhi4_ep>:
 5ba:	88 1f       	adc	r24, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	5a 95       	dec	r21
 5c0:	a9 f7       	brne	.-22     	; 0x5ac <__udivmodhi4_loop>
 5c2:	80 95       	com	r24
 5c4:	90 95       	com	r25
 5c6:	bc 01       	movw	r22, r24
 5c8:	cd 01       	movw	r24, r26
 5ca:	08 95       	ret

000005cc <_exit>:
 5cc:	f8 94       	cli

000005ce <__stop_program>:
 5ce:	ff cf       	rjmp	.-2      	; 0x5ce <__stop_program>
