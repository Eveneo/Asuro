
Asuro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013c  00800060  000009e8  00000a7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080019c  0080019c  00000bb8  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  00000bb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000183  00000000  00000000  0000150c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000168f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001e0  00000000  00000000  000016be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000a52  00000000  00000000  0000189e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005fb  00000000  00000000  000022f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000aeb  00000000  00000000  000028eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004ac  00000000  00000000  000033d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000300  00000000  00000000  00003884  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000825  00000000  00000000  00003b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000130  00000000  00000000  000043a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:




 void follow_line(void)
 {
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	aa c3       	rjmp	.+1876   	; 0x75a <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
    line_diff = get_line_diff();   
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>

    /** Linker Sensor dunkler **/   
    if ( (line_diff < -_LDIFF_LVL1) && (pwr_left > _LREG_LVL1) )
  12:	fa c3       	rjmp	.+2036   	; 0x808 <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
    {
        pwr_left -= _LREG_LVL1;                                                     // linken Motor verlangsamen
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	11 e0       	ldi	r17, 0x01	; 1
        pwr_right = 255;                                                            // rechter Motor vollgas
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 ee       	ldi	r30, 0xE8	; 232
  3a:	f9 e0       	ldi	r31, 0x09	; 9
    }

    /** Rechter Sensor dunkler **/
    else if ( (_LDIFF_LVL1 < line_diff) && (pwr_right > _LREG_LVL1) )
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 39       	cpi	r26, 0x9C	; 156
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	ac e9       	ldi	r26, 0x9C	; 156
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
    {
        pwr_left = 255;                                                             // linker Motor vollgas
  52:	ad 39       	cpi	r26, 0x9D	; 157
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
        pwr_right -= _LREG_LVL1;                                                    // rechten Motor verlangsamen
  58:	36 d0       	rcall	.+108    	; 0xc6 <main>
  5a:	c4 c4       	rjmp	.+2440   	; 0x9e4 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <init_adc>:
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
  62:	cd b7       	in	r28, 0x3d	; 61
    }

    /** Beide Sensoren gleich hell/dunkel **/
    else if ( (-_LDIFF_LVL1 < line_diff) && (line_diff < _LDIFF_LVL1) )
  64:	de b7       	in	r29, 0x3e	; 62
  66:	87 e2       	ldi	r24, 0x27	; 39
  68:	90 e0       	ldi	r25, 0x00	; 0
  6a:	27 e2       	ldi	r18, 0x27	; 39
  6c:	30 e0       	ldi	r19, 0x00	; 0
  6e:	f9 01       	movw	r30, r18
  70:	20 81       	ld	r18, Z
  72:	20 64       	ori	r18, 0x40	; 64
  74:	fc 01       	movw	r30, r24
  76:	20 83       	st	Z, r18
  78:	86 e2       	ldi	r24, 0x26	; 38
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	26 e2       	ldi	r18, 0x26	; 38
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	f9 01       	movw	r30, r18
    {
        pwr_left = 255;
  82:	20 81       	ld	r18, Z
  84:	20 68       	ori	r18, 0x80	; 128
  86:	fc 01       	movw	r30, r24
        pwr_right = 255;
  88:	20 83       	st	Z, r18
  8a:	86 e2       	ldi	r24, 0x26	; 38
  8c:	90 e0       	ldi	r25, 0x00	; 0
//          }
//      }

//          motor_pwr(pwr_left, pwr_right);
// 
        uart_puti(pwr_left);
  8e:	26 e2       	ldi	r18, 0x26	; 38
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	f9 01       	movw	r30, r18
  94:	20 81       	ld	r18, Z
  96:	25 60       	ori	r18, 0x05	; 5
        uart_puts(";");
  98:	fc 01       	movw	r30, r24
  9a:	20 83       	st	Z, r18
  9c:	86 e2       	ldi	r24, 0x26	; 38
        uart_puti(pwr_right);
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	26 e2       	ldi	r18, 0x26	; 38
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	f9 01       	movw	r30, r18
  a6:	20 81       	ld	r18, Z
        uart_puts(";");
  a8:	20 64       	ori	r18, 0x40	; 64
  aa:	fc 01       	movw	r30, r24
  ac:	20 83       	st	Z, r18
        uart_puti(line_diff);
  ae:	00 00       	nop
  b0:	84 e2       	ldi	r24, 0x24	; 36
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	fc 01       	movw	r30, r24
  b6:	80 81       	ld	r24, Z
        uart_puts(_CR);
  b8:	91 81       	ldd	r25, Z+1	; 0x01
  ba:	80 e6       	ldi	r24, 0x60	; 96
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	fb d3       	rcall	.+2038   	; 0x8b6 <uart_puts>
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28


    (void) ADCW;                                // Verwerfen des ersten ADC Wertes (ungültig)                      
    
    uart_puts("ADC init done..." _CR);
}
  c4:	08 95       	ret

000000c6 <main>:
/** Test **/
#include "test.h"


int main(void)
{    
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
    /** Initialisierungen **/    
    init_uart();                            // initialisiere IR Übertragung
  ce:	ae d3       	rcall	.+1884   	; 0x82c <init_uart>
    init_led();                             // initialisiere LED Steuerung
  d0:	2c d2       	rcall	.+1112   	; 0x52a <init_led>
    init_motor();                           // initialisiere Motor Steuerung
  d2:	6c d1       	rcall	.+728    	; 0x3ac <init_motor>
    init_adc();                             // initialisiere ADC
  d4:	c4 df       	rcall	.-120    	; 0x5e <init_adc>
    init_timer();                           // initialisiere Timer
  d6:	7c d3       	rcall	.+1784   	; 0x7d0 <init_timer>
    init_line();                            // initialisiere Linienerkennung
  d8:	15 d0       	rcall	.+42     	; 0x104 <init_line>
    init_switch();                          // initialisiere Taster
  da:	cb d2       	rcall	.+1430   	; 0x672 <init_switch>
    
    status_led( _ORANGE);                    
  dc:	83 e0       	ldi	r24, 0x03	; 3
  de:	53 d2       	rcall	.+1190   	; 0x586 <status_led>
    line_led(_ON);
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	a0 d2       	rcall	.+1344   	; 0x624 <line_led>
    uart_puts("all inits done..." _CR);
  e4:	83 e7       	ldi	r24, 0x73	; 115
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	e6 d3       	rcall	.+1996   	; 0x8b6 <uart_puts>
    sei();                                  // aktiviere globale Interrupts
  ea:	78 94       	sei
    
    motor_dir(_FWD, _FWD);
  ec:	61 e0       	ldi	r22, 0x01	; 1
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	a6 d1       	rcall	.+844    	; 0x43e <motor_dir>
    calibrate_line_sens();
  f2:	bf d0       	rcall	.+382    	; 0x272 <calibrate_line_sens>
    
    status_led(_GREEN);
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	47 d2       	rcall	.+1166   	; 0x586 <status_led>
         
    while(1)
    {

      //follow_line();
      uart_puti(get_line_diff());
  f8:	99 d0       	rcall	.+306    	; 0x22c <get_line_diff>
  fa:	fd d3       	rcall	.+2042   	; 0x8f6 <uart_puti>
      uart_puts(_CR);
  fc:	87 e8       	ldi	r24, 0x87	; 135
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	da d3       	rcall	.+1972   	; 0x8b6 <uart_puts>

    }//while(1)
 102:	fa cf       	rjmp	.-12     	; 0xf8 <main+0x32>

00000104 <init_line>:
*
* /return   none
*
************************************************************************/
void init_line(void)
{
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
    DDRC &= ~( 1 << PC3);                   // Pin als Eingang
 10c:	84 e3       	ldi	r24, 0x34	; 52
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	24 e3       	ldi	r18, 0x34	; 52
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	f9 01       	movw	r30, r18
 116:	20 81       	ld	r18, Z
 118:	27 7f       	andi	r18, 0xF7	; 247
 11a:	fc 01       	movw	r30, r24
 11c:	20 83       	st	Z, r18
    DDRC &= ~( 1 << PC2);                   // Pin als Eingang
 11e:	84 e3       	ldi	r24, 0x34	; 52
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	24 e3       	ldi	r18, 0x34	; 52
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	f9 01       	movw	r30, r18
 128:	20 81       	ld	r18, Z
 12a:	2b 7f       	andi	r18, 0xFB	; 251
 12c:	fc 01       	movw	r30, r24
 12e:	20 83       	st	Z, r18

    uart_puts("line init done...");
 130:	8a e8       	ldi	r24, 0x8A	; 138
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	c0 d3       	rcall	.+1920   	; 0x8b6 <uart_puts>
    uart_puts(_CR);
 136:	8c e9       	ldi	r24, 0x9C	; 156
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	bd d3       	rcall	.+1914   	; 0x8b6 <uart_puts>
}
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <get_line_adc>:
*           ...
*           65536   max. hell
*
************************************************************************/
uint16_t get_line_adc(char side)
{    
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	00 d0       	rcall	.+0      	; 0x148 <get_line_adc+0x6>
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62
 14c:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i;

    for ( i=0; i<255; i++)
 14e:	19 82       	std	Y+1, r1	; 0x01
 150:	03 c0       	rjmp	.+6      	; 0x158 <get_line_adc+0x16>
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	8f 5f       	subi	r24, 0xFF	; 255
 156:	89 83       	std	Y+1, r24	; 0x01
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	8f 3f       	cpi	r24, 0xFF	; 255
 15c:	d1 f7       	brne	.-12     	; 0x152 <get_line_adc+0x10>
    {
        //Warteschleife für Kanalwechsel
    }

    if (side == _LEFT)                       // Auswahl ADC für den linken Liniensensor
 15e:	8a 81       	ldd	r24, Y+2	; 0x02
 160:	88 23       	and	r24, r24
 162:	29 f5       	brne	.+74     	; 0x1ae <get_line_adc+0x6c>
    {
        ADMUX |=  ( 1 << MUX0);
 164:	87 e2       	ldi	r24, 0x27	; 39
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	27 e2       	ldi	r18, 0x27	; 39
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	f9 01       	movw	r30, r18
 16e:	20 81       	ld	r18, Z
 170:	21 60       	ori	r18, 0x01	; 1
 172:	fc 01       	movw	r30, r24
 174:	20 83       	st	Z, r18
        ADMUX |=  ( 1 << MUX1);
 176:	87 e2       	ldi	r24, 0x27	; 39
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	27 e2       	ldi	r18, 0x27	; 39
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	f9 01       	movw	r30, r18
 180:	20 81       	ld	r18, Z
 182:	22 60       	ori	r18, 0x02	; 2
 184:	fc 01       	movw	r30, r24
 186:	20 83       	st	Z, r18
        ADMUX &= ~( 1 << MUX2);
 188:	87 e2       	ldi	r24, 0x27	; 39
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	27 e2       	ldi	r18, 0x27	; 39
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	f9 01       	movw	r30, r18
 192:	20 81       	ld	r18, Z
 194:	2b 7f       	andi	r18, 0xFB	; 251
 196:	fc 01       	movw	r30, r24
 198:	20 83       	st	Z, r18
        ADMUX &= ~( 1 << MUX3);
 19a:	87 e2       	ldi	r24, 0x27	; 39
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	27 e2       	ldi	r18, 0x27	; 39
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	f9 01       	movw	r30, r18
 1a4:	20 81       	ld	r18, Z
 1a6:	27 7f       	andi	r18, 0xF7	; 247
 1a8:	fc 01       	movw	r30, r24
 1aa:	20 83       	st	Z, r18
 1ac:	2b c0       	rjmp	.+86     	; 0x204 <get_line_adc+0xc2>
    }
    
    else if (side == _RIGHT)                 // Auswahl ADC für den rechten Liniensensor
 1ae:	8a 81       	ldd	r24, Y+2	; 0x02
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	29 f5       	brne	.+74     	; 0x1fe <get_line_adc+0xbc>
    {
        ADMUX &= ~( 1 << MUX0);
 1b4:	87 e2       	ldi	r24, 0x27	; 39
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	27 e2       	ldi	r18, 0x27	; 39
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	f9 01       	movw	r30, r18
 1be:	20 81       	ld	r18, Z
 1c0:	2e 7f       	andi	r18, 0xFE	; 254
 1c2:	fc 01       	movw	r30, r24
 1c4:	20 83       	st	Z, r18
        ADMUX |=  ( 1 << MUX1);
 1c6:	87 e2       	ldi	r24, 0x27	; 39
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	27 e2       	ldi	r18, 0x27	; 39
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	f9 01       	movw	r30, r18
 1d0:	20 81       	ld	r18, Z
 1d2:	22 60       	ori	r18, 0x02	; 2
 1d4:	fc 01       	movw	r30, r24
 1d6:	20 83       	st	Z, r18
        ADMUX &= ~( 1 << MUX2);
 1d8:	87 e2       	ldi	r24, 0x27	; 39
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	27 e2       	ldi	r18, 0x27	; 39
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	f9 01       	movw	r30, r18
 1e2:	20 81       	ld	r18, Z
 1e4:	2b 7f       	andi	r18, 0xFB	; 251
 1e6:	fc 01       	movw	r30, r24
 1e8:	20 83       	st	Z, r18
        ADMUX &= ~( 1 << MUX3);
 1ea:	87 e2       	ldi	r24, 0x27	; 39
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	27 e2       	ldi	r18, 0x27	; 39
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	f9 01       	movw	r30, r18
 1f4:	20 81       	ld	r18, Z
 1f6:	27 7f       	andi	r18, 0xF7	; 247
 1f8:	fc 01       	movw	r30, r24
 1fa:	20 83       	st	Z, r18
 1fc:	03 c0       	rjmp	.+6      	; 0x204 <get_line_adc+0xc2>
    }

    else                                    // Ungültige Auswahl
    {
        uart_puts("kein gültiger ADC Kanal in get_line_adc()");
 1fe:	8f e9       	ldi	r24, 0x9F	; 159
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	59 d3       	rcall	.+1714   	; 0x8b6 <uart_puts>
    }

    ADCSRA |= ( 1 << ADSC);                 // Starte ADC Messung
 204:	86 e2       	ldi	r24, 0x26	; 38
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	26 e2       	ldi	r18, 0x26	; 38
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	f9 01       	movw	r30, r18
 20e:	20 81       	ld	r18, Z
 210:	20 64       	ori	r18, 0x40	; 64
 212:	fc 01       	movw	r30, r24
 214:	20 83       	st	Z, r18
            
    while( ADSC == 1)                       // Warte bis ADC-Messung beendet
 216:	00 00       	nop
    {
        //wait
    }
        
    return ADC;                             // gib ADC Wert zurück
 218:	84 e2       	ldi	r24, 0x24	; 36
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	fc 01       	movw	r30, r24
 21e:	80 81       	ld	r24, Z
 220:	91 81       	ldd	r25, Z+1	; 0x01
}
 222:	0f 90       	pop	r0
 224:	0f 90       	pop	r0
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <get_line_diff>:
*           ...
*           32767   linker Sensor max. hell, rechter Sensor max. dunkel
*
************************************************************************/
int16_t get_line_diff(void)
{
 22c:	0f 93       	push	r16
 22e:	1f 93       	push	r17
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	00 d0       	rcall	.+0      	; 0x236 <get_line_diff+0xa>
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
    int16_t buffer;
    
    buffer = get_line_adc(_LEFT) - get_line_adc(_RIGHT) - cal_factor;                        // Errechnen der Helligkeitsdifferenz der Sensoren
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	82 df       	rcall	.-252    	; 0x142 <get_line_adc>
 23e:	8c 01       	movw	r16, r24
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	7f df       	rcall	.-258    	; 0x142 <get_line_adc>
 244:	98 01       	movw	r18, r16
 246:	28 1b       	sub	r18, r24
 248:	39 0b       	sbc	r19, r25
 24a:	80 91 9c 01 	lds	r24, 0x019C
 24e:	99 27       	eor	r25, r25
 250:	87 fd       	sbrc	r24, 7
 252:	90 95       	com	r25
 254:	a9 01       	movw	r20, r18
 256:	48 1b       	sub	r20, r24
 258:	59 0b       	sbc	r21, r25
 25a:	ca 01       	movw	r24, r20
 25c:	9a 83       	std	Y+2, r25	; 0x02
 25e:	89 83       	std	Y+1, r24	; 0x01
    
    return buffer;
 260:	89 81       	ldd	r24, Y+1	; 0x01
 262:	9a 81       	ldd	r25, Y+2	; 0x02
}
 264:	0f 90       	pop	r0
 266:	0f 90       	pop	r0
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	1f 91       	pop	r17
 26e:	0f 91       	pop	r16
 270:	08 95       	ret

00000272 <calibrate_line_sens>:
*
* /return   none
*
************************************************************************/
void calibrate_line_sens(void)
{
 272:	ef 92       	push	r14
 274:	ff 92       	push	r15
 276:	0f 93       	push	r16
 278:	1f 93       	push	r17
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	cd b7       	in	r28, 0x3d	; 61
 280:	de b7       	in	r29, 0x3e	; 62
 282:	6b 97       	sbiw	r28, 0x1b	; 27
 284:	0f b6       	in	r0, 0x3f	; 63
 286:	f8 94       	cli
 288:	de bf       	out	0x3e, r29	; 62
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	cd bf       	out	0x3d, r28	; 61
    uint8_t i = 0;                                                          // variable für Zählerschleife
 28e:	19 82       	std	Y+1, r1	; 0x01
    int16_t diff_data[12];                                                  // Array für die ADC Messwerte
    int16_t buffer = 0;                                                     // Zwischenspeicher zur Mittelwert errechnung
 290:	1b 82       	std	Y+3, r1	; 0x03
 292:	1a 82       	std	Y+2, r1	; 0x02
    
    diff_data[11] = get_line_adc(_LEFT) - get_line_adc(_RIGHT);             // dummy Messung, da erste ADC Messung immer fehlerhaft
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	55 df       	rcall	.-342    	; 0x142 <get_line_adc>
 298:	8c 01       	movw	r16, r24
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	52 df       	rcall	.-348    	; 0x142 <get_line_adc>
 29e:	98 01       	movw	r18, r16
 2a0:	28 1b       	sub	r18, r24
 2a2:	39 0b       	sbc	r19, r25
 2a4:	c9 01       	movw	r24, r18
 2a6:	9b 8f       	std	Y+27, r25	; 0x1b
 2a8:	8a 8f       	std	Y+26, r24	; 0x1a
    
    for ( i=0; i<10; i++)                                                   // 10x durchlaufen der Schleife für 10 Messungen
 2aa:	19 82       	std	Y+1, r1	; 0x01
 2ac:	52 c0       	rjmp	.+164    	; 0x352 <calibrate_line_sens+0xe0>
    {
        diff_data[i] = get_line_adc(_LEFT) - get_line_adc(_RIGHT);          // Bilden der Differenz der Sensoren 
 2ae:	89 81       	ldd	r24, Y+1	; 0x01
 2b0:	08 2f       	mov	r16, r24
 2b2:	10 e0       	ldi	r17, 0x00	; 0
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	45 df       	rcall	.-374    	; 0x142 <get_line_adc>
 2b8:	7c 01       	movw	r14, r24
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	42 df       	rcall	.-380    	; 0x142 <get_line_adc>
 2be:	f7 01       	movw	r30, r14
 2c0:	e8 1b       	sub	r30, r24
 2c2:	f9 0b       	sbc	r31, r25
 2c4:	cf 01       	movw	r24, r30
 2c6:	9c 01       	movw	r18, r24
 2c8:	c8 01       	movw	r24, r16
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	ae 01       	movw	r20, r28
 2d0:	4f 5f       	subi	r20, 0xFF	; 255
 2d2:	5f 4f       	sbci	r21, 0xFF	; 255
 2d4:	84 0f       	add	r24, r20
 2d6:	95 1f       	adc	r25, r21
 2d8:	03 96       	adiw	r24, 0x03	; 3
 2da:	fc 01       	movw	r30, r24
 2dc:	31 83       	std	Z+1, r19	; 0x01
 2de:	20 83       	st	Z, r18
        buffer += diff_data[i];                                             // Differenz addieren
 2e0:	89 81       	ldd	r24, Y+1	; 0x01
 2e2:	88 2f       	mov	r24, r24
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	9e 01       	movw	r18, r28
 2ec:	2f 5f       	subi	r18, 0xFF	; 255
 2ee:	3f 4f       	sbci	r19, 0xFF	; 255
 2f0:	82 0f       	add	r24, r18
 2f2:	93 1f       	adc	r25, r19
 2f4:	03 96       	adiw	r24, 0x03	; 3
 2f6:	fc 01       	movw	r30, r24
 2f8:	80 81       	ld	r24, Z
 2fa:	91 81       	ldd	r25, Z+1	; 0x01
 2fc:	2a 81       	ldd	r18, Y+2	; 0x02
 2fe:	3b 81       	ldd	r19, Y+3	; 0x03
 300:	82 0f       	add	r24, r18
 302:	93 1f       	adc	r25, r19
 304:	9b 83       	std	Y+3, r25	; 0x03
 306:	8a 83       	std	Y+2, r24	; 0x02
      
        #if _DEBUG
        uart_puts("Wert ");
 308:	89 ec       	ldi	r24, 0xC9	; 201
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	d4 d2       	rcall	.+1448   	; 0x8b6 <uart_puts>
        uart_puti(i);
 30e:	89 81       	ldd	r24, Y+1	; 0x01
 310:	88 2f       	mov	r24, r24
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	f0 d2       	rcall	.+1504   	; 0x8f6 <uart_puti>
        uart_puts(": ");
 316:	8f ec       	ldi	r24, 0xCF	; 207
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	cd d2       	rcall	.+1434   	; 0x8b6 <uart_puts>
        uart_puti(diff_data[i]);
 31c:	89 81       	ldd	r24, Y+1	; 0x01
 31e:	88 2f       	mov	r24, r24
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	9e 01       	movw	r18, r28
 328:	2f 5f       	subi	r18, 0xFF	; 255
 32a:	3f 4f       	sbci	r19, 0xFF	; 255
 32c:	82 0f       	add	r24, r18
 32e:	93 1f       	adc	r25, r19
 330:	03 96       	adiw	r24, 0x03	; 3
 332:	fc 01       	movw	r30, r24
 334:	80 81       	ld	r24, Z
 336:	91 81       	ldd	r25, Z+1	; 0x01
 338:	de d2       	rcall	.+1468   	; 0x8f6 <uart_puti>
        uart_puts("   ;   ");
 33a:	82 ed       	ldi	r24, 0xD2	; 210
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	bb d2       	rcall	.+1398   	; 0x8b6 <uart_puts>
        uart_puti(buffer);
 340:	8a 81       	ldd	r24, Y+2	; 0x02
 342:	9b 81       	ldd	r25, Y+3	; 0x03
 344:	d8 d2       	rcall	.+1456   	; 0x8f6 <uart_puti>
        uart_puts(_CR);
 346:	8c e9       	ldi	r24, 0x9C	; 156
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	b5 d2       	rcall	.+1386   	; 0x8b6 <uart_puts>
    int16_t diff_data[12];                                                  // Array für die ADC Messwerte
    int16_t buffer = 0;                                                     // Zwischenspeicher zur Mittelwert errechnung
    
    diff_data[11] = get_line_adc(_LEFT) - get_line_adc(_RIGHT);             // dummy Messung, da erste ADC Messung immer fehlerhaft
    
    for ( i=0; i<10; i++)                                                   // 10x durchlaufen der Schleife für 10 Messungen
 34c:	89 81       	ldd	r24, Y+1	; 0x01
 34e:	8f 5f       	subi	r24, 0xFF	; 255
 350:	89 83       	std	Y+1, r24	; 0x01
 352:	89 81       	ldd	r24, Y+1	; 0x01
 354:	8a 30       	cpi	r24, 0x0A	; 10
 356:	08 f4       	brcc	.+2      	; 0x35a <calibrate_line_sens+0xe8>
 358:	aa cf       	rjmp	.-172    	; 0x2ae <calibrate_line_sens+0x3c>
        uart_puts(_CR);
        #endif
      
    }
 
    cal_factor = buffer/10;                                                 // Teile Addition aller Differenzen durch 10 -> Mittelwert
 35a:	8a 81       	ldd	r24, Y+2	; 0x02
 35c:	9b 81       	ldd	r25, Y+3	; 0x03
 35e:	2a e0       	ldi	r18, 0x0A	; 10
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	b9 01       	movw	r22, r18
 364:	e9 d2       	rcall	.+1490   	; 0x938 <__divmodhi4>
 366:	9b 01       	movw	r18, r22
 368:	c9 01       	movw	r24, r18
 36a:	80 93 9c 01 	sts	0x019C, r24
    
    #if _DEBUG    
    uart_puts("Summe : ");
 36e:	8a ed       	ldi	r24, 0xDA	; 218
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	a1 d2       	rcall	.+1346   	; 0x8b6 <uart_puts>
    uart_puti(buffer);
 374:	8a 81       	ldd	r24, Y+2	; 0x02
 376:	9b 81       	ldd	r25, Y+3	; 0x03
 378:	be d2       	rcall	.+1404   	; 0x8f6 <uart_puti>
    uart_puts(_CR);
 37a:	8c e9       	ldi	r24, 0x9C	; 156
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	9b d2       	rcall	.+1334   	; 0x8b6 <uart_puts>
    uart_puts("Faktor: ");
 380:	83 ee       	ldi	r24, 0xE3	; 227
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	98 d2       	rcall	.+1328   	; 0x8b6 <uart_puts>
    uart_puti(cal_factor);
 386:	80 91 9c 01 	lds	r24, 0x019C
 38a:	99 27       	eor	r25, r25
 38c:	87 fd       	sbrc	r24, 7
 38e:	90 95       	com	r25
 390:	b2 d2       	rcall	.+1380   	; 0x8f6 <uart_puti>
    #endif
    
 392:	6b 96       	adiw	r28, 0x1b	; 27
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	f8 94       	cli
 398:	de bf       	out	0x3e, r29	; 62
 39a:	0f be       	out	0x3f, r0	; 63
 39c:	cd bf       	out	0x3d, r28	; 61
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	1f 91       	pop	r17
 3a4:	0f 91       	pop	r16
 3a6:	ff 90       	pop	r15
 3a8:	ef 90       	pop	r14
 3aa:	08 95       	ret

000003ac <init_motor>:
* /return   none
*
*
************************************************************************/
void init_motor(void)
{
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	cd b7       	in	r28, 0x3d	; 61
 3b2:	de b7       	in	r29, 0x3e	; 62
    /** IOs definieren **/
    DDRD |= (1 << PD4) | (1 << PD5);                // Pins für linken Motor als Ausgänge
 3b4:	81 e3       	ldi	r24, 0x31	; 49
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	21 e3       	ldi	r18, 0x31	; 49
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	f9 01       	movw	r30, r18
 3be:	20 81       	ld	r18, Z
 3c0:	20 63       	ori	r18, 0x30	; 48
 3c2:	fc 01       	movw	r30, r24
 3c4:	20 83       	st	Z, r18
    DDRB |= (1 << PB4) | (1 << PB5);                // Pins für rechten Motor als Ausgänge
 3c6:	87 e3       	ldi	r24, 0x37	; 55
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	27 e3       	ldi	r18, 0x37	; 55
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	f9 01       	movw	r30, r18
 3d0:	20 81       	ld	r18, Z
 3d2:	20 63       	ori	r18, 0x30	; 48
 3d4:	fc 01       	movw	r30, r24
 3d6:	20 83       	st	Z, r18
    DDRB |= (1 << PB1) | (1 << PB2);                // PWM Pins als Ausgänge
 3d8:	87 e3       	ldi	r24, 0x37	; 55
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	27 e3       	ldi	r18, 0x37	; 55
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	f9 01       	movw	r30, r18
 3e2:	20 81       	ld	r18, Z
 3e4:	26 60       	ori	r18, 0x06	; 6
 3e6:	fc 01       	movw	r30, r24
 3e8:	20 83       	st	Z, r18
    
    /** Motor stoppen **/
    PORTD |= (1 << PD4) | (1 << PD5);               // Ausgänge auf HIGH -> Motor blockiert
 3ea:	82 e3       	ldi	r24, 0x32	; 50
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	22 e3       	ldi	r18, 0x32	; 50
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	f9 01       	movw	r30, r18
 3f4:	20 81       	ld	r18, Z
 3f6:	20 63       	ori	r18, 0x30	; 48
 3f8:	fc 01       	movw	r30, r24
 3fa:	20 83       	st	Z, r18
    PORTB |= (1 << PB4) | (1 << PB5);               // Ausgänge auf HIGH -> Motor blockiert
 3fc:	88 e3       	ldi	r24, 0x38	; 56
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	28 e3       	ldi	r18, 0x38	; 56
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	f9 01       	movw	r30, r18
 406:	20 81       	ld	r18, Z
 408:	20 63       	ori	r18, 0x30	; 48
 40a:	fc 01       	movw	r30, r24
 40c:	20 83       	st	Z, r18
        
    /** Timer konfigurieren **/
    TCCR1A |= (1 << COM1A1) | (1 << WGM10) | (1 << COM1B1);
 40e:	8f e4       	ldi	r24, 0x4F	; 79
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	2f e4       	ldi	r18, 0x4F	; 79
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	f9 01       	movw	r30, r18
 418:	20 81       	ld	r18, Z
 41a:	21 6a       	ori	r18, 0xA1	; 161
 41c:	fc 01       	movw	r30, r24
 41e:	20 83       	st	Z, r18
    TCCR1B |= (1 << CS11);
 420:	8e e4       	ldi	r24, 0x4E	; 78
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	2e e4       	ldi	r18, 0x4E	; 78
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	f9 01       	movw	r30, r18
 42a:	20 81       	ld	r18, Z
 42c:	22 60       	ori	r18, 0x02	; 2
 42e:	fc 01       	movw	r30, r24
 430:	20 83       	st	Z, r18
    
    uart_puts("motor init done..." _CR);
 432:	8c ee       	ldi	r24, 0xEC	; 236
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	3f d2       	rcall	.+1150   	; 0x8b6 <uart_puts>
}
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	08 95       	ret

0000043e <motor_dir>:
* /return   none
*
*
************************************************************************/
void motor_dir( char left, char right)
{
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	00 d0       	rcall	.+0      	; 0x444 <motor_dir+0x6>
 444:	cd b7       	in	r28, 0x3d	; 61
 446:	de b7       	in	r29, 0x3e	; 62
 448:	89 83       	std	Y+1, r24	; 0x01
 44a:	6a 83       	std	Y+2, r22	; 0x02
    /** Linke Seite **/
    if ( left == _FWD)                              // Motor vorwärts
 44c:	89 81       	ldd	r24, Y+1	; 0x01
 44e:	81 30       	cpi	r24, 0x01	; 1
 450:	99 f4       	brne	.+38     	; 0x478 <__stack+0x19>
    {
        PORTD |= (1 << PD5);
 452:	82 e3       	ldi	r24, 0x32	; 50
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	22 e3       	ldi	r18, 0x32	; 50
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	f9 01       	movw	r30, r18
 45c:	20 81       	ld	r18, Z
 45e:	20 62       	ori	r18, 0x20	; 32
 460:	fc 01       	movw	r30, r24
 462:	20 83       	st	Z, r18
        PORTD &= ~(1 << PD4);        
 464:	82 e3       	ldi	r24, 0x32	; 50
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	22 e3       	ldi	r18, 0x32	; 50
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	f9 01       	movw	r30, r18
 46e:	20 81       	ld	r18, Z
 470:	2f 7e       	andi	r18, 0xEF	; 239
 472:	fc 01       	movw	r30, r24
 474:	20 83       	st	Z, r18
 476:	1f c0       	rjmp	.+62     	; 0x4b6 <__stack+0x57>
    }
        
    else if ( left == _RWD)                         // Motor rückwärts
 478:	89 81       	ldd	r24, Y+1	; 0x01
 47a:	82 30       	cpi	r24, 0x02	; 2
 47c:	99 f4       	brne	.+38     	; 0x4a4 <__stack+0x45>
    {
        PORTD &= ~(1 << PD5);
 47e:	82 e3       	ldi	r24, 0x32	; 50
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	22 e3       	ldi	r18, 0x32	; 50
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	f9 01       	movw	r30, r18
 488:	20 81       	ld	r18, Z
 48a:	2f 7d       	andi	r18, 0xDF	; 223
 48c:	fc 01       	movw	r30, r24
 48e:	20 83       	st	Z, r18
        PORTD |=  (1 << PD4);        
 490:	82 e3       	ldi	r24, 0x32	; 50
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	22 e3       	ldi	r18, 0x32	; 50
 496:	30 e0       	ldi	r19, 0x00	; 0
 498:	f9 01       	movw	r30, r18
 49a:	20 81       	ld	r18, Z
 49c:	20 61       	ori	r18, 0x10	; 16
 49e:	fc 01       	movw	r30, r24
 4a0:	20 83       	st	Z, r18
 4a2:	09 c0       	rjmp	.+18     	; 0x4b6 <__stack+0x57>
    }
        
    else                                            // ungültige Auswahl
    {
    PORTD |= (1 << PD4) | (1 << PD5);               // Ausgänge auf HIGH -> Motor blockiert
 4a4:	82 e3       	ldi	r24, 0x32	; 50
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	22 e3       	ldi	r18, 0x32	; 50
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	f9 01       	movw	r30, r18
 4ae:	20 81       	ld	r18, Z
 4b0:	20 63       	ori	r18, 0x30	; 48
 4b2:	fc 01       	movw	r30, r24
 4b4:	20 83       	st	Z, r18
    }
    
    
    /** Rechte Seite **/
    if ( right == _FWD)                             // Motor vorwärts
 4b6:	8a 81       	ldd	r24, Y+2	; 0x02
 4b8:	81 30       	cpi	r24, 0x01	; 1
 4ba:	99 f4       	brne	.+38     	; 0x4e2 <__stack+0x83>
    {
        PORTB |= (1 << PB5);
 4bc:	88 e3       	ldi	r24, 0x38	; 56
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	28 e3       	ldi	r18, 0x38	; 56
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	f9 01       	movw	r30, r18
 4c6:	20 81       	ld	r18, Z
 4c8:	20 62       	ori	r18, 0x20	; 32
 4ca:	fc 01       	movw	r30, r24
 4cc:	20 83       	st	Z, r18
        PORTB &= ~(1 << PB4);
 4ce:	88 e3       	ldi	r24, 0x38	; 56
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	28 e3       	ldi	r18, 0x38	; 56
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	f9 01       	movw	r30, r18
 4d8:	20 81       	ld	r18, Z
 4da:	2f 7e       	andi	r18, 0xEF	; 239
 4dc:	fc 01       	movw	r30, r24
 4de:	20 83       	st	Z, r18
 4e0:	1f c0       	rjmp	.+62     	; 0x520 <__stack+0xc1>
    }
    
    else if ( right == _RWD)                        // Motor rückwärts
 4e2:	8a 81       	ldd	r24, Y+2	; 0x02
 4e4:	82 30       	cpi	r24, 0x02	; 2
 4e6:	99 f4       	brne	.+38     	; 0x50e <__stack+0xaf>
    {
        PORTB &= ~(1 << PB5);
 4e8:	88 e3       	ldi	r24, 0x38	; 56
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	28 e3       	ldi	r18, 0x38	; 56
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	f9 01       	movw	r30, r18
 4f2:	20 81       	ld	r18, Z
 4f4:	2f 7d       	andi	r18, 0xDF	; 223
 4f6:	fc 01       	movw	r30, r24
 4f8:	20 83       	st	Z, r18
        PORTB |=  (1 << PB4);
 4fa:	88 e3       	ldi	r24, 0x38	; 56
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	28 e3       	ldi	r18, 0x38	; 56
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	f9 01       	movw	r30, r18
 504:	20 81       	ld	r18, Z
 506:	20 61       	ori	r18, 0x10	; 16
 508:	fc 01       	movw	r30, r24
 50a:	20 83       	st	Z, r18
 50c:	09 c0       	rjmp	.+18     	; 0x520 <__stack+0xc1>
    }
    
    else                                            // ungültige Auswahl
    {
        PORTB |= (1 << PB4) | (1 << PB5);           // Ausgänge auf HIGH -> Motor blockiert
 50e:	88 e3       	ldi	r24, 0x38	; 56
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	28 e3       	ldi	r18, 0x38	; 56
 514:	30 e0       	ldi	r19, 0x00	; 0
 516:	f9 01       	movw	r30, r18
 518:	20 81       	ld	r18, Z
 51a:	20 63       	ori	r18, 0x30	; 48
 51c:	fc 01       	movw	r30, r24
 51e:	20 83       	st	Z, r18
    }    
}
 520:	0f 90       	pop	r0
 522:	0f 90       	pop	r0
 524:	df 91       	pop	r29
 526:	cf 91       	pop	r28
 528:	08 95       	ret

0000052a <init_led>:
* /return    none
*
*
************************************************************************/
void init_led (void)
{
 52a:	cf 93       	push	r28
 52c:	df 93       	push	r29
 52e:	cd b7       	in	r28, 0x3d	; 61
 530:	de b7       	in	r29, 0x3e	; 62
    DDRD |= (1 << PD7);                        // PD7 als Ausgang für Back LEDs
 532:	81 e3       	ldi	r24, 0x31	; 49
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	21 e3       	ldi	r18, 0x31	; 49
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	f9 01       	movw	r30, r18
 53c:	20 81       	ld	r18, Z
 53e:	20 68       	ori	r18, 0x80	; 128
 540:	fc 01       	movw	r30, r24
 542:	20 83       	st	Z, r18
    DDRD |= (1 << PD2);                        // PD2 als Ausgang für RG_LED
 544:	81 e3       	ldi	r24, 0x31	; 49
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	21 e3       	ldi	r18, 0x31	; 49
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	f9 01       	movw	r30, r18
 54e:	20 81       	ld	r18, Z
 550:	24 60       	ori	r18, 0x04	; 4
 552:	fc 01       	movw	r30, r24
 554:	20 83       	st	Z, r18
    DDRB |= (1 << PB0);                        // PB0 als Ausgang für RG_LED
 556:	87 e3       	ldi	r24, 0x37	; 55
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	27 e3       	ldi	r18, 0x37	; 55
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	f9 01       	movw	r30, r18
 560:	20 81       	ld	r18, Z
 562:	21 60       	ori	r18, 0x01	; 1
 564:	fc 01       	movw	r30, r24
 566:	20 83       	st	Z, r18
    DDRD |= (1 << PD6);
 568:	81 e3       	ldi	r24, 0x31	; 49
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	21 e3       	ldi	r18, 0x31	; 49
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	f9 01       	movw	r30, r18
 572:	20 81       	ld	r18, Z
 574:	20 64       	ori	r18, 0x40	; 64
 576:	fc 01       	movw	r30, r24
 578:	20 83       	st	Z, r18
    
    uart_puts("led init done..." _CR);
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	91 e0       	ldi	r25, 0x01	; 1
 57e:	9b d1       	rcall	.+822    	; 0x8b6 <uart_puts>
}
 580:	df 91       	pop	r29
 582:	cf 91       	pop	r28
 584:	08 95       	ret

00000586 <status_led>:
* /return   none
*
*
************************************************************************/
void status_led( char colour)
{
 586:	cf 93       	push	r28
 588:	df 93       	push	r29
 58a:	1f 92       	push	r1
 58c:	cd b7       	in	r28, 0x3d	; 61
 58e:	de b7       	in	r29, 0x3e	; 62
 590:	89 83       	std	Y+1, r24	; 0x01
    if ( colour == _GREEN)
 592:	89 81       	ldd	r24, Y+1	; 0x01
 594:	81 30       	cpi	r24, 0x01	; 1
 596:	99 f4       	brne	.+38     	; 0x5be <status_led+0x38>
    {
        PORTB |=  ( 1 << PB0 );
 598:	88 e3       	ldi	r24, 0x38	; 56
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	28 e3       	ldi	r18, 0x38	; 56
 59e:	30 e0       	ldi	r19, 0x00	; 0
 5a0:	f9 01       	movw	r30, r18
 5a2:	20 81       	ld	r18, Z
 5a4:	21 60       	ori	r18, 0x01	; 1
 5a6:	fc 01       	movw	r30, r24
 5a8:	20 83       	st	Z, r18
        PORTD &= ~( 1 << PD2 );
 5aa:	82 e3       	ldi	r24, 0x32	; 50
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	22 e3       	ldi	r18, 0x32	; 50
 5b0:	30 e0       	ldi	r19, 0x00	; 0
 5b2:	f9 01       	movw	r30, r18
 5b4:	20 81       	ld	r18, Z
 5b6:	2b 7f       	andi	r18, 0xFB	; 251
 5b8:	fc 01       	movw	r30, r24
 5ba:	20 83       	st	Z, r18
 5bc:	2f c0       	rjmp	.+94     	; 0x61c <status_led+0x96>
    }
     
    else if ( colour == _RED )
 5be:	89 81       	ldd	r24, Y+1	; 0x01
 5c0:	82 30       	cpi	r24, 0x02	; 2
 5c2:	99 f4       	brne	.+38     	; 0x5ea <status_led+0x64>
    {
        PORTB &= ~( 1 << PB0 );
 5c4:	88 e3       	ldi	r24, 0x38	; 56
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	28 e3       	ldi	r18, 0x38	; 56
 5ca:	30 e0       	ldi	r19, 0x00	; 0
 5cc:	f9 01       	movw	r30, r18
 5ce:	20 81       	ld	r18, Z
 5d0:	2e 7f       	andi	r18, 0xFE	; 254
 5d2:	fc 01       	movw	r30, r24
 5d4:	20 83       	st	Z, r18
        PORTD |=  ( 1 << PD2 );
 5d6:	82 e3       	ldi	r24, 0x32	; 50
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	22 e3       	ldi	r18, 0x32	; 50
 5dc:	30 e0       	ldi	r19, 0x00	; 0
 5de:	f9 01       	movw	r30, r18
 5e0:	20 81       	ld	r18, Z
 5e2:	24 60       	ori	r18, 0x04	; 4
 5e4:	fc 01       	movw	r30, r24
 5e6:	20 83       	st	Z, r18
 5e8:	19 c0       	rjmp	.+50     	; 0x61c <status_led+0x96>
    }
     
    else if ( colour == _ORANGE )
 5ea:	89 81       	ldd	r24, Y+1	; 0x01
 5ec:	83 30       	cpi	r24, 0x03	; 3
 5ee:	99 f4       	brne	.+38     	; 0x616 <status_led+0x90>
    {
        PORTB |= ( 1 << PB0 );
 5f0:	88 e3       	ldi	r24, 0x38	; 56
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	28 e3       	ldi	r18, 0x38	; 56
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	f9 01       	movw	r30, r18
 5fa:	20 81       	ld	r18, Z
 5fc:	21 60       	ori	r18, 0x01	; 1
 5fe:	fc 01       	movw	r30, r24
 600:	20 83       	st	Z, r18
        PORTD |= ( 1 << PD2 );
 602:	82 e3       	ldi	r24, 0x32	; 50
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	22 e3       	ldi	r18, 0x32	; 50
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	f9 01       	movw	r30, r18
 60c:	20 81       	ld	r18, Z
 60e:	24 60       	ori	r18, 0x04	; 4
 610:	fc 01       	movw	r30, r24
 612:	20 83       	st	Z, r18
 614:	03 c0       	rjmp	.+6      	; 0x61c <status_led+0x96>
    }
     
    else
    {
        uart_puts("falsche Eingabe bei status_led()");
 616:	84 e1       	ldi	r24, 0x14	; 20
 618:	91 e0       	ldi	r25, 0x01	; 1
 61a:	4d d1       	rcall	.+666    	; 0x8b6 <uart_puts>
    }     
     
}
 61c:	0f 90       	pop	r0
 61e:	df 91       	pop	r29
 620:	cf 91       	pop	r28
 622:	08 95       	ret

00000624 <line_led>:
* /return    none
*
*
************************************************************************/ 
void line_led(char status)
{
 624:	cf 93       	push	r28
 626:	df 93       	push	r29
 628:	1f 92       	push	r1
 62a:	cd b7       	in	r28, 0x3d	; 61
 62c:	de b7       	in	r29, 0x3e	; 62
 62e:	89 83       	std	Y+1, r24	; 0x01
    if(status == _ON)
 630:	89 81       	ldd	r24, Y+1	; 0x01
 632:	81 30       	cpi	r24, 0x01	; 1
 634:	51 f4       	brne	.+20     	; 0x64a <line_led+0x26>
    {
        PORTD |= ( 1 << PD6 );
 636:	82 e3       	ldi	r24, 0x32	; 50
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	22 e3       	ldi	r18, 0x32	; 50
 63c:	30 e0       	ldi	r19, 0x00	; 0
 63e:	f9 01       	movw	r30, r18
 640:	20 81       	ld	r18, Z
 642:	20 64       	ori	r18, 0x40	; 64
 644:	fc 01       	movw	r30, r24
 646:	20 83       	st	Z, r18
 648:	10 c0       	rjmp	.+32     	; 0x66a <line_led+0x46>
    }
    
    else if( status == _OFF)
 64a:	89 81       	ldd	r24, Y+1	; 0x01
 64c:	88 23       	and	r24, r24
 64e:	51 f4       	brne	.+20     	; 0x664 <line_led+0x40>
    {
        PORTD &= ~( 1 << PD6);
 650:	82 e3       	ldi	r24, 0x32	; 50
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	22 e3       	ldi	r18, 0x32	; 50
 656:	30 e0       	ldi	r19, 0x00	; 0
 658:	f9 01       	movw	r30, r18
 65a:	20 81       	ld	r18, Z
 65c:	2f 7b       	andi	r18, 0xBF	; 191
 65e:	fc 01       	movw	r30, r24
 660:	20 83       	st	Z, r18
 662:	03 c0       	rjmp	.+6      	; 0x66a <line_led+0x46>
    }
    
    else
    {
        uart_puts("falsche Eingabe bei line_led()");
 664:	85 e3       	ldi	r24, 0x35	; 53
 666:	91 e0       	ldi	r25, 0x01	; 1
 668:	26 d1       	rcall	.+588    	; 0x8b6 <uart_puts>
    }
 66a:	0f 90       	pop	r0
 66c:	df 91       	pop	r29
 66e:	cf 91       	pop	r28
 670:	08 95       	ret

00000672 <init_switch>:
 * /return  none
 *
 *
 ************************************************************************/
 void init_switch(void)
 {
 672:	cf 93       	push	r28
 674:	df 93       	push	r29
 676:	cd b7       	in	r28, 0x3d	; 61
 678:	de b7       	in	r29, 0x3e	; 62
    DDRC &= ~( 1 << PC4);               // PC4 als Eingang definieren (ADC4)
 67a:	84 e3       	ldi	r24, 0x34	; 52
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	24 e3       	ldi	r18, 0x34	; 52
 680:	30 e0       	ldi	r19, 0x00	; 0
 682:	f9 01       	movw	r30, r18
 684:	20 81       	ld	r18, Z
 686:	2f 7e       	andi	r18, 0xEF	; 239
 688:	fc 01       	movw	r30, r24
 68a:	20 83       	st	Z, r18
    DDRC &= ~( 1 << PD3);               // PD3 als Eingang definieren (INT1)
 68c:	84 e3       	ldi	r24, 0x34	; 52
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	24 e3       	ldi	r18, 0x34	; 52
 692:	30 e0       	ldi	r19, 0x00	; 0
 694:	f9 01       	movw	r30, r18
 696:	20 81       	ld	r18, Z
 698:	27 7f       	andi	r18, 0xF7	; 247
 69a:	fc 01       	movw	r30, r24
 69c:	20 83       	st	Z, r18

    /** ITN1 definieren **/
    MCUCR |=  ( 1 << ISC11);             // Interrupt bei fallender Flanke an INT1
 69e:	85 e5       	ldi	r24, 0x55	; 85
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	25 e5       	ldi	r18, 0x55	; 85
 6a4:	30 e0       	ldi	r19, 0x00	; 0
 6a6:	f9 01       	movw	r30, r18
 6a8:	20 81       	ld	r18, Z
 6aa:	28 60       	ori	r18, 0x08	; 8
 6ac:	fc 01       	movw	r30, r24
 6ae:	20 83       	st	Z, r18
    MCUCR &= ~( 1 << ISC10);
 6b0:	85 e5       	ldi	r24, 0x55	; 85
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	25 e5       	ldi	r18, 0x55	; 85
 6b6:	30 e0       	ldi	r19, 0x00	; 0
 6b8:	f9 01       	movw	r30, r18
 6ba:	20 81       	ld	r18, Z
 6bc:	2b 7f       	andi	r18, 0xFB	; 251
 6be:	fc 01       	movw	r30, r24
 6c0:	20 83       	st	Z, r18

    GICR |= ( 1 << INT1);               // Intterupt INT1 aktivieren
 6c2:	8b e5       	ldi	r24, 0x5B	; 91
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	2b e5       	ldi	r18, 0x5B	; 91
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	f9 01       	movw	r30, r18
 6cc:	20 81       	ld	r18, Z
 6ce:	20 68       	ori	r18, 0x80	; 128
 6d0:	fc 01       	movw	r30, r24
 6d2:	20 83       	st	Z, r18

    uart_puts("switch init done...");
 6d4:	84 e5       	ldi	r24, 0x54	; 84
 6d6:	91 e0       	ldi	r25, 0x01	; 1
 6d8:	ee d0       	rcall	.+476    	; 0x8b6 <uart_puts>
    uart_puts(_CR);
 6da:	88 e6       	ldi	r24, 0x68	; 104
 6dc:	91 e0       	ldi	r25, 0x01	; 1
 6de:	eb d0       	rcall	.+470    	; 0x8b6 <uart_puts>

 }
 6e0:	df 91       	pop	r29
 6e2:	cf 91       	pop	r28
 6e4:	08 95       	ret

000006e6 <get_switch_adc>:
 * /return  ADC Wert (uint16_t)
 *
 *
 ************************************************************************/
 uint16_t get_switch_adc(void)
 {
 6e6:	cf 93       	push	r28
 6e8:	df 93       	push	r29
 6ea:	cd b7       	in	r28, 0x3d	; 61
 6ec:	de b7       	in	r29, 0x3e	; 62

    ADMUX &= ~( 1 << MUX0);
 6ee:	87 e2       	ldi	r24, 0x27	; 39
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	27 e2       	ldi	r18, 0x27	; 39
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	f9 01       	movw	r30, r18
 6f8:	20 81       	ld	r18, Z
 6fa:	2e 7f       	andi	r18, 0xFE	; 254
 6fc:	fc 01       	movw	r30, r24
 6fe:	20 83       	st	Z, r18
    ADMUX &= ~( 1 << MUX1);
 700:	87 e2       	ldi	r24, 0x27	; 39
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	27 e2       	ldi	r18, 0x27	; 39
 706:	30 e0       	ldi	r19, 0x00	; 0
 708:	f9 01       	movw	r30, r18
 70a:	20 81       	ld	r18, Z
 70c:	2d 7f       	andi	r18, 0xFD	; 253
 70e:	fc 01       	movw	r30, r24
 710:	20 83       	st	Z, r18
    ADMUX |=  ( 1 << MUX2);
 712:	87 e2       	ldi	r24, 0x27	; 39
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	27 e2       	ldi	r18, 0x27	; 39
 718:	30 e0       	ldi	r19, 0x00	; 0
 71a:	f9 01       	movw	r30, r18
 71c:	20 81       	ld	r18, Z
 71e:	24 60       	ori	r18, 0x04	; 4
 720:	fc 01       	movw	r30, r24
 722:	20 83       	st	Z, r18
    ADMUX &= ~( 1 << MUX3);
 724:	87 e2       	ldi	r24, 0x27	; 39
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	27 e2       	ldi	r18, 0x27	; 39
 72a:	30 e0       	ldi	r19, 0x00	; 0
 72c:	f9 01       	movw	r30, r18
 72e:	20 81       	ld	r18, Z
 730:	27 7f       	andi	r18, 0xF7	; 247
 732:	fc 01       	movw	r30, r24
 734:	20 83       	st	Z, r18

    ADCSRA |= ( 1 << ADSC);                 // Starte ADC Messung
 736:	86 e2       	ldi	r24, 0x26	; 38
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	26 e2       	ldi	r18, 0x26	; 38
 73c:	30 e0       	ldi	r19, 0x00	; 0
 73e:	f9 01       	movw	r30, r18
 740:	20 81       	ld	r18, Z
 742:	20 64       	ori	r18, 0x40	; 64
 744:	fc 01       	movw	r30, r24
 746:	20 83       	st	Z, r18
    
    while( ADSC == 1)                       // Warte bis ADC-Messung beendet
 748:	00 00       	nop
    {
        //wait
    }
    
    return ADC;                             // gib ADC Wert zurück
 74a:	84 e2       	ldi	r24, 0x24	; 36
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	fc 01       	movw	r30, r24
 750:	80 81       	ld	r24, Z
 752:	91 81       	ldd	r25, Z+1	; 0x01
 }
 754:	df 91       	pop	r29
 756:	cf 91       	pop	r28
 758:	08 95       	ret

0000075a <__vector_2>:


 }

 ISR (INT1_vect)
 {
 75a:	1f 92       	push	r1
 75c:	0f 92       	push	r0
 75e:	00 90 5f 00 	lds	r0, 0x005F
 762:	0f 92       	push	r0
 764:	11 24       	eor	r1, r1
 766:	2f 93       	push	r18
 768:	3f 93       	push	r19
 76a:	4f 93       	push	r20
 76c:	5f 93       	push	r21
 76e:	6f 93       	push	r22
 770:	7f 93       	push	r23
 772:	8f 93       	push	r24
 774:	9f 93       	push	r25
 776:	af 93       	push	r26
 778:	bf 93       	push	r27
 77a:	ef 93       	push	r30
 77c:	ff 93       	push	r31
 77e:	cf 93       	push	r28
 780:	df 93       	push	r29
 782:	00 d0       	rcall	.+0      	; 0x784 <__vector_2+0x2a>
 784:	cd b7       	in	r28, 0x3d	; 61
 786:	de b7       	in	r29, 0x3e	; 62
    //get_switch();
    uint16_t buffer2 = 0;
 788:	1a 82       	std	Y+2, r1	; 0x02
 78a:	19 82       	std	Y+1, r1	; 0x01

    buffer2 = get_switch_adc();
 78c:	ac df       	rcall	.-168    	; 0x6e6 <get_switch_adc>
 78e:	9a 83       	std	Y+2, r25	; 0x02
 790:	89 83       	std	Y+1, r24	; 0x01
    uart_puts("switch:");
 792:	8b e6       	ldi	r24, 0x6B	; 107
 794:	91 e0       	ldi	r25, 0x01	; 1
 796:	8f d0       	rcall	.+286    	; 0x8b6 <uart_puts>
    uart_puti(buffer2);
 798:	89 81       	ldd	r24, Y+1	; 0x01
 79a:	9a 81       	ldd	r25, Y+2	; 0x02
 79c:	ac d0       	rcall	.+344    	; 0x8f6 <uart_puti>
    uart_puts(_CR);
 79e:	88 e6       	ldi	r24, 0x68	; 104
 7a0:	91 e0       	ldi	r25, 0x01	; 1
 7a2:	89 d0       	rcall	.+274    	; 0x8b6 <uart_puts>
 
 }
 7a4:	0f 90       	pop	r0
 7a6:	0f 90       	pop	r0
 7a8:	df 91       	pop	r29
 7aa:	cf 91       	pop	r28
 7ac:	ff 91       	pop	r31
 7ae:	ef 91       	pop	r30
 7b0:	bf 91       	pop	r27
 7b2:	af 91       	pop	r26
 7b4:	9f 91       	pop	r25
 7b6:	8f 91       	pop	r24
 7b8:	7f 91       	pop	r23
 7ba:	6f 91       	pop	r22
 7bc:	5f 91       	pop	r21
 7be:	4f 91       	pop	r20
 7c0:	3f 91       	pop	r19
 7c2:	2f 91       	pop	r18
 7c4:	0f 90       	pop	r0
 7c6:	00 92 5f 00 	sts	0x005F, r0
 7ca:	0f 90       	pop	r0
 7cc:	1f 90       	pop	r1
 7ce:	18 95       	reti

000007d0 <init_timer>:
* /return   none
*
*
************************************************************************/
void init_timer(void)
{
 7d0:	cf 93       	push	r28
 7d2:	df 93       	push	r29
 7d4:	cd b7       	in	r28, 0x3d	; 61
 7d6:	de b7       	in	r29, 0x3e	; 62
    TCCR0 |=  (1 << CS02) | (1 << CS00);                //prescaler 1024
 7d8:	83 e5       	ldi	r24, 0x53	; 83
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	23 e5       	ldi	r18, 0x53	; 83
 7de:	30 e0       	ldi	r19, 0x00	; 0
 7e0:	f9 01       	movw	r30, r18
 7e2:	20 81       	ld	r18, Z
 7e4:	25 60       	ori	r18, 0x05	; 5
 7e6:	fc 01       	movw	r30, r24
 7e8:	20 83       	st	Z, r18
                                                        // -> 8MHz/1024= 7,8Khz ~ 128µs
    TIMSK |= (1 << TOIE0);                                // enable Timer-Overflow interrupt
 7ea:	89 e5       	ldi	r24, 0x59	; 89
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	29 e5       	ldi	r18, 0x59	; 89
 7f0:	30 e0       	ldi	r19, 0x00	; 0
 7f2:	f9 01       	movw	r30, r18
 7f4:	20 81       	ld	r18, Z
 7f6:	21 60       	ori	r18, 0x01	; 1
 7f8:	fc 01       	movw	r30, r24
 7fa:	20 83       	st	Z, r18
                                                        
    uart_puts("timer init done..." _CR);
 7fc:	83 e7       	ldi	r24, 0x73	; 115
 7fe:	91 e0       	ldi	r25, 0x01	; 1
 800:	5a d0       	rcall	.+180    	; 0x8b6 <uart_puts>
}
 802:	df 91       	pop	r29
 804:	cf 91       	pop	r28
 806:	08 95       	ret

00000808 <__vector_9>:
* /return   none
*
*
************************************************************************/
ISR (TIMER0_OVF_vect)
{
 808:	1f 92       	push	r1
 80a:	0f 92       	push	r0
 80c:	00 90 5f 00 	lds	r0, 0x005F
 810:	0f 92       	push	r0
 812:	11 24       	eor	r1, r1
 814:	cf 93       	push	r28
 816:	df 93       	push	r29
 818:	cd b7       	in	r28, 0x3d	; 61
 81a:	de b7       	in	r29, 0x3e	; 62
    //enter Code here    

}
 81c:	df 91       	pop	r29
 81e:	cf 91       	pop	r28
 820:	0f 90       	pop	r0
 822:	00 92 5f 00 	sts	0x005F, r0
 826:	0f 90       	pop	r0
 828:	1f 90       	pop	r1
 82a:	18 95       	reti

0000082c <init_uart>:
* /return   none
*
*
************************************************************************/
void init_uart(void)
{
 82c:	cf 93       	push	r28
 82e:	df 93       	push	r29
 830:	1f 92       	push	r1
 832:	cd b7       	in	r28, 0x3d	; 61
 834:	de b7       	in	r29, 0x3e	; 62
        uint8_t ubrr;
        ubrr = _FOSC/16/_BAUD-1;
 836:	8f ec       	ldi	r24, 0xCF	; 207
 838:	89 83       	std	Y+1, r24	; 0x01
        /* Set baud rate */
        UBRRH = (unsigned char)(ubrr>>8);
 83a:	80 e4       	ldi	r24, 0x40	; 64
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	29 81       	ldd	r18, Y+1	; 0x01
 840:	22 2f       	mov	r18, r18
 842:	30 e0       	ldi	r19, 0x00	; 0
 844:	23 2f       	mov	r18, r19
 846:	33 0f       	add	r19, r19
 848:	33 0b       	sbc	r19, r19
 84a:	fc 01       	movw	r30, r24
 84c:	20 83       	st	Z, r18
        UBRRL = (unsigned char)ubrr;
 84e:	89 e2       	ldi	r24, 0x29	; 41
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	29 81       	ldd	r18, Y+1	; 0x01
 854:	fc 01       	movw	r30, r24
 856:	20 83       	st	Z, r18
        /* Enable receiver and transmitter */
        UCSRB |= (1<<TXEN);
 858:	8a e2       	ldi	r24, 0x2A	; 42
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	2a e2       	ldi	r18, 0x2A	; 42
 85e:	30 e0       	ldi	r19, 0x00	; 0
 860:	f9 01       	movw	r30, r18
 862:	20 81       	ld	r18, Z
 864:	28 60       	ori	r18, 0x08	; 8
 866:	fc 01       	movw	r30, r24
 868:	20 83       	st	Z, r18
        /* Set frame format: 8data, 1stop bit */
        UCSRC = (1<<URSEL) |(3<<UCSZ0);
 86a:	80 e4       	ldi	r24, 0x40	; 64
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	26 e8       	ldi	r18, 0x86	; 134
 870:	fc 01       	movw	r30, r24
 872:	20 83       	st	Z, r18
        
        uart_puts("uart init done..." _CR);
 874:	88 e8       	ldi	r24, 0x88	; 136
 876:	91 e0       	ldi	r25, 0x01	; 1
 878:	1e d0       	rcall	.+60     	; 0x8b6 <uart_puts>
}
 87a:	0f 90       	pop	r0
 87c:	df 91       	pop	r29
 87e:	cf 91       	pop	r28
 880:	08 95       	ret

00000882 <uart_putc>:
* /return   none
*
*
************************************************************************/
void uart_putc(unsigned char data) 
{    
 882:	cf 93       	push	r28
 884:	df 93       	push	r29
 886:	1f 92       	push	r1
 888:	cd b7       	in	r28, 0x3d	; 61
 88a:	de b7       	in	r29, 0x3e	; 62
 88c:	89 83       	std	Y+1, r24	; 0x01
    /* Wait for empty transmit buffer */
    while ( !( UCSRA & (1<<UDRE)) )
 88e:	00 00       	nop
 890:	8b e2       	ldi	r24, 0x2B	; 43
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	fc 01       	movw	r30, r24
 896:	80 81       	ld	r24, Z
 898:	88 2f       	mov	r24, r24
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	80 72       	andi	r24, 0x20	; 32
 89e:	99 27       	eor	r25, r25
 8a0:	00 97       	sbiw	r24, 0x00	; 0
 8a2:	b1 f3       	breq	.-20     	; 0x890 <uart_putc+0xe>
    ;
    /* Put data into buffer, sends the data */
    UDR = data;
 8a4:	8c e2       	ldi	r24, 0x2C	; 44
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	29 81       	ldd	r18, Y+1	; 0x01
 8aa:	fc 01       	movw	r30, r24
 8ac:	20 83       	st	Z, r18
}
 8ae:	0f 90       	pop	r0
 8b0:	df 91       	pop	r29
 8b2:	cf 91       	pop	r28
 8b4:	08 95       	ret

000008b6 <uart_puts>:
*
* /example    uart_puts("Test");
*
************************************************************************/
void uart_puts (const char *s)
{
 8b6:	cf 93       	push	r28
 8b8:	df 93       	push	r29
 8ba:	00 d0       	rcall	.+0      	; 0x8bc <uart_puts+0x6>
 8bc:	cd b7       	in	r28, 0x3d	; 61
 8be:	de b7       	in	r29, 0x3e	; 62
 8c0:	9a 83       	std	Y+2, r25	; 0x02
 8c2:	89 83       	std	Y+1, r24	; 0x01
    do
    {
        uart_putc (*s);
 8c4:	89 81       	ldd	r24, Y+1	; 0x01
 8c6:	9a 81       	ldd	r25, Y+2	; 0x02
 8c8:	fc 01       	movw	r30, r24
 8ca:	80 81       	ld	r24, Z
 8cc:	da df       	rcall	.-76     	; 0x882 <uart_putc>
    }
    while (*s++);
 8ce:	89 81       	ldd	r24, Y+1	; 0x01
 8d0:	9a 81       	ldd	r25, Y+2	; 0x02
 8d2:	fc 01       	movw	r30, r24
 8d4:	80 81       	ld	r24, Z
 8d6:	21 e0       	ldi	r18, 0x01	; 1
 8d8:	88 23       	and	r24, r24
 8da:	09 f4       	brne	.+2      	; 0x8de <uart_puts+0x28>
 8dc:	20 e0       	ldi	r18, 0x00	; 0
 8de:	89 81       	ldd	r24, Y+1	; 0x01
 8e0:	9a 81       	ldd	r25, Y+2	; 0x02
 8e2:	01 96       	adiw	r24, 0x01	; 1
 8e4:	9a 83       	std	Y+2, r25	; 0x02
 8e6:	89 83       	std	Y+1, r24	; 0x01
 8e8:	22 23       	and	r18, r18
 8ea:	61 f7       	brne	.-40     	; 0x8c4 <uart_puts+0xe>
}
 8ec:	0f 90       	pop	r0
 8ee:	0f 90       	pop	r0
 8f0:	df 91       	pop	r29
 8f2:	cf 91       	pop	r28
 8f4:	08 95       	ret

000008f6 <uart_puti>:
*
*           uart_puti(i);
*
************************************************************************/
void uart_puti( uint16_t data )
{
 8f6:	cf 93       	push	r28
 8f8:	df 93       	push	r29
 8fa:	cd b7       	in	r28, 0x3d	; 61
 8fc:	de b7       	in	r29, 0x3e	; 62
 8fe:	28 97       	sbiw	r28, 0x08	; 8
 900:	0f b6       	in	r0, 0x3f	; 63
 902:	f8 94       	cli
 904:	de bf       	out	0x3e, r29	; 62
 906:	0f be       	out	0x3f, r0	; 63
 908:	cd bf       	out	0x3d, r28	; 61
 90a:	98 87       	std	Y+8, r25	; 0x08
 90c:	8f 83       	std	Y+7, r24	; 0x07
    char buffer[6];
    itoa(data, buffer, 10);
 90e:	8f 81       	ldd	r24, Y+7	; 0x07
 910:	98 85       	ldd	r25, Y+8	; 0x08
 912:	4a e0       	ldi	r20, 0x0A	; 10
 914:	50 e0       	ldi	r21, 0x00	; 0
 916:	9e 01       	movw	r18, r28
 918:	2f 5f       	subi	r18, 0xFF	; 255
 91a:	3f 4f       	sbci	r19, 0xFF	; 255
 91c:	b9 01       	movw	r22, r18
 91e:	33 d0       	rcall	.+102    	; 0x986 <itoa>
    uart_puts(buffer);
 920:	ce 01       	movw	r24, r28
 922:	01 96       	adiw	r24, 0x01	; 1
 924:	c8 df       	rcall	.-112    	; 0x8b6 <uart_puts>
}
 926:	28 96       	adiw	r28, 0x08	; 8
 928:	0f b6       	in	r0, 0x3f	; 63
 92a:	f8 94       	cli
 92c:	de bf       	out	0x3e, r29	; 62
 92e:	0f be       	out	0x3f, r0	; 63
 930:	cd bf       	out	0x3d, r28	; 61
 932:	df 91       	pop	r29
 934:	cf 91       	pop	r28
 936:	08 95       	ret

00000938 <__divmodhi4>:
 938:	97 fb       	bst	r25, 7
 93a:	07 2e       	mov	r0, r23
 93c:	16 f4       	brtc	.+4      	; 0x942 <__divmodhi4+0xa>
 93e:	00 94       	com	r0
 940:	06 d0       	rcall	.+12     	; 0x94e <__divmodhi4_neg1>
 942:	77 fd       	sbrc	r23, 7
 944:	08 d0       	rcall	.+16     	; 0x956 <__divmodhi4_neg2>
 946:	0b d0       	rcall	.+22     	; 0x95e <__udivmodhi4>
 948:	07 fc       	sbrc	r0, 7
 94a:	05 d0       	rcall	.+10     	; 0x956 <__divmodhi4_neg2>
 94c:	3e f4       	brtc	.+14     	; 0x95c <__divmodhi4_exit>

0000094e <__divmodhi4_neg1>:
 94e:	90 95       	com	r25
 950:	81 95       	neg	r24
 952:	9f 4f       	sbci	r25, 0xFF	; 255
 954:	08 95       	ret

00000956 <__divmodhi4_neg2>:
 956:	70 95       	com	r23
 958:	61 95       	neg	r22
 95a:	7f 4f       	sbci	r23, 0xFF	; 255

0000095c <__divmodhi4_exit>:
 95c:	08 95       	ret

0000095e <__udivmodhi4>:
 95e:	aa 1b       	sub	r26, r26
 960:	bb 1b       	sub	r27, r27
 962:	51 e1       	ldi	r21, 0x11	; 17
 964:	07 c0       	rjmp	.+14     	; 0x974 <__udivmodhi4_ep>

00000966 <__udivmodhi4_loop>:
 966:	aa 1f       	adc	r26, r26
 968:	bb 1f       	adc	r27, r27
 96a:	a6 17       	cp	r26, r22
 96c:	b7 07       	cpc	r27, r23
 96e:	10 f0       	brcs	.+4      	; 0x974 <__udivmodhi4_ep>
 970:	a6 1b       	sub	r26, r22
 972:	b7 0b       	sbc	r27, r23

00000974 <__udivmodhi4_ep>:
 974:	88 1f       	adc	r24, r24
 976:	99 1f       	adc	r25, r25
 978:	5a 95       	dec	r21
 97a:	a9 f7       	brne	.-22     	; 0x966 <__udivmodhi4_loop>
 97c:	80 95       	com	r24
 97e:	90 95       	com	r25
 980:	bc 01       	movw	r22, r24
 982:	cd 01       	movw	r24, r26
 984:	08 95       	ret

00000986 <itoa>:
 986:	fb 01       	movw	r30, r22
 988:	9f 01       	movw	r18, r30
 98a:	e8 94       	clt
 98c:	42 30       	cpi	r20, 0x02	; 2
 98e:	bc f0       	brlt	.+46     	; 0x9be <itoa+0x38>
 990:	45 32       	cpi	r20, 0x25	; 37
 992:	ac f4       	brge	.+42     	; 0x9be <itoa+0x38>
 994:	4a 30       	cpi	r20, 0x0A	; 10
 996:	29 f4       	brne	.+10     	; 0x9a2 <itoa+0x1c>
 998:	97 fb       	bst	r25, 7
 99a:	1e f4       	brtc	.+6      	; 0x9a2 <itoa+0x1c>
 99c:	90 95       	com	r25
 99e:	81 95       	neg	r24
 9a0:	9f 4f       	sbci	r25, 0xFF	; 255
 9a2:	64 2f       	mov	r22, r20
 9a4:	77 27       	eor	r23, r23
 9a6:	db df       	rcall	.-74     	; 0x95e <__udivmodhi4>
 9a8:	80 5d       	subi	r24, 0xD0	; 208
 9aa:	8a 33       	cpi	r24, 0x3A	; 58
 9ac:	0c f0       	brlt	.+2      	; 0x9b0 <itoa+0x2a>
 9ae:	89 5d       	subi	r24, 0xD9	; 217
 9b0:	81 93       	st	Z+, r24
 9b2:	cb 01       	movw	r24, r22
 9b4:	00 97       	sbiw	r24, 0x00	; 0
 9b6:	a9 f7       	brne	.-22     	; 0x9a2 <itoa+0x1c>
 9b8:	16 f4       	brtc	.+4      	; 0x9be <itoa+0x38>
 9ba:	5d e2       	ldi	r21, 0x2D	; 45
 9bc:	51 93       	st	Z+, r21
 9be:	10 82       	st	Z, r1
 9c0:	c9 01       	movw	r24, r18
 9c2:	00 c0       	rjmp	.+0      	; 0x9c4 <strrev>

000009c4 <strrev>:
 9c4:	dc 01       	movw	r26, r24
 9c6:	fc 01       	movw	r30, r24
 9c8:	67 2f       	mov	r22, r23
 9ca:	71 91       	ld	r23, Z+
 9cc:	77 23       	and	r23, r23
 9ce:	e1 f7       	brne	.-8      	; 0x9c8 <strrev+0x4>
 9d0:	32 97       	sbiw	r30, 0x02	; 2
 9d2:	04 c0       	rjmp	.+8      	; 0x9dc <strrev+0x18>
 9d4:	7c 91       	ld	r23, X
 9d6:	6d 93       	st	X+, r22
 9d8:	70 83       	st	Z, r23
 9da:	62 91       	ld	r22, -Z
 9dc:	ae 17       	cp	r26, r30
 9de:	bf 07       	cpc	r27, r31
 9e0:	c8 f3       	brcs	.-14     	; 0x9d4 <strrev+0x10>
 9e2:	08 95       	ret

000009e4 <_exit>:
 9e4:	f8 94       	cli

000009e6 <__stop_program>:
 9e6:	ff cf       	rjmp	.-2      	; 0x9e6 <__stop_program>
