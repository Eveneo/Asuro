
Asuro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013c  00800060  00000b20  00000bb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080019c  0080019c  00000cf0  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  00000cf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000183  00000000  00000000  00001644  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000017c7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001e0  00000000  00000000  000017f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000aad  00000000  00000000  000019d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000063c  00000000  00000000  00002483  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000af9  00000000  00000000  00002abf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004ac  00000000  00000000  000035b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000316  00000000  00000000  00003a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000832  00000000  00000000  00003d7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000130  00000000  00000000  000045ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
* /return   uint16 Wert des ADCs
*
*
************************************************************************/
uint16_t get_od_adc(char side)
{
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	46 c4       	rjmp	.+2188   	; 0x892 <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
    uint8_t i;
    PORTD |= ( 1 << PD7);               // PD7 auf HIGH -> keine LED Steuerung
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	96 c4       	rjmp	.+2348   	; 0x940 <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
    
    for( i=0; i<255; i++)
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
    {
        // wait
    }
    
    
    if( side == _RIGHT)                 // aktivieren des rechten ADC
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	11 e0       	ldi	r17, 0x01	; 1
    {
    ADMUX &= ~( 1 << MUX0);
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 e2       	ldi	r30, 0x20	; 32
  3a:	fb e0       	ldi	r31, 0x0B	; 11
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 39       	cpi	r26, 0x9C	; 156
  44:	b1 07       	cpc	r27, r17
    ADMUX &= ~( 1 << MUX1);
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	ac e9       	ldi	r26, 0x9C	; 156
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	af 39       	cpi	r26, 0x9F	; 159
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
    ADMUX &= ~( 1 << MUX2);
  58:	36 d0       	rcall	.+108    	; 0xc6 <main>
  5a:	60 c5       	rjmp	.+2752   	; 0xb1c <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <init_adc>:
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
  62:	cd b7       	in	r28, 0x3d	; 61
  64:	de b7       	in	r29, 0x3e	; 62
  66:	87 e2       	ldi	r24, 0x27	; 39
  68:	90 e0       	ldi	r25, 0x00	; 0
    ADMUX &= ~( 1 << MUX3);
  6a:	27 e2       	ldi	r18, 0x27	; 39
  6c:	30 e0       	ldi	r19, 0x00	; 0
  6e:	f9 01       	movw	r30, r18
  70:	20 81       	ld	r18, Z
  72:	20 64       	ori	r18, 0x40	; 64
  74:	fc 01       	movw	r30, r24
  76:	20 83       	st	Z, r18
  78:	86 e2       	ldi	r24, 0x26	; 38
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	26 e2       	ldi	r18, 0x26	; 38
    }
    
    else if ( side == _LEFT)            // aktivieren des linken ADC
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	f9 01       	movw	r30, r18
  82:	20 81       	ld	r18, Z
    {
    ADMUX |= ( 1 << MUX0);
  84:	20 68       	ori	r18, 0x80	; 128
  86:	fc 01       	movw	r30, r24
  88:	20 83       	st	Z, r18
  8a:	86 e2       	ldi	r24, 0x26	; 38
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	26 e2       	ldi	r18, 0x26	; 38
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	f9 01       	movw	r30, r18
  94:	20 81       	ld	r18, Z
    ADMUX &= ~( 1 << MUX1);
  96:	25 60       	ori	r18, 0x05	; 5
  98:	fc 01       	movw	r30, r24
  9a:	20 83       	st	Z, r18
  9c:	86 e2       	ldi	r24, 0x26	; 38
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	26 e2       	ldi	r18, 0x26	; 38
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	f9 01       	movw	r30, r18
  a6:	20 81       	ld	r18, Z
    ADMUX &= ~( 1 << MUX2);
  a8:	20 64       	ori	r18, 0x40	; 64
  aa:	fc 01       	movw	r30, r24
  ac:	20 83       	st	Z, r18
  ae:	00 00       	nop
  b0:	84 e2       	ldi	r24, 0x24	; 36
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	fc 01       	movw	r30, r24
  b6:	80 81       	ld	r24, Z
  b8:	91 81       	ldd	r25, Z+1	; 0x01
    ADMUX &= ~( 1 << MUX3);        
  ba:	82 e6       	ldi	r24, 0x62	; 98
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	97 d4       	rcall	.+2350   	; 0x9ee <uart_puts>
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <main>:
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	cd b7       	in	r28, 0x3d	; 61
    }      
      
    ADCSRA |= ( 1 << ADSC);             // Starte ADC Messung    
  cc:	de b7       	in	r29, 0x3e	; 62
  ce:	4a d4       	rcall	.+2196   	; 0x964 <init_uart>
  d0:	c8 d2       	rcall	.+1424   	; 0x662 <init_led>
  d2:	f2 d1       	rcall	.+996    	; 0x4b8 <init_motor>
  d4:	c4 df       	rcall	.-120    	; 0x5e <init_adc>
  d6:	18 d4       	rcall	.+2096   	; 0x908 <init_timer>
  d8:	11 d0       	rcall	.+34     	; 0xfc <init_line>
  da:	67 d3       	rcall	.+1742   	; 0x7aa <init_switch>
  dc:	83 e0       	ldi	r24, 0x03	; 3
    
    while( ADSC == 1)                   // Warte bis ADC-Messung beendet
  de:	ef d2       	rcall	.+1502   	; 0x6be <status_led>
    {
        //wait
    }
        
    return ADC;                         // gib ADC Wert zurück
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	3c d3       	rcall	.+1656   	; 0x75c <line_led>
  e4:	85 e7       	ldi	r24, 0x75	; 117
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	82 d4       	rcall	.+2308   	; 0x9ee <uart_puts>
}
  ea:	78 94       	sei
  ec:	61 e0       	ldi	r22, 0x01	; 1
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	2c d2       	rcall	.+1112   	; 0x54a <motor_dir>
  f2:	bb d0       	rcall	.+374    	; 0x26a <calibrate_line_sens>
    sei();                                  // aktiviere globale Interrupts
    
    motor_dir(_FWD, _FWD);
    calibrate_line_sens();
    
    status_led(_GREEN);
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	e3 d2       	rcall	.+1478   	; 0x6be <status_led>
         
    while(1)
    {

      follow_line();
  f8:	55 d1       	rcall	.+682    	; 0x3a4 <follow_line>
      //uart_puti(get_line_diff());
      //uart_puts(_CR);

    }//while(1)
  fa:	fe cf       	rjmp	.-4      	; 0xf8 <main+0x32>

000000fc <init_line>:
*
* /return   none
*
************************************************************************/
void init_line(void)
{
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
    DDRC &= ~( 1 << PC3);                   // Pin als Eingang
 104:	84 e3       	ldi	r24, 0x34	; 52
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	24 e3       	ldi	r18, 0x34	; 52
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	f9 01       	movw	r30, r18
 10e:	20 81       	ld	r18, Z
 110:	27 7f       	andi	r18, 0xF7	; 247
 112:	fc 01       	movw	r30, r24
 114:	20 83       	st	Z, r18
    DDRC &= ~( 1 << PC2);                   // Pin als Eingang
 116:	84 e3       	ldi	r24, 0x34	; 52
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	24 e3       	ldi	r18, 0x34	; 52
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	f9 01       	movw	r30, r18
 120:	20 81       	ld	r18, Z
 122:	2b 7f       	andi	r18, 0xFB	; 251
 124:	fc 01       	movw	r30, r24
 126:	20 83       	st	Z, r18

    uart_puts("line init done...");
 128:	89 e8       	ldi	r24, 0x89	; 137
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	60 d4       	rcall	.+2240   	; 0x9ee <uart_puts>
    uart_puts(_CR);
 12e:	8b e9       	ldi	r24, 0x9B	; 155
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	5d d4       	rcall	.+2234   	; 0x9ee <uart_puts>
}
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <get_line_adc>:
*           ...
*           65536   max. hell
*
************************************************************************/
uint16_t get_line_adc(char side)
{    
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	00 d0       	rcall	.+0      	; 0x140 <get_line_adc+0x6>
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i;

    for ( i=0; i<255; i++)
 146:	19 82       	std	Y+1, r1	; 0x01
 148:	03 c0       	rjmp	.+6      	; 0x150 <get_line_adc+0x16>
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	8f 5f       	subi	r24, 0xFF	; 255
 14e:	89 83       	std	Y+1, r24	; 0x01
 150:	89 81       	ldd	r24, Y+1	; 0x01
 152:	8f 3f       	cpi	r24, 0xFF	; 255
 154:	d1 f7       	brne	.-12     	; 0x14a <get_line_adc+0x10>
    {
        //Warteschleife für Kanalwechsel
    }

    if (side == _LEFT)                       // Auswahl ADC für den linken Liniensensor
 156:	8a 81       	ldd	r24, Y+2	; 0x02
 158:	88 23       	and	r24, r24
 15a:	29 f5       	brne	.+74     	; 0x1a6 <get_line_adc+0x6c>
    {
        ADMUX |=  ( 1 << MUX0);
 15c:	87 e2       	ldi	r24, 0x27	; 39
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	27 e2       	ldi	r18, 0x27	; 39
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	f9 01       	movw	r30, r18
 166:	20 81       	ld	r18, Z
 168:	21 60       	ori	r18, 0x01	; 1
 16a:	fc 01       	movw	r30, r24
 16c:	20 83       	st	Z, r18
        ADMUX |=  ( 1 << MUX1);
 16e:	87 e2       	ldi	r24, 0x27	; 39
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	27 e2       	ldi	r18, 0x27	; 39
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	f9 01       	movw	r30, r18
 178:	20 81       	ld	r18, Z
 17a:	22 60       	ori	r18, 0x02	; 2
 17c:	fc 01       	movw	r30, r24
 17e:	20 83       	st	Z, r18
        ADMUX &= ~( 1 << MUX2);
 180:	87 e2       	ldi	r24, 0x27	; 39
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	27 e2       	ldi	r18, 0x27	; 39
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	f9 01       	movw	r30, r18
 18a:	20 81       	ld	r18, Z
 18c:	2b 7f       	andi	r18, 0xFB	; 251
 18e:	fc 01       	movw	r30, r24
 190:	20 83       	st	Z, r18
        ADMUX &= ~( 1 << MUX3);
 192:	87 e2       	ldi	r24, 0x27	; 39
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	27 e2       	ldi	r18, 0x27	; 39
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	f9 01       	movw	r30, r18
 19c:	20 81       	ld	r18, Z
 19e:	27 7f       	andi	r18, 0xF7	; 247
 1a0:	fc 01       	movw	r30, r24
 1a2:	20 83       	st	Z, r18
 1a4:	2b c0       	rjmp	.+86     	; 0x1fc <get_line_adc+0xc2>
    }
    
    else if (side == _RIGHT)                 // Auswahl ADC für den rechten Liniensensor
 1a6:	8a 81       	ldd	r24, Y+2	; 0x02
 1a8:	81 30       	cpi	r24, 0x01	; 1
 1aa:	29 f5       	brne	.+74     	; 0x1f6 <get_line_adc+0xbc>
    {
        ADMUX &= ~( 1 << MUX0);
 1ac:	87 e2       	ldi	r24, 0x27	; 39
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	27 e2       	ldi	r18, 0x27	; 39
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	f9 01       	movw	r30, r18
 1b6:	20 81       	ld	r18, Z
 1b8:	2e 7f       	andi	r18, 0xFE	; 254
 1ba:	fc 01       	movw	r30, r24
 1bc:	20 83       	st	Z, r18
        ADMUX |=  ( 1 << MUX1);
 1be:	87 e2       	ldi	r24, 0x27	; 39
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	27 e2       	ldi	r18, 0x27	; 39
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	f9 01       	movw	r30, r18
 1c8:	20 81       	ld	r18, Z
 1ca:	22 60       	ori	r18, 0x02	; 2
 1cc:	fc 01       	movw	r30, r24
 1ce:	20 83       	st	Z, r18
        ADMUX &= ~( 1 << MUX2);
 1d0:	87 e2       	ldi	r24, 0x27	; 39
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	27 e2       	ldi	r18, 0x27	; 39
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	f9 01       	movw	r30, r18
 1da:	20 81       	ld	r18, Z
 1dc:	2b 7f       	andi	r18, 0xFB	; 251
 1de:	fc 01       	movw	r30, r24
 1e0:	20 83       	st	Z, r18
        ADMUX &= ~( 1 << MUX3);
 1e2:	87 e2       	ldi	r24, 0x27	; 39
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	27 e2       	ldi	r18, 0x27	; 39
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	f9 01       	movw	r30, r18
 1ec:	20 81       	ld	r18, Z
 1ee:	27 7f       	andi	r18, 0xF7	; 247
 1f0:	fc 01       	movw	r30, r24
 1f2:	20 83       	st	Z, r18
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <get_line_adc+0xc2>
    }

    else                                    // Ungültige Auswahl
    {
        uart_puts("kein gültiger ADC Kanal in get_line_adc()");
 1f6:	8e e9       	ldi	r24, 0x9E	; 158
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	f9 d3       	rcall	.+2034   	; 0x9ee <uart_puts>
    }

    ADCSRA |= ( 1 << ADSC);                 // Starte ADC Messung
 1fc:	86 e2       	ldi	r24, 0x26	; 38
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	26 e2       	ldi	r18, 0x26	; 38
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	f9 01       	movw	r30, r18
 206:	20 81       	ld	r18, Z
 208:	20 64       	ori	r18, 0x40	; 64
 20a:	fc 01       	movw	r30, r24
 20c:	20 83       	st	Z, r18
            
    while( ADSC == 1)                       // Warte bis ADC-Messung beendet
 20e:	00 00       	nop
    {
        //wait
    }
        
    return ADC;                             // gib ADC Wert zurück
 210:	84 e2       	ldi	r24, 0x24	; 36
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	fc 01       	movw	r30, r24
 216:	80 81       	ld	r24, Z
 218:	91 81       	ldd	r25, Z+1	; 0x01
}
 21a:	0f 90       	pop	r0
 21c:	0f 90       	pop	r0
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	08 95       	ret

00000224 <get_line_diff>:
*           ...
*           32767   linker Sensor max. hell, rechter Sensor max. dunkel
*
************************************************************************/
int16_t get_line_diff(void)
{
 224:	0f 93       	push	r16
 226:	1f 93       	push	r17
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	00 d0       	rcall	.+0      	; 0x22e <get_line_diff+0xa>
 22e:	cd b7       	in	r28, 0x3d	; 61
 230:	de b7       	in	r29, 0x3e	; 62
    int16_t buffer;
    
    buffer = get_line_adc(_LEFT) - get_line_adc(_RIGHT) - cal_factor;                        // Errechnen der Helligkeitsdifferenz der Sensoren
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	82 df       	rcall	.-252    	; 0x13a <get_line_adc>
 236:	8c 01       	movw	r16, r24
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	7f df       	rcall	.-258    	; 0x13a <get_line_adc>
 23c:	98 01       	movw	r18, r16
 23e:	28 1b       	sub	r18, r24
 240:	39 0b       	sbc	r19, r25
 242:	80 91 9c 01 	lds	r24, 0x019C
 246:	99 27       	eor	r25, r25
 248:	87 fd       	sbrc	r24, 7
 24a:	90 95       	com	r25
 24c:	a9 01       	movw	r20, r18
 24e:	48 1b       	sub	r20, r24
 250:	59 0b       	sbc	r21, r25
 252:	ca 01       	movw	r24, r20
 254:	9a 83       	std	Y+2, r25	; 0x02
 256:	89 83       	std	Y+1, r24	; 0x01
    
    return buffer;
 258:	89 81       	ldd	r24, Y+1	; 0x01
 25a:	9a 81       	ldd	r25, Y+2	; 0x02
}
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	1f 91       	pop	r17
 266:	0f 91       	pop	r16
 268:	08 95       	ret

0000026a <calibrate_line_sens>:
*
* /return   none
*
************************************************************************/
void calibrate_line_sens(void)
{
 26a:	ef 92       	push	r14
 26c:	ff 92       	push	r15
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	cd b7       	in	r28, 0x3d	; 61
 278:	de b7       	in	r29, 0x3e	; 62
 27a:	6b 97       	sbiw	r28, 0x1b	; 27
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	f8 94       	cli
 280:	de bf       	out	0x3e, r29	; 62
 282:	0f be       	out	0x3f, r0	; 63
 284:	cd bf       	out	0x3d, r28	; 61
    uint8_t i = 0;                                                          // variable für Zählerschleife
 286:	19 82       	std	Y+1, r1	; 0x01
    int16_t diff_data[12];                                                  // Array für die ADC Messwerte
    int16_t buffer = 0;                                                     // Zwischenspeicher zur Mittelwert errechnung
 288:	1b 82       	std	Y+3, r1	; 0x03
 28a:	1a 82       	std	Y+2, r1	; 0x02
    
    diff_data[11] = get_line_adc(_LEFT) - get_line_adc(_RIGHT);             // dummy Messung, da erste ADC Messung immer fehlerhaft
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	55 df       	rcall	.-342    	; 0x13a <get_line_adc>
 290:	8c 01       	movw	r16, r24
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	52 df       	rcall	.-348    	; 0x13a <get_line_adc>
 296:	98 01       	movw	r18, r16
 298:	28 1b       	sub	r18, r24
 29a:	39 0b       	sbc	r19, r25
 29c:	c9 01       	movw	r24, r18
 29e:	9b 8f       	std	Y+27, r25	; 0x1b
 2a0:	8a 8f       	std	Y+26, r24	; 0x1a
    
    for ( i=0; i<10; i++)                                                   // 10x durchlaufen der Schleife für 10 Messungen
 2a2:	19 82       	std	Y+1, r1	; 0x01
 2a4:	52 c0       	rjmp	.+164    	; 0x34a <calibrate_line_sens+0xe0>
    {
        diff_data[i] = get_line_adc(_LEFT) - get_line_adc(_RIGHT);          // Bilden der Differenz der Sensoren 
 2a6:	89 81       	ldd	r24, Y+1	; 0x01
 2a8:	08 2f       	mov	r16, r24
 2aa:	10 e0       	ldi	r17, 0x00	; 0
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	45 df       	rcall	.-374    	; 0x13a <get_line_adc>
 2b0:	7c 01       	movw	r14, r24
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	42 df       	rcall	.-380    	; 0x13a <get_line_adc>
 2b6:	f7 01       	movw	r30, r14
 2b8:	e8 1b       	sub	r30, r24
 2ba:	f9 0b       	sbc	r31, r25
 2bc:	cf 01       	movw	r24, r30
 2be:	9c 01       	movw	r18, r24
 2c0:	c8 01       	movw	r24, r16
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	ae 01       	movw	r20, r28
 2c8:	4f 5f       	subi	r20, 0xFF	; 255
 2ca:	5f 4f       	sbci	r21, 0xFF	; 255
 2cc:	84 0f       	add	r24, r20
 2ce:	95 1f       	adc	r25, r21
 2d0:	03 96       	adiw	r24, 0x03	; 3
 2d2:	fc 01       	movw	r30, r24
 2d4:	31 83       	std	Z+1, r19	; 0x01
 2d6:	20 83       	st	Z, r18
        buffer += diff_data[i];                                             // Differenz addieren
 2d8:	89 81       	ldd	r24, Y+1	; 0x01
 2da:	88 2f       	mov	r24, r24
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	9e 01       	movw	r18, r28
 2e4:	2f 5f       	subi	r18, 0xFF	; 255
 2e6:	3f 4f       	sbci	r19, 0xFF	; 255
 2e8:	82 0f       	add	r24, r18
 2ea:	93 1f       	adc	r25, r19
 2ec:	03 96       	adiw	r24, 0x03	; 3
 2ee:	fc 01       	movw	r30, r24
 2f0:	80 81       	ld	r24, Z
 2f2:	91 81       	ldd	r25, Z+1	; 0x01
 2f4:	2a 81       	ldd	r18, Y+2	; 0x02
 2f6:	3b 81       	ldd	r19, Y+3	; 0x03
 2f8:	82 0f       	add	r24, r18
 2fa:	93 1f       	adc	r25, r19
 2fc:	9b 83       	std	Y+3, r25	; 0x03
 2fe:	8a 83       	std	Y+2, r24	; 0x02
      
        #if _DEBUG
        uart_puts("Wert ");
 300:	88 ec       	ldi	r24, 0xC8	; 200
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	74 d3       	rcall	.+1768   	; 0x9ee <uart_puts>
        uart_puti(i);
 306:	89 81       	ldd	r24, Y+1	; 0x01
 308:	88 2f       	mov	r24, r24
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	90 d3       	rcall	.+1824   	; 0xa2e <uart_puti>
        uart_puts(": ");
 30e:	8e ec       	ldi	r24, 0xCE	; 206
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	6d d3       	rcall	.+1754   	; 0x9ee <uart_puts>
        uart_puti(diff_data[i]);
 314:	89 81       	ldd	r24, Y+1	; 0x01
 316:	88 2f       	mov	r24, r24
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	9e 01       	movw	r18, r28
 320:	2f 5f       	subi	r18, 0xFF	; 255
 322:	3f 4f       	sbci	r19, 0xFF	; 255
 324:	82 0f       	add	r24, r18
 326:	93 1f       	adc	r25, r19
 328:	03 96       	adiw	r24, 0x03	; 3
 32a:	fc 01       	movw	r30, r24
 32c:	80 81       	ld	r24, Z
 32e:	91 81       	ldd	r25, Z+1	; 0x01
 330:	7e d3       	rcall	.+1788   	; 0xa2e <uart_puti>
        uart_puts("   ;   ");
 332:	81 ed       	ldi	r24, 0xD1	; 209
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	5b d3       	rcall	.+1718   	; 0x9ee <uart_puts>
        uart_puti(buffer);
 338:	8a 81       	ldd	r24, Y+2	; 0x02
 33a:	9b 81       	ldd	r25, Y+3	; 0x03
 33c:	78 d3       	rcall	.+1776   	; 0xa2e <uart_puti>
        uart_puts(_CR);
 33e:	8b e9       	ldi	r24, 0x9B	; 155
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	55 d3       	rcall	.+1706   	; 0x9ee <uart_puts>
    int16_t diff_data[12];                                                  // Array für die ADC Messwerte
    int16_t buffer = 0;                                                     // Zwischenspeicher zur Mittelwert errechnung
    
    diff_data[11] = get_line_adc(_LEFT) - get_line_adc(_RIGHT);             // dummy Messung, da erste ADC Messung immer fehlerhaft
    
    for ( i=0; i<10; i++)                                                   // 10x durchlaufen der Schleife für 10 Messungen
 344:	89 81       	ldd	r24, Y+1	; 0x01
 346:	8f 5f       	subi	r24, 0xFF	; 255
 348:	89 83       	std	Y+1, r24	; 0x01
 34a:	89 81       	ldd	r24, Y+1	; 0x01
 34c:	8a 30       	cpi	r24, 0x0A	; 10
 34e:	08 f4       	brcc	.+2      	; 0x352 <calibrate_line_sens+0xe8>
 350:	aa cf       	rjmp	.-172    	; 0x2a6 <calibrate_line_sens+0x3c>
        uart_puts(_CR);
        #endif
      
    }
 
    cal_factor = buffer/10;                                                 // Teile Addition aller Differenzen durch 10 -> Mittelwert
 352:	8a 81       	ldd	r24, Y+2	; 0x02
 354:	9b 81       	ldd	r25, Y+3	; 0x03
 356:	2a e0       	ldi	r18, 0x0A	; 10
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	b9 01       	movw	r22, r18
 35c:	89 d3       	rcall	.+1810   	; 0xa70 <__divmodhi4>
 35e:	9b 01       	movw	r18, r22
 360:	c9 01       	movw	r24, r18
 362:	80 93 9c 01 	sts	0x019C, r24
    
    #if _DEBUG    
    uart_puts("Summe : ");
 366:	89 ed       	ldi	r24, 0xD9	; 217
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	41 d3       	rcall	.+1666   	; 0x9ee <uart_puts>
    uart_puti(buffer);
 36c:	8a 81       	ldd	r24, Y+2	; 0x02
 36e:	9b 81       	ldd	r25, Y+3	; 0x03
 370:	5e d3       	rcall	.+1724   	; 0xa2e <uart_puti>
    uart_puts(_CR);
 372:	8b e9       	ldi	r24, 0x9B	; 155
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	3b d3       	rcall	.+1654   	; 0x9ee <uart_puts>
    uart_puts("Faktor: ");
 378:	82 ee       	ldi	r24, 0xE2	; 226
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	38 d3       	rcall	.+1648   	; 0x9ee <uart_puts>
    uart_puti(cal_factor);
 37e:	80 91 9c 01 	lds	r24, 0x019C
 382:	99 27       	eor	r25, r25
 384:	87 fd       	sbrc	r24, 7
 386:	90 95       	com	r25
 388:	52 d3       	rcall	.+1700   	; 0xa2e <uart_puti>
    #endif
    
 38a:	6b 96       	adiw	r28, 0x1b	; 27
 38c:	0f b6       	in	r0, 0x3f	; 63
 38e:	f8 94       	cli
 390:	de bf       	out	0x3e, r29	; 62
 392:	0f be       	out	0x3f, r0	; 63
 394:	cd bf       	out	0x3d, r28	; 61
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	1f 91       	pop	r17
 39c:	0f 91       	pop	r16
 39e:	ff 90       	pop	r15
 3a0:	ef 90       	pop	r14
 3a2:	08 95       	ret

000003a4 <follow_line>:




 void follow_line(void)
 {
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	00 d0       	rcall	.+0      	; 0x3aa <follow_line+0x6>
 3aa:	1f 92       	push	r1
 3ac:	cd b7       	in	r28, 0x3d	; 61
 3ae:	de b7       	in	r29, 0x3e	; 62
     int8_t pwr_corlef, pwr_corrig;
     uint8_t i;
     
     
    line_diff = get_line_diff(); 
 3b0:	39 df       	rcall	.-398    	; 0x224 <get_line_diff>
 3b2:	90 93 9e 01 	sts	0x019E, r25
 3b6:	80 93 9d 01 	sts	0x019D, r24
/** VERSUCH FEINERE ABSTUFUNG DER ERKENNUNG  **/  

    /** Linker Sensor dunkler **/
    if ( line_diff < -_LDIFF_STEPS )
 3ba:	80 91 9d 01 	lds	r24, 0x019D
 3be:	90 91 9e 01 	lds	r25, 0x019E
 3c2:	86 3f       	cpi	r24, 0xF6	; 246
 3c4:	2f ef       	ldi	r18, 0xFF	; 255
 3c6:	92 07       	cpc	r25, r18
 3c8:	0c f5       	brge	.+66     	; 0x40c <follow_line+0x68>
    {
        for ( i=5 ; i > 0; i--)
 3ca:	85 e0       	ldi	r24, 0x05	; 5
 3cc:	89 83       	std	Y+1, r24	; 0x01
 3ce:	1b c0       	rjmp	.+54     	; 0x406 <follow_line+0x62>
        {
            if ( line_diff < i*-_LDIFF_STEPS)
 3d0:	89 81       	ldd	r24, Y+1	; 0x01
 3d2:	88 2f       	mov	r24, r24
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	46 ef       	ldi	r20, 0xF6	; 246
 3d8:	bc 01       	movw	r22, r24
 3da:	46 03       	mulsu	r20, r22
 3dc:	90 01       	movw	r18, r0
 3de:	47 9f       	mul	r20, r23
 3e0:	30 0d       	add	r19, r0
 3e2:	11 24       	eor	r1, r1
 3e4:	80 91 9d 01 	lds	r24, 0x019D
 3e8:	90 91 9e 01 	lds	r25, 0x019E
 3ec:	82 17       	cp	r24, r18
 3ee:	93 07       	cpc	r25, r19
 3f0:	3c f4       	brge	.+14     	; 0x400 <follow_line+0x5c>
            {
                pwr_corlef = i*_LREG_STEPS;
 3f2:	89 81       	ldd	r24, Y+1	; 0x01
 3f4:	88 0f       	add	r24, r24
 3f6:	98 2f       	mov	r25, r24
 3f8:	99 0f       	add	r25, r25
 3fa:	99 0f       	add	r25, r25
 3fc:	89 0f       	add	r24, r25
 3fe:	8a 83       	std	Y+2, r24	; 0x02
/** VERSUCH FEINERE ABSTUFUNG DER ERKENNUNG  **/  

    /** Linker Sensor dunkler **/
    if ( line_diff < -_LDIFF_STEPS )
    {
        for ( i=5 ; i > 0; i--)
 400:	89 81       	ldd	r24, Y+1	; 0x01
 402:	81 50       	subi	r24, 0x01	; 1
 404:	89 83       	std	Y+1, r24	; 0x01
 406:	89 81       	ldd	r24, Y+1	; 0x01
 408:	88 23       	and	r24, r24
 40a:	11 f7       	brne	.-60     	; 0x3d0 <follow_line+0x2c>
            }            
        }
    }

    /** Rechter Sensor dunkler **/
    if ( line_diff > _LDIFF_STEPS )
 40c:	80 91 9d 01 	lds	r24, 0x019D
 410:	90 91 9e 01 	lds	r25, 0x019E
 414:	8b 30       	cpi	r24, 0x0B	; 11
 416:	91 05       	cpc	r25, r1
 418:	14 f1       	brlt	.+68     	; 0x45e <follow_line+0xba>
    {
        for ( i=5 ; i > 0; i--)
 41a:	85 e0       	ldi	r24, 0x05	; 5
 41c:	89 83       	std	Y+1, r24	; 0x01
 41e:	1b c0       	rjmp	.+54     	; 0x456 <follow_line+0xb2>
        {
            if ( line_diff < i*-_LDIFF_STEPS)
 420:	89 81       	ldd	r24, Y+1	; 0x01
 422:	88 2f       	mov	r24, r24
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	46 ef       	ldi	r20, 0xF6	; 246
 428:	bc 01       	movw	r22, r24
 42a:	46 03       	mulsu	r20, r22
 42c:	90 01       	movw	r18, r0
 42e:	47 9f       	mul	r20, r23
 430:	30 0d       	add	r19, r0
 432:	11 24       	eor	r1, r1
 434:	80 91 9d 01 	lds	r24, 0x019D
 438:	90 91 9e 01 	lds	r25, 0x019E
 43c:	82 17       	cp	r24, r18
 43e:	93 07       	cpc	r25, r19
 440:	3c f4       	brge	.+14     	; 0x450 <follow_line+0xac>
            {
                pwr_corrig = i*_LREG_STEPS;
 442:	89 81       	ldd	r24, Y+1	; 0x01
 444:	88 0f       	add	r24, r24
 446:	98 2f       	mov	r25, r24
 448:	99 0f       	add	r25, r25
 44a:	99 0f       	add	r25, r25
 44c:	89 0f       	add	r24, r25
 44e:	8b 83       	std	Y+3, r24	; 0x03
    }

    /** Rechter Sensor dunkler **/
    if ( line_diff > _LDIFF_STEPS )
    {
        for ( i=5 ; i > 0; i--)
 450:	89 81       	ldd	r24, Y+1	; 0x01
 452:	81 50       	subi	r24, 0x01	; 1
 454:	89 83       	std	Y+1, r24	; 0x01
 456:	89 81       	ldd	r24, Y+1	; 0x01
 458:	88 23       	and	r24, r24
 45a:	11 f7       	brne	.-60     	; 0x420 <follow_line+0x7c>
 45c:	21 c0       	rjmp	.+66     	; 0x4a0 <__stack+0x41>
            }
        }
    }

    /** Beide Sensoren gleich hell/dunkel **/
    else if ( (-_LDIFF_LVL1 < line_diff) && (line_diff < _LDIFF_LVL1) )
 45e:	80 91 9d 01 	lds	r24, 0x019D
 462:	90 91 9e 01 	lds	r25, 0x019E
 466:	8d 3e       	cpi	r24, 0xED	; 237
 468:	7f ef       	ldi	r23, 0xFF	; 255
 46a:	97 07       	cpc	r25, r23
 46c:	cc f0       	brlt	.+50     	; 0x4a0 <__stack+0x41>
 46e:	80 91 9d 01 	lds	r24, 0x019D
 472:	90 91 9e 01 	lds	r25, 0x019E
 476:	84 31       	cpi	r24, 0x14	; 20
 478:	91 05       	cpc	r25, r1
 47a:	94 f4       	brge	.+36     	; 0x4a0 <__stack+0x41>
    {
        if ( pwr_left < (255-_LREG_LVL1) )
 47c:	80 91 60 00 	lds	r24, 0x0060
 480:	8b 3e       	cpi	r24, 0xEB	; 235
 482:	28 f4       	brcc	.+10     	; 0x48e <__stack+0x2f>
        {
            pwr_left += _LREG_LVL1;
 484:	80 91 60 00 	lds	r24, 0x0060
 488:	8c 5e       	subi	r24, 0xEC	; 236
 48a:	80 93 60 00 	sts	0x0060, r24
        }

        if ( pwr_right < 255-_LREG_LVL1 )
 48e:	80 91 61 00 	lds	r24, 0x0061
 492:	8b 3e       	cpi	r24, 0xEB	; 235
 494:	28 f4       	brcc	.+10     	; 0x4a0 <__stack+0x41>
        {
            pwr_right += _LREG_LVL1;
 496:	80 91 61 00 	lds	r24, 0x0061
 49a:	8c 5e       	subi	r24, 0xEC	; 236
 49c:	80 93 61 00 	sts	0x0061, r24
        }
    }

    motor_pwr(pwr_left, pwr_right);
 4a0:	90 91 61 00 	lds	r25, 0x0061
 4a4:	80 91 60 00 	lds	r24, 0x0060
 4a8:	69 2f       	mov	r22, r25
 4aa:	c5 d0       	rcall	.+394    	; 0x636 <motor_pwr>
    uart_puti(pwr_right);
    uart_puts(";");
    uart_puti(line_diff);
    uart_puts(_CR);
    #endif
 4ac:	0f 90       	pop	r0
 4ae:	0f 90       	pop	r0
 4b0:	0f 90       	pop	r0
 4b2:	df 91       	pop	r29
 4b4:	cf 91       	pop	r28
 4b6:	08 95       	ret

000004b8 <init_motor>:
* /return   none
*
*
************************************************************************/
void init_motor(void)
{
 4b8:	cf 93       	push	r28
 4ba:	df 93       	push	r29
 4bc:	cd b7       	in	r28, 0x3d	; 61
 4be:	de b7       	in	r29, 0x3e	; 62
    /** IOs definieren **/
    DDRD |= (1 << PD4) | (1 << PD5);                // Pins für linken Motor als Ausgänge
 4c0:	81 e3       	ldi	r24, 0x31	; 49
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	21 e3       	ldi	r18, 0x31	; 49
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	f9 01       	movw	r30, r18
 4ca:	20 81       	ld	r18, Z
 4cc:	20 63       	ori	r18, 0x30	; 48
 4ce:	fc 01       	movw	r30, r24
 4d0:	20 83       	st	Z, r18
    DDRB |= (1 << PB4) | (1 << PB5);                // Pins für rechten Motor als Ausgänge
 4d2:	87 e3       	ldi	r24, 0x37	; 55
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	27 e3       	ldi	r18, 0x37	; 55
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	f9 01       	movw	r30, r18
 4dc:	20 81       	ld	r18, Z
 4de:	20 63       	ori	r18, 0x30	; 48
 4e0:	fc 01       	movw	r30, r24
 4e2:	20 83       	st	Z, r18
    DDRB |= (1 << PB1) | (1 << PB2);                // PWM Pins als Ausgänge
 4e4:	87 e3       	ldi	r24, 0x37	; 55
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	27 e3       	ldi	r18, 0x37	; 55
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	f9 01       	movw	r30, r18
 4ee:	20 81       	ld	r18, Z
 4f0:	26 60       	ori	r18, 0x06	; 6
 4f2:	fc 01       	movw	r30, r24
 4f4:	20 83       	st	Z, r18
    
    /** Motor stoppen **/
    PORTD |= (1 << PD4) | (1 << PD5);               // Ausgänge auf HIGH -> Motor blockiert
 4f6:	82 e3       	ldi	r24, 0x32	; 50
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	22 e3       	ldi	r18, 0x32	; 50
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	f9 01       	movw	r30, r18
 500:	20 81       	ld	r18, Z
 502:	20 63       	ori	r18, 0x30	; 48
 504:	fc 01       	movw	r30, r24
 506:	20 83       	st	Z, r18
    PORTB |= (1 << PB4) | (1 << PB5);               // Ausgänge auf HIGH -> Motor blockiert
 508:	88 e3       	ldi	r24, 0x38	; 56
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	28 e3       	ldi	r18, 0x38	; 56
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	f9 01       	movw	r30, r18
 512:	20 81       	ld	r18, Z
 514:	20 63       	ori	r18, 0x30	; 48
 516:	fc 01       	movw	r30, r24
 518:	20 83       	st	Z, r18
        
    /** Timer konfigurieren **/
    TCCR1A |= (1 << COM1A1) | (1 << WGM10) | (1 << COM1B1);
 51a:	8f e4       	ldi	r24, 0x4F	; 79
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	2f e4       	ldi	r18, 0x4F	; 79
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	f9 01       	movw	r30, r18
 524:	20 81       	ld	r18, Z
 526:	21 6a       	ori	r18, 0xA1	; 161
 528:	fc 01       	movw	r30, r24
 52a:	20 83       	st	Z, r18
    TCCR1B |= (1 << CS11);
 52c:	8e e4       	ldi	r24, 0x4E	; 78
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	2e e4       	ldi	r18, 0x4E	; 78
 532:	30 e0       	ldi	r19, 0x00	; 0
 534:	f9 01       	movw	r30, r18
 536:	20 81       	ld	r18, Z
 538:	22 60       	ori	r18, 0x02	; 2
 53a:	fc 01       	movw	r30, r24
 53c:	20 83       	st	Z, r18
    
    uart_puts("motor init done..." _CR);
 53e:	8b ee       	ldi	r24, 0xEB	; 235
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	55 d2       	rcall	.+1194   	; 0x9ee <uart_puts>
}
 544:	df 91       	pop	r29
 546:	cf 91       	pop	r28
 548:	08 95       	ret

0000054a <motor_dir>:
* /return   none
*
*
************************************************************************/
void motor_dir( char left, char right)
{
 54a:	cf 93       	push	r28
 54c:	df 93       	push	r29
 54e:	00 d0       	rcall	.+0      	; 0x550 <motor_dir+0x6>
 550:	cd b7       	in	r28, 0x3d	; 61
 552:	de b7       	in	r29, 0x3e	; 62
 554:	89 83       	std	Y+1, r24	; 0x01
 556:	6a 83       	std	Y+2, r22	; 0x02
    /** Linke Seite **/
    if ( left == _FWD)                              // Motor vorwärts
 558:	89 81       	ldd	r24, Y+1	; 0x01
 55a:	81 30       	cpi	r24, 0x01	; 1
 55c:	99 f4       	brne	.+38     	; 0x584 <motor_dir+0x3a>
    {
        PORTD |= (1 << PD5);
 55e:	82 e3       	ldi	r24, 0x32	; 50
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	22 e3       	ldi	r18, 0x32	; 50
 564:	30 e0       	ldi	r19, 0x00	; 0
 566:	f9 01       	movw	r30, r18
 568:	20 81       	ld	r18, Z
 56a:	20 62       	ori	r18, 0x20	; 32
 56c:	fc 01       	movw	r30, r24
 56e:	20 83       	st	Z, r18
        PORTD &= ~(1 << PD4);        
 570:	82 e3       	ldi	r24, 0x32	; 50
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	22 e3       	ldi	r18, 0x32	; 50
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	f9 01       	movw	r30, r18
 57a:	20 81       	ld	r18, Z
 57c:	2f 7e       	andi	r18, 0xEF	; 239
 57e:	fc 01       	movw	r30, r24
 580:	20 83       	st	Z, r18
 582:	1f c0       	rjmp	.+62     	; 0x5c2 <motor_dir+0x78>
    }
        
    else if ( left == _RWD)                         // Motor rückwärts
 584:	89 81       	ldd	r24, Y+1	; 0x01
 586:	82 30       	cpi	r24, 0x02	; 2
 588:	99 f4       	brne	.+38     	; 0x5b0 <motor_dir+0x66>
    {
        PORTD &= ~(1 << PD5);
 58a:	82 e3       	ldi	r24, 0x32	; 50
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	22 e3       	ldi	r18, 0x32	; 50
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	f9 01       	movw	r30, r18
 594:	20 81       	ld	r18, Z
 596:	2f 7d       	andi	r18, 0xDF	; 223
 598:	fc 01       	movw	r30, r24
 59a:	20 83       	st	Z, r18
        PORTD |=  (1 << PD4);        
 59c:	82 e3       	ldi	r24, 0x32	; 50
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	22 e3       	ldi	r18, 0x32	; 50
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	f9 01       	movw	r30, r18
 5a6:	20 81       	ld	r18, Z
 5a8:	20 61       	ori	r18, 0x10	; 16
 5aa:	fc 01       	movw	r30, r24
 5ac:	20 83       	st	Z, r18
 5ae:	09 c0       	rjmp	.+18     	; 0x5c2 <motor_dir+0x78>
    }
        
    else                                            // ungültige Auswahl
    {
    PORTD |= (1 << PD4) | (1 << PD5);               // Ausgänge auf HIGH -> Motor blockiert
 5b0:	82 e3       	ldi	r24, 0x32	; 50
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	22 e3       	ldi	r18, 0x32	; 50
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	f9 01       	movw	r30, r18
 5ba:	20 81       	ld	r18, Z
 5bc:	20 63       	ori	r18, 0x30	; 48
 5be:	fc 01       	movw	r30, r24
 5c0:	20 83       	st	Z, r18
    }
    
    
    /** Rechte Seite **/
    if ( right == _FWD)                             // Motor vorwärts
 5c2:	8a 81       	ldd	r24, Y+2	; 0x02
 5c4:	81 30       	cpi	r24, 0x01	; 1
 5c6:	99 f4       	brne	.+38     	; 0x5ee <motor_dir+0xa4>
    {
        PORTB |= (1 << PB5);
 5c8:	88 e3       	ldi	r24, 0x38	; 56
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	28 e3       	ldi	r18, 0x38	; 56
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	f9 01       	movw	r30, r18
 5d2:	20 81       	ld	r18, Z
 5d4:	20 62       	ori	r18, 0x20	; 32
 5d6:	fc 01       	movw	r30, r24
 5d8:	20 83       	st	Z, r18
        PORTB &= ~(1 << PB4);
 5da:	88 e3       	ldi	r24, 0x38	; 56
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	28 e3       	ldi	r18, 0x38	; 56
 5e0:	30 e0       	ldi	r19, 0x00	; 0
 5e2:	f9 01       	movw	r30, r18
 5e4:	20 81       	ld	r18, Z
 5e6:	2f 7e       	andi	r18, 0xEF	; 239
 5e8:	fc 01       	movw	r30, r24
 5ea:	20 83       	st	Z, r18
 5ec:	1f c0       	rjmp	.+62     	; 0x62c <motor_dir+0xe2>
    }
    
    else if ( right == _RWD)                        // Motor rückwärts
 5ee:	8a 81       	ldd	r24, Y+2	; 0x02
 5f0:	82 30       	cpi	r24, 0x02	; 2
 5f2:	99 f4       	brne	.+38     	; 0x61a <motor_dir+0xd0>
    {
        PORTB &= ~(1 << PB5);
 5f4:	88 e3       	ldi	r24, 0x38	; 56
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	28 e3       	ldi	r18, 0x38	; 56
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	f9 01       	movw	r30, r18
 5fe:	20 81       	ld	r18, Z
 600:	2f 7d       	andi	r18, 0xDF	; 223
 602:	fc 01       	movw	r30, r24
 604:	20 83       	st	Z, r18
        PORTB |=  (1 << PB4);
 606:	88 e3       	ldi	r24, 0x38	; 56
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	28 e3       	ldi	r18, 0x38	; 56
 60c:	30 e0       	ldi	r19, 0x00	; 0
 60e:	f9 01       	movw	r30, r18
 610:	20 81       	ld	r18, Z
 612:	20 61       	ori	r18, 0x10	; 16
 614:	fc 01       	movw	r30, r24
 616:	20 83       	st	Z, r18
 618:	09 c0       	rjmp	.+18     	; 0x62c <motor_dir+0xe2>
    }
    
    else                                            // ungültige Auswahl
    {
        PORTB |= (1 << PB4) | (1 << PB5);           // Ausgänge auf HIGH -> Motor blockiert
 61a:	88 e3       	ldi	r24, 0x38	; 56
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	28 e3       	ldi	r18, 0x38	; 56
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	f9 01       	movw	r30, r18
 624:	20 81       	ld	r18, Z
 626:	20 63       	ori	r18, 0x30	; 48
 628:	fc 01       	movw	r30, r24
 62a:	20 83       	st	Z, r18
    }    
}
 62c:	0f 90       	pop	r0
 62e:	0f 90       	pop	r0
 630:	df 91       	pop	r29
 632:	cf 91       	pop	r28
 634:	08 95       	ret

00000636 <motor_pwr>:
* /return   none
*
*
************************************************************************/
void motor_pwr( uint8_t left, uint8_t right)
{
 636:	cf 93       	push	r28
 638:	df 93       	push	r29
 63a:	00 d0       	rcall	.+0      	; 0x63c <motor_pwr+0x6>
 63c:	cd b7       	in	r28, 0x3d	; 61
 63e:	de b7       	in	r29, 0x3e	; 62
 640:	89 83       	std	Y+1, r24	; 0x01
 642:	6a 83       	std	Y+2, r22	; 0x02
    _PWM_LEFT = left;
 644:	8a e4       	ldi	r24, 0x4A	; 74
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	29 81       	ldd	r18, Y+1	; 0x01
 64a:	fc 01       	movw	r30, r24
 64c:	20 83       	st	Z, r18
    _PWM_RIGHT = right;
 64e:	88 e4       	ldi	r24, 0x48	; 72
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	2a 81       	ldd	r18, Y+2	; 0x02
 654:	fc 01       	movw	r30, r24
 656:	20 83       	st	Z, r18
}
 658:	0f 90       	pop	r0
 65a:	0f 90       	pop	r0
 65c:	df 91       	pop	r29
 65e:	cf 91       	pop	r28
 660:	08 95       	ret

00000662 <init_led>:
* /return    none
*
*
************************************************************************/
void init_led (void)
{
 662:	cf 93       	push	r28
 664:	df 93       	push	r29
 666:	cd b7       	in	r28, 0x3d	; 61
 668:	de b7       	in	r29, 0x3e	; 62
    DDRD |= (1 << PD7);                        // PD7 als Ausgang für Back LEDs
 66a:	81 e3       	ldi	r24, 0x31	; 49
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	21 e3       	ldi	r18, 0x31	; 49
 670:	30 e0       	ldi	r19, 0x00	; 0
 672:	f9 01       	movw	r30, r18
 674:	20 81       	ld	r18, Z
 676:	20 68       	ori	r18, 0x80	; 128
 678:	fc 01       	movw	r30, r24
 67a:	20 83       	st	Z, r18
    DDRD |= (1 << PD2);                        // PD2 als Ausgang für RG_LED
 67c:	81 e3       	ldi	r24, 0x31	; 49
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	21 e3       	ldi	r18, 0x31	; 49
 682:	30 e0       	ldi	r19, 0x00	; 0
 684:	f9 01       	movw	r30, r18
 686:	20 81       	ld	r18, Z
 688:	24 60       	ori	r18, 0x04	; 4
 68a:	fc 01       	movw	r30, r24
 68c:	20 83       	st	Z, r18
    DDRB |= (1 << PB0);                        // PB0 als Ausgang für RG_LED
 68e:	87 e3       	ldi	r24, 0x37	; 55
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	27 e3       	ldi	r18, 0x37	; 55
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	f9 01       	movw	r30, r18
 698:	20 81       	ld	r18, Z
 69a:	21 60       	ori	r18, 0x01	; 1
 69c:	fc 01       	movw	r30, r24
 69e:	20 83       	st	Z, r18
    DDRD |= (1 << PD6);
 6a0:	81 e3       	ldi	r24, 0x31	; 49
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	21 e3       	ldi	r18, 0x31	; 49
 6a6:	30 e0       	ldi	r19, 0x00	; 0
 6a8:	f9 01       	movw	r30, r18
 6aa:	20 81       	ld	r18, Z
 6ac:	20 64       	ori	r18, 0x40	; 64
 6ae:	fc 01       	movw	r30, r24
 6b0:	20 83       	st	Z, r18
    
    uart_puts("led init done..." _CR);
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	91 e0       	ldi	r25, 0x01	; 1
 6b6:	9b d1       	rcall	.+822    	; 0x9ee <uart_puts>
}
 6b8:	df 91       	pop	r29
 6ba:	cf 91       	pop	r28
 6bc:	08 95       	ret

000006be <status_led>:
* /return   none
*
*
************************************************************************/
void status_led( char colour)
{
 6be:	cf 93       	push	r28
 6c0:	df 93       	push	r29
 6c2:	1f 92       	push	r1
 6c4:	cd b7       	in	r28, 0x3d	; 61
 6c6:	de b7       	in	r29, 0x3e	; 62
 6c8:	89 83       	std	Y+1, r24	; 0x01
    if ( colour == _GREEN)
 6ca:	89 81       	ldd	r24, Y+1	; 0x01
 6cc:	81 30       	cpi	r24, 0x01	; 1
 6ce:	99 f4       	brne	.+38     	; 0x6f6 <status_led+0x38>
    {
        PORTB |=  ( 1 << PB0 );
 6d0:	88 e3       	ldi	r24, 0x38	; 56
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	28 e3       	ldi	r18, 0x38	; 56
 6d6:	30 e0       	ldi	r19, 0x00	; 0
 6d8:	f9 01       	movw	r30, r18
 6da:	20 81       	ld	r18, Z
 6dc:	21 60       	ori	r18, 0x01	; 1
 6de:	fc 01       	movw	r30, r24
 6e0:	20 83       	st	Z, r18
        PORTD &= ~( 1 << PD2 );
 6e2:	82 e3       	ldi	r24, 0x32	; 50
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	22 e3       	ldi	r18, 0x32	; 50
 6e8:	30 e0       	ldi	r19, 0x00	; 0
 6ea:	f9 01       	movw	r30, r18
 6ec:	20 81       	ld	r18, Z
 6ee:	2b 7f       	andi	r18, 0xFB	; 251
 6f0:	fc 01       	movw	r30, r24
 6f2:	20 83       	st	Z, r18
 6f4:	2f c0       	rjmp	.+94     	; 0x754 <status_led+0x96>
    }
     
    else if ( colour == _RED )
 6f6:	89 81       	ldd	r24, Y+1	; 0x01
 6f8:	82 30       	cpi	r24, 0x02	; 2
 6fa:	99 f4       	brne	.+38     	; 0x722 <status_led+0x64>
    {
        PORTB &= ~( 1 << PB0 );
 6fc:	88 e3       	ldi	r24, 0x38	; 56
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	28 e3       	ldi	r18, 0x38	; 56
 702:	30 e0       	ldi	r19, 0x00	; 0
 704:	f9 01       	movw	r30, r18
 706:	20 81       	ld	r18, Z
 708:	2e 7f       	andi	r18, 0xFE	; 254
 70a:	fc 01       	movw	r30, r24
 70c:	20 83       	st	Z, r18
        PORTD |=  ( 1 << PD2 );
 70e:	82 e3       	ldi	r24, 0x32	; 50
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	22 e3       	ldi	r18, 0x32	; 50
 714:	30 e0       	ldi	r19, 0x00	; 0
 716:	f9 01       	movw	r30, r18
 718:	20 81       	ld	r18, Z
 71a:	24 60       	ori	r18, 0x04	; 4
 71c:	fc 01       	movw	r30, r24
 71e:	20 83       	st	Z, r18
 720:	19 c0       	rjmp	.+50     	; 0x754 <status_led+0x96>
    }
     
    else if ( colour == _ORANGE )
 722:	89 81       	ldd	r24, Y+1	; 0x01
 724:	83 30       	cpi	r24, 0x03	; 3
 726:	99 f4       	brne	.+38     	; 0x74e <status_led+0x90>
    {
        PORTB |= ( 1 << PB0 );
 728:	88 e3       	ldi	r24, 0x38	; 56
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	28 e3       	ldi	r18, 0x38	; 56
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	f9 01       	movw	r30, r18
 732:	20 81       	ld	r18, Z
 734:	21 60       	ori	r18, 0x01	; 1
 736:	fc 01       	movw	r30, r24
 738:	20 83       	st	Z, r18
        PORTD |= ( 1 << PD2 );
 73a:	82 e3       	ldi	r24, 0x32	; 50
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	22 e3       	ldi	r18, 0x32	; 50
 740:	30 e0       	ldi	r19, 0x00	; 0
 742:	f9 01       	movw	r30, r18
 744:	20 81       	ld	r18, Z
 746:	24 60       	ori	r18, 0x04	; 4
 748:	fc 01       	movw	r30, r24
 74a:	20 83       	st	Z, r18
 74c:	03 c0       	rjmp	.+6      	; 0x754 <status_led+0x96>
    }
     
    else
    {
        uart_puts("falsche Eingabe bei status_led()");
 74e:	83 e1       	ldi	r24, 0x13	; 19
 750:	91 e0       	ldi	r25, 0x01	; 1
 752:	4d d1       	rcall	.+666    	; 0x9ee <uart_puts>
    }     
     
}
 754:	0f 90       	pop	r0
 756:	df 91       	pop	r29
 758:	cf 91       	pop	r28
 75a:	08 95       	ret

0000075c <line_led>:
* /return    none
*
*
************************************************************************/ 
void line_led(char status)
{
 75c:	cf 93       	push	r28
 75e:	df 93       	push	r29
 760:	1f 92       	push	r1
 762:	cd b7       	in	r28, 0x3d	; 61
 764:	de b7       	in	r29, 0x3e	; 62
 766:	89 83       	std	Y+1, r24	; 0x01
    if(status == _ON)
 768:	89 81       	ldd	r24, Y+1	; 0x01
 76a:	81 30       	cpi	r24, 0x01	; 1
 76c:	51 f4       	brne	.+20     	; 0x782 <line_led+0x26>
    {
        PORTD |= ( 1 << PD6 );
 76e:	82 e3       	ldi	r24, 0x32	; 50
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	22 e3       	ldi	r18, 0x32	; 50
 774:	30 e0       	ldi	r19, 0x00	; 0
 776:	f9 01       	movw	r30, r18
 778:	20 81       	ld	r18, Z
 77a:	20 64       	ori	r18, 0x40	; 64
 77c:	fc 01       	movw	r30, r24
 77e:	20 83       	st	Z, r18
 780:	10 c0       	rjmp	.+32     	; 0x7a2 <line_led+0x46>
    }
    
    else if( status == _OFF)
 782:	89 81       	ldd	r24, Y+1	; 0x01
 784:	88 23       	and	r24, r24
 786:	51 f4       	brne	.+20     	; 0x79c <line_led+0x40>
    {
        PORTD &= ~( 1 << PD6);
 788:	82 e3       	ldi	r24, 0x32	; 50
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	22 e3       	ldi	r18, 0x32	; 50
 78e:	30 e0       	ldi	r19, 0x00	; 0
 790:	f9 01       	movw	r30, r18
 792:	20 81       	ld	r18, Z
 794:	2f 7b       	andi	r18, 0xBF	; 191
 796:	fc 01       	movw	r30, r24
 798:	20 83       	st	Z, r18
 79a:	03 c0       	rjmp	.+6      	; 0x7a2 <line_led+0x46>
    }
    
    else
    {
        uart_puts("falsche Eingabe bei line_led()");
 79c:	84 e3       	ldi	r24, 0x34	; 52
 79e:	91 e0       	ldi	r25, 0x01	; 1
 7a0:	26 d1       	rcall	.+588    	; 0x9ee <uart_puts>
    }
 7a2:	0f 90       	pop	r0
 7a4:	df 91       	pop	r29
 7a6:	cf 91       	pop	r28
 7a8:	08 95       	ret

000007aa <init_switch>:
 * /return  none
 *
 *
 ************************************************************************/
 void init_switch(void)
 {
 7aa:	cf 93       	push	r28
 7ac:	df 93       	push	r29
 7ae:	cd b7       	in	r28, 0x3d	; 61
 7b0:	de b7       	in	r29, 0x3e	; 62
    DDRC &= ~( 1 << PC4);               // PC4 als Eingang definieren (ADC4)
 7b2:	84 e3       	ldi	r24, 0x34	; 52
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	24 e3       	ldi	r18, 0x34	; 52
 7b8:	30 e0       	ldi	r19, 0x00	; 0
 7ba:	f9 01       	movw	r30, r18
 7bc:	20 81       	ld	r18, Z
 7be:	2f 7e       	andi	r18, 0xEF	; 239
 7c0:	fc 01       	movw	r30, r24
 7c2:	20 83       	st	Z, r18
    DDRC &= ~( 1 << PD3);               // PD3 als Eingang definieren (INT1)
 7c4:	84 e3       	ldi	r24, 0x34	; 52
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	24 e3       	ldi	r18, 0x34	; 52
 7ca:	30 e0       	ldi	r19, 0x00	; 0
 7cc:	f9 01       	movw	r30, r18
 7ce:	20 81       	ld	r18, Z
 7d0:	27 7f       	andi	r18, 0xF7	; 247
 7d2:	fc 01       	movw	r30, r24
 7d4:	20 83       	st	Z, r18

    /** ITN1 definieren **/
    MCUCR |=  ( 1 << ISC11);             // Interrupt bei fallender Flanke an INT1
 7d6:	85 e5       	ldi	r24, 0x55	; 85
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	25 e5       	ldi	r18, 0x55	; 85
 7dc:	30 e0       	ldi	r19, 0x00	; 0
 7de:	f9 01       	movw	r30, r18
 7e0:	20 81       	ld	r18, Z
 7e2:	28 60       	ori	r18, 0x08	; 8
 7e4:	fc 01       	movw	r30, r24
 7e6:	20 83       	st	Z, r18
    MCUCR &= ~( 1 << ISC10);
 7e8:	85 e5       	ldi	r24, 0x55	; 85
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	25 e5       	ldi	r18, 0x55	; 85
 7ee:	30 e0       	ldi	r19, 0x00	; 0
 7f0:	f9 01       	movw	r30, r18
 7f2:	20 81       	ld	r18, Z
 7f4:	2b 7f       	andi	r18, 0xFB	; 251
 7f6:	fc 01       	movw	r30, r24
 7f8:	20 83       	st	Z, r18

    GICR |= ( 1 << INT1);               // Intterupt INT1 aktivieren
 7fa:	8b e5       	ldi	r24, 0x5B	; 91
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	2b e5       	ldi	r18, 0x5B	; 91
 800:	30 e0       	ldi	r19, 0x00	; 0
 802:	f9 01       	movw	r30, r18
 804:	20 81       	ld	r18, Z
 806:	20 68       	ori	r18, 0x80	; 128
 808:	fc 01       	movw	r30, r24
 80a:	20 83       	st	Z, r18

    uart_puts("switch init done...");
 80c:	83 e5       	ldi	r24, 0x53	; 83
 80e:	91 e0       	ldi	r25, 0x01	; 1
 810:	ee d0       	rcall	.+476    	; 0x9ee <uart_puts>
    uart_puts(_CR);
 812:	87 e6       	ldi	r24, 0x67	; 103
 814:	91 e0       	ldi	r25, 0x01	; 1
 816:	eb d0       	rcall	.+470    	; 0x9ee <uart_puts>

 }
 818:	df 91       	pop	r29
 81a:	cf 91       	pop	r28
 81c:	08 95       	ret

0000081e <get_switch_adc>:
 * /return  ADC Wert (uint16_t)
 *
 *
 ************************************************************************/
 uint16_t get_switch_adc(void)
 {
 81e:	cf 93       	push	r28
 820:	df 93       	push	r29
 822:	cd b7       	in	r28, 0x3d	; 61
 824:	de b7       	in	r29, 0x3e	; 62

    ADMUX &= ~( 1 << MUX0);
 826:	87 e2       	ldi	r24, 0x27	; 39
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	27 e2       	ldi	r18, 0x27	; 39
 82c:	30 e0       	ldi	r19, 0x00	; 0
 82e:	f9 01       	movw	r30, r18
 830:	20 81       	ld	r18, Z
 832:	2e 7f       	andi	r18, 0xFE	; 254
 834:	fc 01       	movw	r30, r24
 836:	20 83       	st	Z, r18
    ADMUX &= ~( 1 << MUX1);
 838:	87 e2       	ldi	r24, 0x27	; 39
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	27 e2       	ldi	r18, 0x27	; 39
 83e:	30 e0       	ldi	r19, 0x00	; 0
 840:	f9 01       	movw	r30, r18
 842:	20 81       	ld	r18, Z
 844:	2d 7f       	andi	r18, 0xFD	; 253
 846:	fc 01       	movw	r30, r24
 848:	20 83       	st	Z, r18
    ADMUX |=  ( 1 << MUX2);
 84a:	87 e2       	ldi	r24, 0x27	; 39
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	27 e2       	ldi	r18, 0x27	; 39
 850:	30 e0       	ldi	r19, 0x00	; 0
 852:	f9 01       	movw	r30, r18
 854:	20 81       	ld	r18, Z
 856:	24 60       	ori	r18, 0x04	; 4
 858:	fc 01       	movw	r30, r24
 85a:	20 83       	st	Z, r18
    ADMUX &= ~( 1 << MUX3);
 85c:	87 e2       	ldi	r24, 0x27	; 39
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	27 e2       	ldi	r18, 0x27	; 39
 862:	30 e0       	ldi	r19, 0x00	; 0
 864:	f9 01       	movw	r30, r18
 866:	20 81       	ld	r18, Z
 868:	27 7f       	andi	r18, 0xF7	; 247
 86a:	fc 01       	movw	r30, r24
 86c:	20 83       	st	Z, r18

    ADCSRA |= ( 1 << ADSC);                 // Starte ADC Messung
 86e:	86 e2       	ldi	r24, 0x26	; 38
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	26 e2       	ldi	r18, 0x26	; 38
 874:	30 e0       	ldi	r19, 0x00	; 0
 876:	f9 01       	movw	r30, r18
 878:	20 81       	ld	r18, Z
 87a:	20 64       	ori	r18, 0x40	; 64
 87c:	fc 01       	movw	r30, r24
 87e:	20 83       	st	Z, r18
    
    while( ADSC == 1)                       // Warte bis ADC-Messung beendet
 880:	00 00       	nop
    {
        //wait
    }
    
    return ADC;                             // gib ADC Wert zurück
 882:	84 e2       	ldi	r24, 0x24	; 36
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	fc 01       	movw	r30, r24
 888:	80 81       	ld	r24, Z
 88a:	91 81       	ldd	r25, Z+1	; 0x01
 }
 88c:	df 91       	pop	r29
 88e:	cf 91       	pop	r28
 890:	08 95       	ret

00000892 <__vector_2>:


 }

 ISR (INT1_vect)
 {
 892:	1f 92       	push	r1
 894:	0f 92       	push	r0
 896:	00 90 5f 00 	lds	r0, 0x005F
 89a:	0f 92       	push	r0
 89c:	11 24       	eor	r1, r1
 89e:	2f 93       	push	r18
 8a0:	3f 93       	push	r19
 8a2:	4f 93       	push	r20
 8a4:	5f 93       	push	r21
 8a6:	6f 93       	push	r22
 8a8:	7f 93       	push	r23
 8aa:	8f 93       	push	r24
 8ac:	9f 93       	push	r25
 8ae:	af 93       	push	r26
 8b0:	bf 93       	push	r27
 8b2:	ef 93       	push	r30
 8b4:	ff 93       	push	r31
 8b6:	cf 93       	push	r28
 8b8:	df 93       	push	r29
 8ba:	00 d0       	rcall	.+0      	; 0x8bc <__vector_2+0x2a>
 8bc:	cd b7       	in	r28, 0x3d	; 61
 8be:	de b7       	in	r29, 0x3e	; 62
    //get_switch();
    uint16_t buffer2 = 0;
 8c0:	1a 82       	std	Y+2, r1	; 0x02
 8c2:	19 82       	std	Y+1, r1	; 0x01

    buffer2 = get_switch_adc();
 8c4:	ac df       	rcall	.-168    	; 0x81e <get_switch_adc>
 8c6:	9a 83       	std	Y+2, r25	; 0x02
 8c8:	89 83       	std	Y+1, r24	; 0x01
    uart_puts("switch:");
 8ca:	8a e6       	ldi	r24, 0x6A	; 106
 8cc:	91 e0       	ldi	r25, 0x01	; 1
 8ce:	8f d0       	rcall	.+286    	; 0x9ee <uart_puts>
    uart_puti(buffer2);
 8d0:	89 81       	ldd	r24, Y+1	; 0x01
 8d2:	9a 81       	ldd	r25, Y+2	; 0x02
 8d4:	ac d0       	rcall	.+344    	; 0xa2e <uart_puti>
    uart_puts(_CR);
 8d6:	87 e6       	ldi	r24, 0x67	; 103
 8d8:	91 e0       	ldi	r25, 0x01	; 1
 8da:	89 d0       	rcall	.+274    	; 0x9ee <uart_puts>
 
 }
 8dc:	0f 90       	pop	r0
 8de:	0f 90       	pop	r0
 8e0:	df 91       	pop	r29
 8e2:	cf 91       	pop	r28
 8e4:	ff 91       	pop	r31
 8e6:	ef 91       	pop	r30
 8e8:	bf 91       	pop	r27
 8ea:	af 91       	pop	r26
 8ec:	9f 91       	pop	r25
 8ee:	8f 91       	pop	r24
 8f0:	7f 91       	pop	r23
 8f2:	6f 91       	pop	r22
 8f4:	5f 91       	pop	r21
 8f6:	4f 91       	pop	r20
 8f8:	3f 91       	pop	r19
 8fa:	2f 91       	pop	r18
 8fc:	0f 90       	pop	r0
 8fe:	00 92 5f 00 	sts	0x005F, r0
 902:	0f 90       	pop	r0
 904:	1f 90       	pop	r1
 906:	18 95       	reti

00000908 <init_timer>:
* /return   none
*
*
************************************************************************/
void init_timer(void)
{
 908:	cf 93       	push	r28
 90a:	df 93       	push	r29
 90c:	cd b7       	in	r28, 0x3d	; 61
 90e:	de b7       	in	r29, 0x3e	; 62
    TCCR0 |=  (1 << CS02) | (1 << CS00);                //prescaler 1024
 910:	83 e5       	ldi	r24, 0x53	; 83
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	23 e5       	ldi	r18, 0x53	; 83
 916:	30 e0       	ldi	r19, 0x00	; 0
 918:	f9 01       	movw	r30, r18
 91a:	20 81       	ld	r18, Z
 91c:	25 60       	ori	r18, 0x05	; 5
 91e:	fc 01       	movw	r30, r24
 920:	20 83       	st	Z, r18
                                                        // -> 8MHz/1024= 7,8Khz ~ 128µs
    TIMSK |= (1 << TOIE0);                                // enable Timer-Overflow interrupt
 922:	89 e5       	ldi	r24, 0x59	; 89
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	29 e5       	ldi	r18, 0x59	; 89
 928:	30 e0       	ldi	r19, 0x00	; 0
 92a:	f9 01       	movw	r30, r18
 92c:	20 81       	ld	r18, Z
 92e:	21 60       	ori	r18, 0x01	; 1
 930:	fc 01       	movw	r30, r24
 932:	20 83       	st	Z, r18
                                                        
    uart_puts("timer init done..." _CR);
 934:	82 e7       	ldi	r24, 0x72	; 114
 936:	91 e0       	ldi	r25, 0x01	; 1
 938:	5a d0       	rcall	.+180    	; 0x9ee <uart_puts>
}
 93a:	df 91       	pop	r29
 93c:	cf 91       	pop	r28
 93e:	08 95       	ret

00000940 <__vector_9>:
* /return   none
*
*
************************************************************************/
ISR (TIMER0_OVF_vect)
{
 940:	1f 92       	push	r1
 942:	0f 92       	push	r0
 944:	00 90 5f 00 	lds	r0, 0x005F
 948:	0f 92       	push	r0
 94a:	11 24       	eor	r1, r1
 94c:	cf 93       	push	r28
 94e:	df 93       	push	r29
 950:	cd b7       	in	r28, 0x3d	; 61
 952:	de b7       	in	r29, 0x3e	; 62
    //enter Code here    

}
 954:	df 91       	pop	r29
 956:	cf 91       	pop	r28
 958:	0f 90       	pop	r0
 95a:	00 92 5f 00 	sts	0x005F, r0
 95e:	0f 90       	pop	r0
 960:	1f 90       	pop	r1
 962:	18 95       	reti

00000964 <init_uart>:
* /return   none
*
*
************************************************************************/
void init_uart(void)
{
 964:	cf 93       	push	r28
 966:	df 93       	push	r29
 968:	1f 92       	push	r1
 96a:	cd b7       	in	r28, 0x3d	; 61
 96c:	de b7       	in	r29, 0x3e	; 62
        uint8_t ubrr;
        ubrr = _FOSC/16/_BAUD-1;
 96e:	8f ec       	ldi	r24, 0xCF	; 207
 970:	89 83       	std	Y+1, r24	; 0x01
        /* Set baud rate */
        UBRRH = (unsigned char)(ubrr>>8);
 972:	80 e4       	ldi	r24, 0x40	; 64
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	29 81       	ldd	r18, Y+1	; 0x01
 978:	22 2f       	mov	r18, r18
 97a:	30 e0       	ldi	r19, 0x00	; 0
 97c:	23 2f       	mov	r18, r19
 97e:	33 0f       	add	r19, r19
 980:	33 0b       	sbc	r19, r19
 982:	fc 01       	movw	r30, r24
 984:	20 83       	st	Z, r18
        UBRRL = (unsigned char)ubrr;
 986:	89 e2       	ldi	r24, 0x29	; 41
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	29 81       	ldd	r18, Y+1	; 0x01
 98c:	fc 01       	movw	r30, r24
 98e:	20 83       	st	Z, r18
        /* Enable receiver and transmitter */
        UCSRB |= (1<<TXEN);
 990:	8a e2       	ldi	r24, 0x2A	; 42
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	2a e2       	ldi	r18, 0x2A	; 42
 996:	30 e0       	ldi	r19, 0x00	; 0
 998:	f9 01       	movw	r30, r18
 99a:	20 81       	ld	r18, Z
 99c:	28 60       	ori	r18, 0x08	; 8
 99e:	fc 01       	movw	r30, r24
 9a0:	20 83       	st	Z, r18
        /* Set frame format: 8data, 1stop bit */
        UCSRC = (1<<URSEL) |(3<<UCSZ0);
 9a2:	80 e4       	ldi	r24, 0x40	; 64
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	26 e8       	ldi	r18, 0x86	; 134
 9a8:	fc 01       	movw	r30, r24
 9aa:	20 83       	st	Z, r18
        
        uart_puts("uart init done..." _CR);
 9ac:	87 e8       	ldi	r24, 0x87	; 135
 9ae:	91 e0       	ldi	r25, 0x01	; 1
 9b0:	1e d0       	rcall	.+60     	; 0x9ee <uart_puts>
}
 9b2:	0f 90       	pop	r0
 9b4:	df 91       	pop	r29
 9b6:	cf 91       	pop	r28
 9b8:	08 95       	ret

000009ba <uart_putc>:
* /return   none
*
*
************************************************************************/
void uart_putc(unsigned char data) 
{    
 9ba:	cf 93       	push	r28
 9bc:	df 93       	push	r29
 9be:	1f 92       	push	r1
 9c0:	cd b7       	in	r28, 0x3d	; 61
 9c2:	de b7       	in	r29, 0x3e	; 62
 9c4:	89 83       	std	Y+1, r24	; 0x01
    /* Wait for empty transmit buffer */
    while ( !( UCSRA & (1<<UDRE)) )
 9c6:	00 00       	nop
 9c8:	8b e2       	ldi	r24, 0x2B	; 43
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	fc 01       	movw	r30, r24
 9ce:	80 81       	ld	r24, Z
 9d0:	88 2f       	mov	r24, r24
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	80 72       	andi	r24, 0x20	; 32
 9d6:	99 27       	eor	r25, r25
 9d8:	00 97       	sbiw	r24, 0x00	; 0
 9da:	b1 f3       	breq	.-20     	; 0x9c8 <uart_putc+0xe>
    ;
    /* Put data into buffer, sends the data */
    UDR = data;
 9dc:	8c e2       	ldi	r24, 0x2C	; 44
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	29 81       	ldd	r18, Y+1	; 0x01
 9e2:	fc 01       	movw	r30, r24
 9e4:	20 83       	st	Z, r18
}
 9e6:	0f 90       	pop	r0
 9e8:	df 91       	pop	r29
 9ea:	cf 91       	pop	r28
 9ec:	08 95       	ret

000009ee <uart_puts>:
*
* /example    uart_puts("Test");
*
************************************************************************/
void uart_puts (const char *s)
{
 9ee:	cf 93       	push	r28
 9f0:	df 93       	push	r29
 9f2:	00 d0       	rcall	.+0      	; 0x9f4 <uart_puts+0x6>
 9f4:	cd b7       	in	r28, 0x3d	; 61
 9f6:	de b7       	in	r29, 0x3e	; 62
 9f8:	9a 83       	std	Y+2, r25	; 0x02
 9fa:	89 83       	std	Y+1, r24	; 0x01
    do
    {
        uart_putc (*s);
 9fc:	89 81       	ldd	r24, Y+1	; 0x01
 9fe:	9a 81       	ldd	r25, Y+2	; 0x02
 a00:	fc 01       	movw	r30, r24
 a02:	80 81       	ld	r24, Z
 a04:	da df       	rcall	.-76     	; 0x9ba <uart_putc>
    }
    while (*s++);
 a06:	89 81       	ldd	r24, Y+1	; 0x01
 a08:	9a 81       	ldd	r25, Y+2	; 0x02
 a0a:	fc 01       	movw	r30, r24
 a0c:	80 81       	ld	r24, Z
 a0e:	21 e0       	ldi	r18, 0x01	; 1
 a10:	88 23       	and	r24, r24
 a12:	09 f4       	brne	.+2      	; 0xa16 <uart_puts+0x28>
 a14:	20 e0       	ldi	r18, 0x00	; 0
 a16:	89 81       	ldd	r24, Y+1	; 0x01
 a18:	9a 81       	ldd	r25, Y+2	; 0x02
 a1a:	01 96       	adiw	r24, 0x01	; 1
 a1c:	9a 83       	std	Y+2, r25	; 0x02
 a1e:	89 83       	std	Y+1, r24	; 0x01
 a20:	22 23       	and	r18, r18
 a22:	61 f7       	brne	.-40     	; 0x9fc <uart_puts+0xe>
}
 a24:	0f 90       	pop	r0
 a26:	0f 90       	pop	r0
 a28:	df 91       	pop	r29
 a2a:	cf 91       	pop	r28
 a2c:	08 95       	ret

00000a2e <uart_puti>:
*
*           uart_puti(i);
*
************************************************************************/
void uart_puti( uint16_t data )
{
 a2e:	cf 93       	push	r28
 a30:	df 93       	push	r29
 a32:	cd b7       	in	r28, 0x3d	; 61
 a34:	de b7       	in	r29, 0x3e	; 62
 a36:	28 97       	sbiw	r28, 0x08	; 8
 a38:	0f b6       	in	r0, 0x3f	; 63
 a3a:	f8 94       	cli
 a3c:	de bf       	out	0x3e, r29	; 62
 a3e:	0f be       	out	0x3f, r0	; 63
 a40:	cd bf       	out	0x3d, r28	; 61
 a42:	98 87       	std	Y+8, r25	; 0x08
 a44:	8f 83       	std	Y+7, r24	; 0x07
    char buffer[6];
    itoa(data, buffer, 10);
 a46:	8f 81       	ldd	r24, Y+7	; 0x07
 a48:	98 85       	ldd	r25, Y+8	; 0x08
 a4a:	4a e0       	ldi	r20, 0x0A	; 10
 a4c:	50 e0       	ldi	r21, 0x00	; 0
 a4e:	9e 01       	movw	r18, r28
 a50:	2f 5f       	subi	r18, 0xFF	; 255
 a52:	3f 4f       	sbci	r19, 0xFF	; 255
 a54:	b9 01       	movw	r22, r18
 a56:	33 d0       	rcall	.+102    	; 0xabe <itoa>
    uart_puts(buffer);
 a58:	ce 01       	movw	r24, r28
 a5a:	01 96       	adiw	r24, 0x01	; 1
 a5c:	c8 df       	rcall	.-112    	; 0x9ee <uart_puts>
}
 a5e:	28 96       	adiw	r28, 0x08	; 8
 a60:	0f b6       	in	r0, 0x3f	; 63
 a62:	f8 94       	cli
 a64:	de bf       	out	0x3e, r29	; 62
 a66:	0f be       	out	0x3f, r0	; 63
 a68:	cd bf       	out	0x3d, r28	; 61
 a6a:	df 91       	pop	r29
 a6c:	cf 91       	pop	r28
 a6e:	08 95       	ret

00000a70 <__divmodhi4>:
 a70:	97 fb       	bst	r25, 7
 a72:	07 2e       	mov	r0, r23
 a74:	16 f4       	brtc	.+4      	; 0xa7a <__divmodhi4+0xa>
 a76:	00 94       	com	r0
 a78:	06 d0       	rcall	.+12     	; 0xa86 <__divmodhi4_neg1>
 a7a:	77 fd       	sbrc	r23, 7
 a7c:	08 d0       	rcall	.+16     	; 0xa8e <__divmodhi4_neg2>
 a7e:	0b d0       	rcall	.+22     	; 0xa96 <__udivmodhi4>
 a80:	07 fc       	sbrc	r0, 7
 a82:	05 d0       	rcall	.+10     	; 0xa8e <__divmodhi4_neg2>
 a84:	3e f4       	brtc	.+14     	; 0xa94 <__divmodhi4_exit>

00000a86 <__divmodhi4_neg1>:
 a86:	90 95       	com	r25
 a88:	81 95       	neg	r24
 a8a:	9f 4f       	sbci	r25, 0xFF	; 255
 a8c:	08 95       	ret

00000a8e <__divmodhi4_neg2>:
 a8e:	70 95       	com	r23
 a90:	61 95       	neg	r22
 a92:	7f 4f       	sbci	r23, 0xFF	; 255

00000a94 <__divmodhi4_exit>:
 a94:	08 95       	ret

00000a96 <__udivmodhi4>:
 a96:	aa 1b       	sub	r26, r26
 a98:	bb 1b       	sub	r27, r27
 a9a:	51 e1       	ldi	r21, 0x11	; 17
 a9c:	07 c0       	rjmp	.+14     	; 0xaac <__udivmodhi4_ep>

00000a9e <__udivmodhi4_loop>:
 a9e:	aa 1f       	adc	r26, r26
 aa0:	bb 1f       	adc	r27, r27
 aa2:	a6 17       	cp	r26, r22
 aa4:	b7 07       	cpc	r27, r23
 aa6:	10 f0       	brcs	.+4      	; 0xaac <__udivmodhi4_ep>
 aa8:	a6 1b       	sub	r26, r22
 aaa:	b7 0b       	sbc	r27, r23

00000aac <__udivmodhi4_ep>:
 aac:	88 1f       	adc	r24, r24
 aae:	99 1f       	adc	r25, r25
 ab0:	5a 95       	dec	r21
 ab2:	a9 f7       	brne	.-22     	; 0xa9e <__udivmodhi4_loop>
 ab4:	80 95       	com	r24
 ab6:	90 95       	com	r25
 ab8:	bc 01       	movw	r22, r24
 aba:	cd 01       	movw	r24, r26
 abc:	08 95       	ret

00000abe <itoa>:
 abe:	fb 01       	movw	r30, r22
 ac0:	9f 01       	movw	r18, r30
 ac2:	e8 94       	clt
 ac4:	42 30       	cpi	r20, 0x02	; 2
 ac6:	bc f0       	brlt	.+46     	; 0xaf6 <itoa+0x38>
 ac8:	45 32       	cpi	r20, 0x25	; 37
 aca:	ac f4       	brge	.+42     	; 0xaf6 <itoa+0x38>
 acc:	4a 30       	cpi	r20, 0x0A	; 10
 ace:	29 f4       	brne	.+10     	; 0xada <itoa+0x1c>
 ad0:	97 fb       	bst	r25, 7
 ad2:	1e f4       	brtc	.+6      	; 0xada <itoa+0x1c>
 ad4:	90 95       	com	r25
 ad6:	81 95       	neg	r24
 ad8:	9f 4f       	sbci	r25, 0xFF	; 255
 ada:	64 2f       	mov	r22, r20
 adc:	77 27       	eor	r23, r23
 ade:	db df       	rcall	.-74     	; 0xa96 <__udivmodhi4>
 ae0:	80 5d       	subi	r24, 0xD0	; 208
 ae2:	8a 33       	cpi	r24, 0x3A	; 58
 ae4:	0c f0       	brlt	.+2      	; 0xae8 <itoa+0x2a>
 ae6:	89 5d       	subi	r24, 0xD9	; 217
 ae8:	81 93       	st	Z+, r24
 aea:	cb 01       	movw	r24, r22
 aec:	00 97       	sbiw	r24, 0x00	; 0
 aee:	a9 f7       	brne	.-22     	; 0xada <itoa+0x1c>
 af0:	16 f4       	brtc	.+4      	; 0xaf6 <itoa+0x38>
 af2:	5d e2       	ldi	r21, 0x2D	; 45
 af4:	51 93       	st	Z+, r21
 af6:	10 82       	st	Z, r1
 af8:	c9 01       	movw	r24, r18
 afa:	00 c0       	rjmp	.+0      	; 0xafc <strrev>

00000afc <strrev>:
 afc:	dc 01       	movw	r26, r24
 afe:	fc 01       	movw	r30, r24
 b00:	67 2f       	mov	r22, r23
 b02:	71 91       	ld	r23, Z+
 b04:	77 23       	and	r23, r23
 b06:	e1 f7       	brne	.-8      	; 0xb00 <strrev+0x4>
 b08:	32 97       	sbiw	r30, 0x02	; 2
 b0a:	04 c0       	rjmp	.+8      	; 0xb14 <strrev+0x18>
 b0c:	7c 91       	ld	r23, X
 b0e:	6d 93       	st	X+, r22
 b10:	70 83       	st	Z, r23
 b12:	62 91       	ld	r22, -Z
 b14:	ae 17       	cp	r26, r30
 b16:	bf 07       	cpc	r27, r31
 b18:	c8 f3       	brcs	.-14     	; 0xb0c <strrev+0x10>
 b1a:	08 95       	ret

00000b1c <_exit>:
 b1c:	f8 94       	cli

00000b1e <__stop_program>:
 b1e:	ff cf       	rjmp	.-2      	; 0xb1e <__stop_program>
