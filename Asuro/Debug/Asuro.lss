
Asuro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000794  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  00000794  00000828  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800174  00800174  0000093c  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  0000093c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000183  00000000  00000000  00001290  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001413  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001b0  00000000  00000000  00001442  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000090a  00000000  00000000  000015f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000054d  00000000  00000000  00001efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000097d  00000000  00000000  00002449  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000418  00000000  00000000  00002dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002b9  00000000  00000000  000031e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000070d  00000000  00000000  00003499  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000110  00000000  00000000  00003ba6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
* /return    uint16 Wert des ADCs
*
*
************************************************************************/
uint16_t get_od_adc(char side)
{
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	5b c2       	rjmp	.+1206   	; 0x4bc <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
    PORTD |= ( 1 << PD7);               // PD7 auf HIGH -> keine LED Steuerung
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	e3 c2       	rjmp	.+1478   	; 0x5da <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
    
    
    if( side == _RIGHT)                 // aktivieren des rechten ADC
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
    {
    ADMUX &= ~( 1 << MUX0);
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	11 e0       	ldi	r17, 0x01	; 1
  34:	a0 e6       	ldi	r26, 0x60	; 96
    ADMUX &= ~( 1 << MUX1);
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e9       	ldi	r30, 0x94	; 148
  3a:	f7 e0       	ldi	r31, 0x07	; 7
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 37       	cpi	r26, 0x74	; 116
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
    ADMUX &= ~( 1 << MUX2);
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	a4 e7       	ldi	r26, 0x74	; 116
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	aa 37       	cpi	r26, 0x7A	; 122
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	27 d0       	rcall	.+78     	; 0xa8 <main>
    ADMUX &= ~( 1 << MUX3);
  5a:	9a c3       	rjmp	.+1844   	; 0x790 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <init_adc>:
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
  62:	cd b7       	in	r28, 0x3d	; 61
  64:	de b7       	in	r29, 0x3e	; 62
  66:	87 e2       	ldi	r24, 0x27	; 39
  68:	90 e0       	ldi	r25, 0x00	; 0
  6a:	27 e2       	ldi	r18, 0x27	; 39
  6c:	30 e0       	ldi	r19, 0x00	; 0
    }
    
    else if ( side == _LEFT)            // aktivieren des linken ADC
  6e:	f9 01       	movw	r30, r18
  70:	20 81       	ld	r18, Z
  72:	20 64       	ori	r18, 0x40	; 64
    {
    ADMUX |= ( 1 << MUX0);
  74:	fc 01       	movw	r30, r24
  76:	20 83       	st	Z, r18
  78:	86 e2       	ldi	r24, 0x26	; 38
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	26 e2       	ldi	r18, 0x26	; 38
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	f9 01       	movw	r30, r18
  82:	20 81       	ld	r18, Z
  84:	20 68       	ori	r18, 0x80	; 128
    ADMUX &= ~( 1 << MUX1);
  86:	fc 01       	movw	r30, r24
  88:	20 83       	st	Z, r18
  8a:	86 e2       	ldi	r24, 0x26	; 38
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	26 e2       	ldi	r18, 0x26	; 38
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	f9 01       	movw	r30, r18
  94:	20 81       	ld	r18, Z
  96:	25 60       	ori	r18, 0x05	; 5
    ADMUX &= ~( 1 << MUX2);
  98:	fc 01       	movw	r30, r24
  9a:	20 83       	st	Z, r18
  9c:	80 e6       	ldi	r24, 0x60	; 96
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	f3 d2       	rcall	.+1510   	; 0x688 <uart_puts>
  a2:	df 91       	pop	r29
  a4:	cf 91       	pop	r28
  a6:	08 95       	ret

000000a8 <main>:
  a8:	cf 93       	push	r28
    ADMUX &= ~( 1 << MUX3);        
  aa:	df 93       	push	r29
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
  b0:	a6 d2       	rcall	.+1356   	; 0x5fe <init_uart>
  b2:	ec d0       	rcall	.+472    	; 0x28c <init_led>
  b4:	a2 d0       	rcall	.+324    	; 0x1fa <init_motor>
  b6:	d3 df       	rcall	.-90     	; 0x5e <init_adc>
  b8:	74 d2       	rcall	.+1256   	; 0x5a2 <init_timer>
  ba:	0b d0       	rcall	.+22     	; 0xd2 <init_line>
    }      
      
    ADCSRA |= ( 1 << ADSC);             // Starte ADC Messung    
  bc:	8b d1       	rcall	.+790    	; 0x3d4 <init_switch>
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	13 d1       	rcall	.+550    	; 0x2e8 <status_led>
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	60 d1       	rcall	.+704    	; 0x386 <line_led>
  c6:	83 e7       	ldi	r24, 0x73	; 115
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	de d2       	rcall	.+1468   	; 0x688 <uart_puts>
  cc:	78 94       	sei
    
    while( ADSC == 1)                   // Warte bis ADC-Messung beendet
  ce:	2e d2       	rcall	.+1116   	; 0x52c <test>
    {
        //wait
    }
        
    return ADC;                         // gib ADC Wert zurück
  d0:	fe cf       	rjmp	.-4      	; 0xce <main+0x26>

000000d2 <init_line>:
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
}
  da:	84 e3       	ldi	r24, 0x34	; 52
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	24 e3       	ldi	r18, 0x34	; 52
  e0:	30 e0       	ldi	r19, 0x00	; 0
* /return   none
*
************************************************************************/
void init_line(void)
{
    DDRC &= ~( 1 << PC3);                   // Pin als Eingang
  e2:	f9 01       	movw	r30, r18
  e4:	20 81       	ld	r18, Z
  e6:	27 7f       	andi	r18, 0xF7	; 247
  e8:	fc 01       	movw	r30, r24
  ea:	20 83       	st	Z, r18
    DDRC &= ~( 1 << PC2);                   // Pin als Eingang
  ec:	84 e3       	ldi	r24, 0x34	; 52
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	24 e3       	ldi	r18, 0x34	; 52
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	f9 01       	movw	r30, r18
  f6:	20 81       	ld	r18, Z
  f8:	2b 7f       	andi	r18, 0xFB	; 251
  fa:	fc 01       	movw	r30, r24
  fc:	20 83       	st	Z, r18

    uart_puts("line init done...");
  fe:	87 e8       	ldi	r24, 0x87	; 135
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	c2 d2       	rcall	.+1412   	; 0x688 <uart_puts>
    uart_puts(_CR);
 104:	89 e9       	ldi	r24, 0x99	; 153
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	bf d2       	rcall	.+1406   	; 0x688 <uart_puts>
}
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <get_line_adc>:
*           ...
*           65536   max. hell
*
************************************************************************/
uint16_t get_line_adc(char side)
{    
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	00 d0       	rcall	.+0      	; 0x116 <get_line_adc+0x6>
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
 11a:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i;

    for ( i=0; i<255; i++)
 11c:	19 82       	std	Y+1, r1	; 0x01
 11e:	03 c0       	rjmp	.+6      	; 0x126 <get_line_adc+0x16>
 120:	89 81       	ldd	r24, Y+1	; 0x01
 122:	8f 5f       	subi	r24, 0xFF	; 255
 124:	89 83       	std	Y+1, r24	; 0x01
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	8f 3f       	cpi	r24, 0xFF	; 255
 12a:	d1 f7       	brne	.-12     	; 0x120 <get_line_adc+0x10>
    {
        //Warteschleife für Kanalwechsel
    }

    if (side == _LEFT)                       // Auswahl ADC für den linken Liniensensor
 12c:	8a 81       	ldd	r24, Y+2	; 0x02
 12e:	88 23       	and	r24, r24
 130:	29 f5       	brne	.+74     	; 0x17c <get_line_adc+0x6c>
    {
        ADMUX |=  ( 1 << MUX0);
 132:	87 e2       	ldi	r24, 0x27	; 39
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	27 e2       	ldi	r18, 0x27	; 39
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	f9 01       	movw	r30, r18
 13c:	20 81       	ld	r18, Z
 13e:	21 60       	ori	r18, 0x01	; 1
 140:	fc 01       	movw	r30, r24
 142:	20 83       	st	Z, r18
        ADMUX |=  ( 1 << MUX1);
 144:	87 e2       	ldi	r24, 0x27	; 39
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	27 e2       	ldi	r18, 0x27	; 39
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	f9 01       	movw	r30, r18
 14e:	20 81       	ld	r18, Z
 150:	22 60       	ori	r18, 0x02	; 2
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
        ADMUX &= ~( 1 << MUX2);
 156:	87 e2       	ldi	r24, 0x27	; 39
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	27 e2       	ldi	r18, 0x27	; 39
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	f9 01       	movw	r30, r18
 160:	20 81       	ld	r18, Z
 162:	2b 7f       	andi	r18, 0xFB	; 251
 164:	fc 01       	movw	r30, r24
 166:	20 83       	st	Z, r18
        ADMUX &= ~( 1 << MUX3);
 168:	87 e2       	ldi	r24, 0x27	; 39
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	27 e2       	ldi	r18, 0x27	; 39
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	f9 01       	movw	r30, r18
 172:	20 81       	ld	r18, Z
 174:	27 7f       	andi	r18, 0xF7	; 247
 176:	fc 01       	movw	r30, r24
 178:	20 83       	st	Z, r18
 17a:	2b c0       	rjmp	.+86     	; 0x1d2 <get_line_adc+0xc2>
    }
    
    else if (side == _RIGHT)                 // Auswahl ADC für den rechten Liniensensor
 17c:	8a 81       	ldd	r24, Y+2	; 0x02
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	29 f5       	brne	.+74     	; 0x1cc <get_line_adc+0xbc>
    {
        ADMUX &= ~( 1 << MUX0);
 182:	87 e2       	ldi	r24, 0x27	; 39
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	27 e2       	ldi	r18, 0x27	; 39
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	f9 01       	movw	r30, r18
 18c:	20 81       	ld	r18, Z
 18e:	2e 7f       	andi	r18, 0xFE	; 254
 190:	fc 01       	movw	r30, r24
 192:	20 83       	st	Z, r18
        ADMUX |=  ( 1 << MUX1);
 194:	87 e2       	ldi	r24, 0x27	; 39
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	27 e2       	ldi	r18, 0x27	; 39
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	f9 01       	movw	r30, r18
 19e:	20 81       	ld	r18, Z
 1a0:	22 60       	ori	r18, 0x02	; 2
 1a2:	fc 01       	movw	r30, r24
 1a4:	20 83       	st	Z, r18
        ADMUX &= ~( 1 << MUX2);
 1a6:	87 e2       	ldi	r24, 0x27	; 39
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	27 e2       	ldi	r18, 0x27	; 39
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	f9 01       	movw	r30, r18
 1b0:	20 81       	ld	r18, Z
 1b2:	2b 7f       	andi	r18, 0xFB	; 251
 1b4:	fc 01       	movw	r30, r24
 1b6:	20 83       	st	Z, r18
        ADMUX &= ~( 1 << MUX3);
 1b8:	87 e2       	ldi	r24, 0x27	; 39
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	27 e2       	ldi	r18, 0x27	; 39
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	f9 01       	movw	r30, r18
 1c2:	20 81       	ld	r18, Z
 1c4:	27 7f       	andi	r18, 0xF7	; 247
 1c6:	fc 01       	movw	r30, r24
 1c8:	20 83       	st	Z, r18
 1ca:	03 c0       	rjmp	.+6      	; 0x1d2 <get_line_adc+0xc2>
    }

    else                                    // Ungültige Auswahl
    {
        uart_puts("kein gültiger ADC Kanal in get_line_adc()");
 1cc:	8c e9       	ldi	r24, 0x9C	; 156
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	5b d2       	rcall	.+1206   	; 0x688 <uart_puts>
    }



     ADCSRA |= ( 1 << ADSC);                 // Starte ADC Messung
 1d2:	86 e2       	ldi	r24, 0x26	; 38
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	26 e2       	ldi	r18, 0x26	; 38
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	f9 01       	movw	r30, r18
 1dc:	20 81       	ld	r18, Z
 1de:	20 64       	ori	r18, 0x40	; 64
 1e0:	fc 01       	movw	r30, r24
 1e2:	20 83       	st	Z, r18
            
    while( ADSC == 1)                       // Warte bis ADC-Messung beendet
 1e4:	00 00       	nop
    {
        //wait
    }
        
    return ADC;                             // gib ADC Wert zurück
 1e6:	84 e2       	ldi	r24, 0x24	; 36
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	fc 01       	movw	r30, r24
 1ec:	80 81       	ld	r24, Z
 1ee:	91 81       	ldd	r25, Z+1	; 0x01
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <init_motor>:
* /return   none
*
*
************************************************************************/
void init_motor(void)
{
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
    /** IOs definieren **/
    DDRD |= (1 << PD4) | (1 << PD5);                // Pins für linken Motor als Ausgänge
 202:	81 e3       	ldi	r24, 0x31	; 49
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	21 e3       	ldi	r18, 0x31	; 49
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	f9 01       	movw	r30, r18
 20c:	20 81       	ld	r18, Z
 20e:	20 63       	ori	r18, 0x30	; 48
 210:	fc 01       	movw	r30, r24
 212:	20 83       	st	Z, r18
    DDRB |= (1 << PB4) | (1 << PB5);                // Pins für rechten Motor als Ausgänge
 214:	87 e3       	ldi	r24, 0x37	; 55
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	27 e3       	ldi	r18, 0x37	; 55
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	f9 01       	movw	r30, r18
 21e:	20 81       	ld	r18, Z
 220:	20 63       	ori	r18, 0x30	; 48
 222:	fc 01       	movw	r30, r24
 224:	20 83       	st	Z, r18
    DDRB |= (1 << PB1) | (1 << PB2);                // PWM Pins als Ausgänge
 226:	87 e3       	ldi	r24, 0x37	; 55
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	27 e3       	ldi	r18, 0x37	; 55
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	f9 01       	movw	r30, r18
 230:	20 81       	ld	r18, Z
 232:	26 60       	ori	r18, 0x06	; 6
 234:	fc 01       	movw	r30, r24
 236:	20 83       	st	Z, r18
    
    /** Motor stoppen **/
    PORTD |= (1 << PD4) | (1 << PD5);               // Ausgänge auf HIGH -> Motor blockiert
 238:	82 e3       	ldi	r24, 0x32	; 50
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	22 e3       	ldi	r18, 0x32	; 50
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	f9 01       	movw	r30, r18
 242:	20 81       	ld	r18, Z
 244:	20 63       	ori	r18, 0x30	; 48
 246:	fc 01       	movw	r30, r24
 248:	20 83       	st	Z, r18
    PORTB |= (1 << PB4) | (1 << PB5);               // Ausgänge auf HIGH -> Motor blockiert
 24a:	88 e3       	ldi	r24, 0x38	; 56
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	28 e3       	ldi	r18, 0x38	; 56
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	f9 01       	movw	r30, r18
 254:	20 81       	ld	r18, Z
 256:	20 63       	ori	r18, 0x30	; 48
 258:	fc 01       	movw	r30, r24
 25a:	20 83       	st	Z, r18
        
    /** Timer konfigurieren **/
    TCCR1A |= (1 << COM1A1) | (1 << WGM10) | (1 << COM1B1);
 25c:	8f e4       	ldi	r24, 0x4F	; 79
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	2f e4       	ldi	r18, 0x4F	; 79
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	f9 01       	movw	r30, r18
 266:	20 81       	ld	r18, Z
 268:	21 6a       	ori	r18, 0xA1	; 161
 26a:	fc 01       	movw	r30, r24
 26c:	20 83       	st	Z, r18
    TCCR1B |= (1 << CS11);
 26e:	8e e4       	ldi	r24, 0x4E	; 78
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	2e e4       	ldi	r18, 0x4E	; 78
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	f9 01       	movw	r30, r18
 278:	20 81       	ld	r18, Z
 27a:	22 60       	ori	r18, 0x02	; 2
 27c:	fc 01       	movw	r30, r24
 27e:	20 83       	st	Z, r18
    
    uart_puts("motor init done..." _CR);
 280:	86 ec       	ldi	r24, 0xC6	; 198
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	01 d2       	rcall	.+1026   	; 0x688 <uart_puts>
}
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <init_led>:
* /return    none
*
*
************************************************************************/
void init_led (void)
{
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
    DDRD |= (1 << PD7);                        // PD7 als Ausgang für Back LEDs
 294:	81 e3       	ldi	r24, 0x31	; 49
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	21 e3       	ldi	r18, 0x31	; 49
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	f9 01       	movw	r30, r18
 29e:	20 81       	ld	r18, Z
 2a0:	20 68       	ori	r18, 0x80	; 128
 2a2:	fc 01       	movw	r30, r24
 2a4:	20 83       	st	Z, r18
    DDRD |= (1 << PD2);                        // PD2 als Ausgang für RG_LED
 2a6:	81 e3       	ldi	r24, 0x31	; 49
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	21 e3       	ldi	r18, 0x31	; 49
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	f9 01       	movw	r30, r18
 2b0:	20 81       	ld	r18, Z
 2b2:	24 60       	ori	r18, 0x04	; 4
 2b4:	fc 01       	movw	r30, r24
 2b6:	20 83       	st	Z, r18
    DDRB |= (1 << PB0);                        // PB0 als Ausgang für RG_LED
 2b8:	87 e3       	ldi	r24, 0x37	; 55
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	27 e3       	ldi	r18, 0x37	; 55
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	f9 01       	movw	r30, r18
 2c2:	20 81       	ld	r18, Z
 2c4:	21 60       	ori	r18, 0x01	; 1
 2c6:	fc 01       	movw	r30, r24
 2c8:	20 83       	st	Z, r18
    DDRD |= (1 << PD6);
 2ca:	81 e3       	ldi	r24, 0x31	; 49
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	21 e3       	ldi	r18, 0x31	; 49
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	f9 01       	movw	r30, r18
 2d4:	20 81       	ld	r18, Z
 2d6:	20 64       	ori	r18, 0x40	; 64
 2d8:	fc 01       	movw	r30, r24
 2da:	20 83       	st	Z, r18
    
    uart_puts("led init done..." _CR);
 2dc:	8b ed       	ldi	r24, 0xDB	; 219
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	d3 d1       	rcall	.+934    	; 0x688 <uart_puts>
}
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	08 95       	ret

000002e8 <status_led>:
* /return   none
*
*
************************************************************************/
void status_led( char colour)
{
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	1f 92       	push	r1
 2ee:	cd b7       	in	r28, 0x3d	; 61
 2f0:	de b7       	in	r29, 0x3e	; 62
 2f2:	89 83       	std	Y+1, r24	; 0x01
    if ( colour == _GREEN)
 2f4:	89 81       	ldd	r24, Y+1	; 0x01
 2f6:	81 30       	cpi	r24, 0x01	; 1
 2f8:	99 f4       	brne	.+38     	; 0x320 <status_led+0x38>
    {
        PORTB |=  ( 1 << PB0 );
 2fa:	88 e3       	ldi	r24, 0x38	; 56
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	28 e3       	ldi	r18, 0x38	; 56
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	f9 01       	movw	r30, r18
 304:	20 81       	ld	r18, Z
 306:	21 60       	ori	r18, 0x01	; 1
 308:	fc 01       	movw	r30, r24
 30a:	20 83       	st	Z, r18
        PORTD &= ~( 1 << PD2 );
 30c:	82 e3       	ldi	r24, 0x32	; 50
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	22 e3       	ldi	r18, 0x32	; 50
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	f9 01       	movw	r30, r18
 316:	20 81       	ld	r18, Z
 318:	2b 7f       	andi	r18, 0xFB	; 251
 31a:	fc 01       	movw	r30, r24
 31c:	20 83       	st	Z, r18
 31e:	2f c0       	rjmp	.+94     	; 0x37e <status_led+0x96>
    }
     
    else if ( colour == _RED )
 320:	89 81       	ldd	r24, Y+1	; 0x01
 322:	82 30       	cpi	r24, 0x02	; 2
 324:	99 f4       	brne	.+38     	; 0x34c <status_led+0x64>
    {
        PORTB &= ~( 1 << PB0 );
 326:	88 e3       	ldi	r24, 0x38	; 56
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	28 e3       	ldi	r18, 0x38	; 56
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	f9 01       	movw	r30, r18
 330:	20 81       	ld	r18, Z
 332:	2e 7f       	andi	r18, 0xFE	; 254
 334:	fc 01       	movw	r30, r24
 336:	20 83       	st	Z, r18
        PORTD |=  ( 1 << PD2 );
 338:	82 e3       	ldi	r24, 0x32	; 50
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	22 e3       	ldi	r18, 0x32	; 50
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	f9 01       	movw	r30, r18
 342:	20 81       	ld	r18, Z
 344:	24 60       	ori	r18, 0x04	; 4
 346:	fc 01       	movw	r30, r24
 348:	20 83       	st	Z, r18
 34a:	19 c0       	rjmp	.+50     	; 0x37e <status_led+0x96>
    }
     
    else if ( colour == _ORANGE )
 34c:	89 81       	ldd	r24, Y+1	; 0x01
 34e:	83 30       	cpi	r24, 0x03	; 3
 350:	99 f4       	brne	.+38     	; 0x378 <status_led+0x90>
    {
        PORTB |= ( 1 << PB0 );
 352:	88 e3       	ldi	r24, 0x38	; 56
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	28 e3       	ldi	r18, 0x38	; 56
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	f9 01       	movw	r30, r18
 35c:	20 81       	ld	r18, Z
 35e:	21 60       	ori	r18, 0x01	; 1
 360:	fc 01       	movw	r30, r24
 362:	20 83       	st	Z, r18
        PORTD |= ( 1 << PD2 );
 364:	82 e3       	ldi	r24, 0x32	; 50
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	22 e3       	ldi	r18, 0x32	; 50
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	f9 01       	movw	r30, r18
 36e:	20 81       	ld	r18, Z
 370:	24 60       	ori	r18, 0x04	; 4
 372:	fc 01       	movw	r30, r24
 374:	20 83       	st	Z, r18
 376:	03 c0       	rjmp	.+6      	; 0x37e <status_led+0x96>
    }
     
    else
    {
        uart_puts("falsche Eingabe bei status_led()");
 378:	8e ee       	ldi	r24, 0xEE	; 238
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	85 d1       	rcall	.+778    	; 0x688 <uart_puts>
    }     
     
}
 37e:	0f 90       	pop	r0
 380:	df 91       	pop	r29
 382:	cf 91       	pop	r28
 384:	08 95       	ret

00000386 <line_led>:
* /return    none
*
*
************************************************************************/ 
void line_led(char status)
{
 386:	cf 93       	push	r28
 388:	df 93       	push	r29
 38a:	1f 92       	push	r1
 38c:	cd b7       	in	r28, 0x3d	; 61
 38e:	de b7       	in	r29, 0x3e	; 62
 390:	89 83       	std	Y+1, r24	; 0x01
    if(status == _ON)
 392:	89 81       	ldd	r24, Y+1	; 0x01
 394:	81 30       	cpi	r24, 0x01	; 1
 396:	51 f4       	brne	.+20     	; 0x3ac <line_led+0x26>
    {
        PORTD |= ( 1 << PD6 );
 398:	82 e3       	ldi	r24, 0x32	; 50
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	22 e3       	ldi	r18, 0x32	; 50
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	f9 01       	movw	r30, r18
 3a2:	20 81       	ld	r18, Z
 3a4:	20 64       	ori	r18, 0x40	; 64
 3a6:	fc 01       	movw	r30, r24
 3a8:	20 83       	st	Z, r18
 3aa:	10 c0       	rjmp	.+32     	; 0x3cc <line_led+0x46>
    }
    
    else if( status == _OFF)
 3ac:	89 81       	ldd	r24, Y+1	; 0x01
 3ae:	88 23       	and	r24, r24
 3b0:	51 f4       	brne	.+20     	; 0x3c6 <line_led+0x40>
    {
        PORTD &= ~( 1 << PD6);
 3b2:	82 e3       	ldi	r24, 0x32	; 50
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	22 e3       	ldi	r18, 0x32	; 50
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	f9 01       	movw	r30, r18
 3bc:	20 81       	ld	r18, Z
 3be:	2f 7b       	andi	r18, 0xBF	; 191
 3c0:	fc 01       	movw	r30, r24
 3c2:	20 83       	st	Z, r18
 3c4:	03 c0       	rjmp	.+6      	; 0x3cc <line_led+0x46>
    }
    
    else
    {
        uart_puts("falsche Eingabe bei line_led()");
 3c6:	8f e0       	ldi	r24, 0x0F	; 15
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	5e d1       	rcall	.+700    	; 0x688 <uart_puts>
    }
 3cc:	0f 90       	pop	r0
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	08 95       	ret

000003d4 <init_switch>:
 * /return  none
 *
 *
 ************************************************************************/
 void init_switch(void)
 {
 3d4:	cf 93       	push	r28
 3d6:	df 93       	push	r29
 3d8:	cd b7       	in	r28, 0x3d	; 61
 3da:	de b7       	in	r29, 0x3e	; 62
    DDRC &= ~( 1 << PC4);               // PC4 als Eingang definieren (ADC4)
 3dc:	84 e3       	ldi	r24, 0x34	; 52
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	24 e3       	ldi	r18, 0x34	; 52
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	f9 01       	movw	r30, r18
 3e6:	20 81       	ld	r18, Z
 3e8:	2f 7e       	andi	r18, 0xEF	; 239
 3ea:	fc 01       	movw	r30, r24
 3ec:	20 83       	st	Z, r18
    DDRC &= ~( 1 << PD3);               // PD3 als Eingang definieren (INT1)
 3ee:	84 e3       	ldi	r24, 0x34	; 52
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	24 e3       	ldi	r18, 0x34	; 52
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	f9 01       	movw	r30, r18
 3f8:	20 81       	ld	r18, Z
 3fa:	27 7f       	andi	r18, 0xF7	; 247
 3fc:	fc 01       	movw	r30, r24
 3fe:	20 83       	st	Z, r18

    /** ITN1 definieren **/
    MCUCR |=  ( 1 << ISC11);             // Interrupt bei fallender Flanke an INT1
 400:	85 e5       	ldi	r24, 0x55	; 85
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	25 e5       	ldi	r18, 0x55	; 85
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	f9 01       	movw	r30, r18
 40a:	20 81       	ld	r18, Z
 40c:	28 60       	ori	r18, 0x08	; 8
 40e:	fc 01       	movw	r30, r24
 410:	20 83       	st	Z, r18
    MCUCR &= ~( 1 << ISC10);
 412:	85 e5       	ldi	r24, 0x55	; 85
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	25 e5       	ldi	r18, 0x55	; 85
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	f9 01       	movw	r30, r18
 41c:	20 81       	ld	r18, Z
 41e:	2b 7f       	andi	r18, 0xFB	; 251
 420:	fc 01       	movw	r30, r24
 422:	20 83       	st	Z, r18

    GICR |= ( 1 << INT1);               // Intterupt INT1 aktivieren
 424:	8b e5       	ldi	r24, 0x5B	; 91
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	2b e5       	ldi	r18, 0x5B	; 91
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	f9 01       	movw	r30, r18
 42e:	20 81       	ld	r18, Z
 430:	20 68       	ori	r18, 0x80	; 128
 432:	fc 01       	movw	r30, r24
 434:	20 83       	st	Z, r18

    uart_puts("switch init done...");
 436:	8e e2       	ldi	r24, 0x2E	; 46
 438:	91 e0       	ldi	r25, 0x01	; 1
 43a:	26 d1       	rcall	.+588    	; 0x688 <uart_puts>
    uart_puts(_CR);
 43c:	82 e4       	ldi	r24, 0x42	; 66
 43e:	91 e0       	ldi	r25, 0x01	; 1
 440:	23 d1       	rcall	.+582    	; 0x688 <uart_puts>

 }
 442:	df 91       	pop	r29
 444:	cf 91       	pop	r28
 446:	08 95       	ret

00000448 <get_switch_adc>:
 * /return  ADC Wert (uint16_t)
 *
 *
 ************************************************************************/
 uint16_t get_switch_adc(void)
 {
 448:	cf 93       	push	r28
 44a:	df 93       	push	r29
 44c:	cd b7       	in	r28, 0x3d	; 61
 44e:	de b7       	in	r29, 0x3e	; 62

    ADMUX &= ~( 1 << MUX0);
 450:	87 e2       	ldi	r24, 0x27	; 39
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	27 e2       	ldi	r18, 0x27	; 39
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	f9 01       	movw	r30, r18
 45a:	20 81       	ld	r18, Z
 45c:	2e 7f       	andi	r18, 0xFE	; 254
 45e:	fc 01       	movw	r30, r24
 460:	20 83       	st	Z, r18
    ADMUX &= ~( 1 << MUX1);
 462:	87 e2       	ldi	r24, 0x27	; 39
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	27 e2       	ldi	r18, 0x27	; 39
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	f9 01       	movw	r30, r18
 46c:	20 81       	ld	r18, Z
 46e:	2d 7f       	andi	r18, 0xFD	; 253
 470:	fc 01       	movw	r30, r24
 472:	20 83       	st	Z, r18
    ADMUX |=  ( 1 << MUX2);
 474:	87 e2       	ldi	r24, 0x27	; 39
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	27 e2       	ldi	r18, 0x27	; 39
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	f9 01       	movw	r30, r18
 47e:	20 81       	ld	r18, Z
 480:	24 60       	ori	r18, 0x04	; 4
 482:	fc 01       	movw	r30, r24
 484:	20 83       	st	Z, r18
    ADMUX &= ~( 1 << MUX3);
 486:	87 e2       	ldi	r24, 0x27	; 39
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	27 e2       	ldi	r18, 0x27	; 39
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	f9 01       	movw	r30, r18
 490:	20 81       	ld	r18, Z
 492:	27 7f       	andi	r18, 0xF7	; 247
 494:	fc 01       	movw	r30, r24
 496:	20 83       	st	Z, r18

    ADCSRA |= ( 1 << ADSC);                 // Starte ADC Messung
 498:	86 e2       	ldi	r24, 0x26	; 38
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	26 e2       	ldi	r18, 0x26	; 38
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	f9 01       	movw	r30, r18
 4a2:	20 81       	ld	r18, Z
 4a4:	20 64       	ori	r18, 0x40	; 64
 4a6:	fc 01       	movw	r30, r24
 4a8:	20 83       	st	Z, r18
    
    while( ADSC == 1)                       // Warte bis ADC-Messung beendet
 4aa:	00 00       	nop
    {
        //wait
    }
    
    return ADC;                             // gib ADC Wert zurück
 4ac:	84 e2       	ldi	r24, 0x24	; 36
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	fc 01       	movw	r30, r24
 4b2:	80 81       	ld	r24, Z
 4b4:	91 81       	ldd	r25, Z+1	; 0x01
 }
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	08 95       	ret

000004bc <__vector_2>:


 }

 ISR (INT1_vect)
 {
 4bc:	1f 92       	push	r1
 4be:	0f 92       	push	r0
 4c0:	00 90 5f 00 	lds	r0, 0x005F
 4c4:	0f 92       	push	r0
 4c6:	11 24       	eor	r1, r1
 4c8:	2f 93       	push	r18
 4ca:	3f 93       	push	r19
 4cc:	4f 93       	push	r20
 4ce:	5f 93       	push	r21
 4d0:	6f 93       	push	r22
 4d2:	7f 93       	push	r23
 4d4:	8f 93       	push	r24
 4d6:	9f 93       	push	r25
 4d8:	af 93       	push	r26
 4da:	bf 93       	push	r27
 4dc:	ef 93       	push	r30
 4de:	ff 93       	push	r31
 4e0:	cf 93       	push	r28
 4e2:	df 93       	push	r29
 4e4:	00 d0       	rcall	.+0      	; 0x4e6 <__vector_2+0x2a>
 4e6:	cd b7       	in	r28, 0x3d	; 61
 4e8:	de b7       	in	r29, 0x3e	; 62
    //get_switch();
    uint16_t buffer2 = 0;
 4ea:	1a 82       	std	Y+2, r1	; 0x02
 4ec:	19 82       	std	Y+1, r1	; 0x01

    buffer2 = get_switch_adc();
 4ee:	ac df       	rcall	.-168    	; 0x448 <get_switch_adc>
 4f0:	9a 83       	std	Y+2, r25	; 0x02
 4f2:	89 83       	std	Y+1, r24	; 0x01
    uart_puti(buffer2);
 4f4:	89 81       	ldd	r24, Y+1	; 0x01
 4f6:	9a 81       	ldd	r25, Y+2	; 0x02
 4f8:	e7 d0       	rcall	.+462    	; 0x6c8 <uart_puti>
    uart_puts(_CR);
 4fa:	82 e4       	ldi	r24, 0x42	; 66
 4fc:	91 e0       	ldi	r25, 0x01	; 1
 4fe:	c4 d0       	rcall	.+392    	; 0x688 <uart_puts>
 
 }
 500:	0f 90       	pop	r0
 502:	0f 90       	pop	r0
 504:	df 91       	pop	r29
 506:	cf 91       	pop	r28
 508:	ff 91       	pop	r31
 50a:	ef 91       	pop	r30
 50c:	bf 91       	pop	r27
 50e:	af 91       	pop	r26
 510:	9f 91       	pop	r25
 512:	8f 91       	pop	r24
 514:	7f 91       	pop	r23
 516:	6f 91       	pop	r22
 518:	5f 91       	pop	r21
 51a:	4f 91       	pop	r20
 51c:	3f 91       	pop	r19
 51e:	2f 91       	pop	r18
 520:	0f 90       	pop	r0
 522:	00 92 5f 00 	sts	0x005F, r0
 526:	0f 90       	pop	r0
 528:	1f 90       	pop	r1
 52a:	18 95       	reti

0000052c <test>:
uint16_t line_left = 0;
uint16_t line_right = 0;


void test(void)
{   
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
 530:	cd b7       	in	r28, 0x3d	; 61
 532:	de b7       	in	r29, 0x3e	; 62
#endif
 
#if 1
    /** Ausgeben der ADC Werte der Liniensensoren **/

    line_right = get_line_adc(_RIGHT); 
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	ec dd       	rcall	.-1064   	; 0x110 <get_line_adc>
 538:	90 93 79 01 	sts	0x0179, r25
 53c:	80 93 78 01 	sts	0x0178, r24
    line_left = get_line_adc(_LEFT);  
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	e6 dd       	rcall	.-1076   	; 0x110 <get_line_adc>
 544:	90 93 77 01 	sts	0x0177, r25
 548:	80 93 76 01 	sts	0x0176, r24
    line_diff = line_left - line_right;
 54c:	20 91 76 01 	lds	r18, 0x0176
 550:	30 91 77 01 	lds	r19, 0x0177
 554:	80 91 78 01 	lds	r24, 0x0178
 558:	90 91 79 01 	lds	r25, 0x0179
 55c:	a9 01       	movw	r20, r18
 55e:	48 1b       	sub	r20, r24
 560:	59 0b       	sbc	r21, r25
 562:	ca 01       	movw	r24, r20
 564:	90 93 75 01 	sts	0x0175, r25
 568:	80 93 74 01 	sts	0x0174, r24

    uart_puti(line_left);
 56c:	80 91 76 01 	lds	r24, 0x0176
 570:	90 91 77 01 	lds	r25, 0x0177
 574:	a9 d0       	rcall	.+338    	; 0x6c8 <uart_puti>
    uart_puts(";");
 576:	85 e4       	ldi	r24, 0x45	; 69
 578:	91 e0       	ldi	r25, 0x01	; 1
 57a:	86 d0       	rcall	.+268    	; 0x688 <uart_puts>
    uart_puti(line_right);
 57c:	80 91 78 01 	lds	r24, 0x0178
 580:	90 91 79 01 	lds	r25, 0x0179
 584:	a1 d0       	rcall	.+322    	; 0x6c8 <uart_puti>
    uart_puts(";");
 586:	85 e4       	ldi	r24, 0x45	; 69
 588:	91 e0       	ldi	r25, 0x01	; 1
 58a:	7e d0       	rcall	.+252    	; 0x688 <uart_puts>
    uart_puti(line_diff);
 58c:	80 91 74 01 	lds	r24, 0x0174
 590:	90 91 75 01 	lds	r25, 0x0175
 594:	99 d0       	rcall	.+306    	; 0x6c8 <uart_puti>
    uart_puts(_CR);
 596:	87 e4       	ldi	r24, 0x47	; 71
 598:	91 e0       	ldi	r25, 0x01	; 1
 59a:	76 d0       	rcall	.+236    	; 0x688 <uart_puts>
    
    }//switch(counter)

#endif

 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	08 95       	ret

000005a2 <init_timer>:
* /return   none
*
*
************************************************************************/
void init_timer(void)
{
 5a2:	cf 93       	push	r28
 5a4:	df 93       	push	r29
 5a6:	cd b7       	in	r28, 0x3d	; 61
 5a8:	de b7       	in	r29, 0x3e	; 62
    TCCR0 |=  (1 << CS02) | (1 << CS00);                //prescaler 1024
 5aa:	83 e5       	ldi	r24, 0x53	; 83
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	23 e5       	ldi	r18, 0x53	; 83
 5b0:	30 e0       	ldi	r19, 0x00	; 0
 5b2:	f9 01       	movw	r30, r18
 5b4:	20 81       	ld	r18, Z
 5b6:	25 60       	ori	r18, 0x05	; 5
 5b8:	fc 01       	movw	r30, r24
 5ba:	20 83       	st	Z, r18
                                                        // -> 8MHz/1024= 7,8Khz ~ 128µs
    TIMSK |= (1 << TOIE0);                                // enable Timer-Overflow interrupt
 5bc:	89 e5       	ldi	r24, 0x59	; 89
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	29 e5       	ldi	r18, 0x59	; 89
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	f9 01       	movw	r30, r18
 5c6:	20 81       	ld	r18, Z
 5c8:	21 60       	ori	r18, 0x01	; 1
 5ca:	fc 01       	movw	r30, r24
 5cc:	20 83       	st	Z, r18
                                                        
    uart_puts("timer init done..." _CR);
 5ce:	8a e4       	ldi	r24, 0x4A	; 74
 5d0:	91 e0       	ldi	r25, 0x01	; 1
 5d2:	5a d0       	rcall	.+180    	; 0x688 <uart_puts>
}
 5d4:	df 91       	pop	r29
 5d6:	cf 91       	pop	r28
 5d8:	08 95       	ret

000005da <__vector_9>:
* /return   none
*
*
************************************************************************/
ISR (TIMER0_OVF_vect)
{
 5da:	1f 92       	push	r1
 5dc:	0f 92       	push	r0
 5de:	00 90 5f 00 	lds	r0, 0x005F
 5e2:	0f 92       	push	r0
 5e4:	11 24       	eor	r1, r1
 5e6:	cf 93       	push	r28
 5e8:	df 93       	push	r29
 5ea:	cd b7       	in	r28, 0x3d	; 61
 5ec:	de b7       	in	r29, 0x3e	; 62
    //enter Code here    

}
 5ee:	df 91       	pop	r29
 5f0:	cf 91       	pop	r28
 5f2:	0f 90       	pop	r0
 5f4:	00 92 5f 00 	sts	0x005F, r0
 5f8:	0f 90       	pop	r0
 5fa:	1f 90       	pop	r1
 5fc:	18 95       	reti

000005fe <init_uart>:
* /return   none
*
*
************************************************************************/
void init_uart(void)
{
 5fe:	cf 93       	push	r28
 600:	df 93       	push	r29
 602:	1f 92       	push	r1
 604:	cd b7       	in	r28, 0x3d	; 61
 606:	de b7       	in	r29, 0x3e	; 62
        uint8_t ubrr;
        ubrr = _FOSC/16/_BAUD-1;
 608:	8f ec       	ldi	r24, 0xCF	; 207
 60a:	89 83       	std	Y+1, r24	; 0x01
        /* Set baud rate */
        UBRRH = (unsigned char)(ubrr>>8);
 60c:	80 e4       	ldi	r24, 0x40	; 64
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	29 81       	ldd	r18, Y+1	; 0x01
 612:	22 2f       	mov	r18, r18
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	23 2f       	mov	r18, r19
 618:	33 0f       	add	r19, r19
 61a:	33 0b       	sbc	r19, r19
 61c:	fc 01       	movw	r30, r24
 61e:	20 83       	st	Z, r18
        UBRRL = (unsigned char)ubrr;
 620:	89 e2       	ldi	r24, 0x29	; 41
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	29 81       	ldd	r18, Y+1	; 0x01
 626:	fc 01       	movw	r30, r24
 628:	20 83       	st	Z, r18
        /* Enable receiver and transmitter */
        UCSRB |= (1<<TXEN);
 62a:	8a e2       	ldi	r24, 0x2A	; 42
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	2a e2       	ldi	r18, 0x2A	; 42
 630:	30 e0       	ldi	r19, 0x00	; 0
 632:	f9 01       	movw	r30, r18
 634:	20 81       	ld	r18, Z
 636:	28 60       	ori	r18, 0x08	; 8
 638:	fc 01       	movw	r30, r24
 63a:	20 83       	st	Z, r18
        /* Set frame format: 8data, 1stop bit */
        UCSRC = (1<<URSEL) |(3<<UCSZ0);
 63c:	80 e4       	ldi	r24, 0x40	; 64
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	26 e8       	ldi	r18, 0x86	; 134
 642:	fc 01       	movw	r30, r24
 644:	20 83       	st	Z, r18
        
        uart_puts("uart init done..." _CR);
 646:	8f e5       	ldi	r24, 0x5F	; 95
 648:	91 e0       	ldi	r25, 0x01	; 1
 64a:	1e d0       	rcall	.+60     	; 0x688 <uart_puts>
}
 64c:	0f 90       	pop	r0
 64e:	df 91       	pop	r29
 650:	cf 91       	pop	r28
 652:	08 95       	ret

00000654 <uart_putc>:
* /return   none
*
*
************************************************************************/
void uart_putc(unsigned char data) 
{    
 654:	cf 93       	push	r28
 656:	df 93       	push	r29
 658:	1f 92       	push	r1
 65a:	cd b7       	in	r28, 0x3d	; 61
 65c:	de b7       	in	r29, 0x3e	; 62
 65e:	89 83       	std	Y+1, r24	; 0x01
    /* Wait for empty transmit buffer */
    while ( !( UCSRA & (1<<UDRE)) )
 660:	00 00       	nop
 662:	8b e2       	ldi	r24, 0x2B	; 43
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	fc 01       	movw	r30, r24
 668:	80 81       	ld	r24, Z
 66a:	88 2f       	mov	r24, r24
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	80 72       	andi	r24, 0x20	; 32
 670:	99 27       	eor	r25, r25
 672:	00 97       	sbiw	r24, 0x00	; 0
 674:	b1 f3       	breq	.-20     	; 0x662 <uart_putc+0xe>
    ;
    /* Put data into buffer, sends the data */
    UDR = data;
 676:	8c e2       	ldi	r24, 0x2C	; 44
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	29 81       	ldd	r18, Y+1	; 0x01
 67c:	fc 01       	movw	r30, r24
 67e:	20 83       	st	Z, r18
}
 680:	0f 90       	pop	r0
 682:	df 91       	pop	r29
 684:	cf 91       	pop	r28
 686:	08 95       	ret

00000688 <uart_puts>:
*
* /example    uart_puts("Test");
*
************************************************************************/
void uart_puts (const char *s)
{
 688:	cf 93       	push	r28
 68a:	df 93       	push	r29
 68c:	00 d0       	rcall	.+0      	; 0x68e <uart_puts+0x6>
 68e:	cd b7       	in	r28, 0x3d	; 61
 690:	de b7       	in	r29, 0x3e	; 62
 692:	9a 83       	std	Y+2, r25	; 0x02
 694:	89 83       	std	Y+1, r24	; 0x01
    do
    {
        uart_putc (*s);
 696:	89 81       	ldd	r24, Y+1	; 0x01
 698:	9a 81       	ldd	r25, Y+2	; 0x02
 69a:	fc 01       	movw	r30, r24
 69c:	80 81       	ld	r24, Z
 69e:	da df       	rcall	.-76     	; 0x654 <uart_putc>
    }
    while (*s++);
 6a0:	89 81       	ldd	r24, Y+1	; 0x01
 6a2:	9a 81       	ldd	r25, Y+2	; 0x02
 6a4:	fc 01       	movw	r30, r24
 6a6:	80 81       	ld	r24, Z
 6a8:	21 e0       	ldi	r18, 0x01	; 1
 6aa:	88 23       	and	r24, r24
 6ac:	09 f4       	brne	.+2      	; 0x6b0 <uart_puts+0x28>
 6ae:	20 e0       	ldi	r18, 0x00	; 0
 6b0:	89 81       	ldd	r24, Y+1	; 0x01
 6b2:	9a 81       	ldd	r25, Y+2	; 0x02
 6b4:	01 96       	adiw	r24, 0x01	; 1
 6b6:	9a 83       	std	Y+2, r25	; 0x02
 6b8:	89 83       	std	Y+1, r24	; 0x01
 6ba:	22 23       	and	r18, r18
 6bc:	61 f7       	brne	.-40     	; 0x696 <uart_puts+0xe>
}
 6be:	0f 90       	pop	r0
 6c0:	0f 90       	pop	r0
 6c2:	df 91       	pop	r29
 6c4:	cf 91       	pop	r28
 6c6:	08 95       	ret

000006c8 <uart_puti>:
*
*           uart_puti(i);
*
************************************************************************/
void uart_puti( uint16_t data )
{
 6c8:	cf 93       	push	r28
 6ca:	df 93       	push	r29
 6cc:	cd b7       	in	r28, 0x3d	; 61
 6ce:	de b7       	in	r29, 0x3e	; 62
 6d0:	28 97       	sbiw	r28, 0x08	; 8
 6d2:	0f b6       	in	r0, 0x3f	; 63
 6d4:	f8 94       	cli
 6d6:	de bf       	out	0x3e, r29	; 62
 6d8:	0f be       	out	0x3f, r0	; 63
 6da:	cd bf       	out	0x3d, r28	; 61
 6dc:	98 87       	std	Y+8, r25	; 0x08
 6de:	8f 83       	std	Y+7, r24	; 0x07
    char buffer[6];
    itoa(data, buffer, 10);
 6e0:	8f 81       	ldd	r24, Y+7	; 0x07
 6e2:	98 85       	ldd	r25, Y+8	; 0x08
 6e4:	4a e0       	ldi	r20, 0x0A	; 10
 6e6:	50 e0       	ldi	r21, 0x00	; 0
 6e8:	9e 01       	movw	r18, r28
 6ea:	2f 5f       	subi	r18, 0xFF	; 255
 6ec:	3f 4f       	sbci	r19, 0xFF	; 255
 6ee:	b9 01       	movw	r22, r18
 6f0:	0c d0       	rcall	.+24     	; 0x70a <itoa>
    uart_puts(buffer);
 6f2:	ce 01       	movw	r24, r28
 6f4:	01 96       	adiw	r24, 0x01	; 1
 6f6:	c8 df       	rcall	.-112    	; 0x688 <uart_puts>
}
 6f8:	28 96       	adiw	r28, 0x08	; 8
 6fa:	0f b6       	in	r0, 0x3f	; 63
 6fc:	f8 94       	cli
 6fe:	de bf       	out	0x3e, r29	; 62
 700:	0f be       	out	0x3f, r0	; 63
 702:	cd bf       	out	0x3d, r28	; 61
 704:	df 91       	pop	r29
 706:	cf 91       	pop	r28
 708:	08 95       	ret

0000070a <itoa>:
 70a:	fb 01       	movw	r30, r22
 70c:	9f 01       	movw	r18, r30
 70e:	e8 94       	clt
 710:	42 30       	cpi	r20, 0x02	; 2
 712:	bc f0       	brlt	.+46     	; 0x742 <itoa+0x38>
 714:	45 32       	cpi	r20, 0x25	; 37
 716:	ac f4       	brge	.+42     	; 0x742 <itoa+0x38>
 718:	4a 30       	cpi	r20, 0x0A	; 10
 71a:	29 f4       	brne	.+10     	; 0x726 <itoa+0x1c>
 71c:	97 fb       	bst	r25, 7
 71e:	1e f4       	brtc	.+6      	; 0x726 <itoa+0x1c>
 720:	90 95       	com	r25
 722:	81 95       	neg	r24
 724:	9f 4f       	sbci	r25, 0xFF	; 255
 726:	64 2f       	mov	r22, r20
 728:	77 27       	eor	r23, r23
 72a:	1e d0       	rcall	.+60     	; 0x768 <__udivmodhi4>
 72c:	80 5d       	subi	r24, 0xD0	; 208
 72e:	8a 33       	cpi	r24, 0x3A	; 58
 730:	0c f0       	brlt	.+2      	; 0x734 <itoa+0x2a>
 732:	89 5d       	subi	r24, 0xD9	; 217
 734:	81 93       	st	Z+, r24
 736:	cb 01       	movw	r24, r22
 738:	00 97       	sbiw	r24, 0x00	; 0
 73a:	a9 f7       	brne	.-22     	; 0x726 <itoa+0x1c>
 73c:	16 f4       	brtc	.+4      	; 0x742 <itoa+0x38>
 73e:	5d e2       	ldi	r21, 0x2D	; 45
 740:	51 93       	st	Z+, r21
 742:	10 82       	st	Z, r1
 744:	c9 01       	movw	r24, r18
 746:	00 c0       	rjmp	.+0      	; 0x748 <strrev>

00000748 <strrev>:
 748:	dc 01       	movw	r26, r24
 74a:	fc 01       	movw	r30, r24
 74c:	67 2f       	mov	r22, r23
 74e:	71 91       	ld	r23, Z+
 750:	77 23       	and	r23, r23
 752:	e1 f7       	brne	.-8      	; 0x74c <strrev+0x4>
 754:	32 97       	sbiw	r30, 0x02	; 2
 756:	04 c0       	rjmp	.+8      	; 0x760 <strrev+0x18>
 758:	7c 91       	ld	r23, X
 75a:	6d 93       	st	X+, r22
 75c:	70 83       	st	Z, r23
 75e:	62 91       	ld	r22, -Z
 760:	ae 17       	cp	r26, r30
 762:	bf 07       	cpc	r27, r31
 764:	c8 f3       	brcs	.-14     	; 0x758 <strrev+0x10>
 766:	08 95       	ret

00000768 <__udivmodhi4>:
 768:	aa 1b       	sub	r26, r26
 76a:	bb 1b       	sub	r27, r27
 76c:	51 e1       	ldi	r21, 0x11	; 17
 76e:	07 c0       	rjmp	.+14     	; 0x77e <__udivmodhi4_ep>

00000770 <__udivmodhi4_loop>:
 770:	aa 1f       	adc	r26, r26
 772:	bb 1f       	adc	r27, r27
 774:	a6 17       	cp	r26, r22
 776:	b7 07       	cpc	r27, r23
 778:	10 f0       	brcs	.+4      	; 0x77e <__udivmodhi4_ep>
 77a:	a6 1b       	sub	r26, r22
 77c:	b7 0b       	sbc	r27, r23

0000077e <__udivmodhi4_ep>:
 77e:	88 1f       	adc	r24, r24
 780:	99 1f       	adc	r25, r25
 782:	5a 95       	dec	r21
 784:	a9 f7       	brne	.-22     	; 0x770 <__udivmodhi4_loop>
 786:	80 95       	com	r24
 788:	90 95       	com	r25
 78a:	bc 01       	movw	r22, r24
 78c:	cd 01       	movw	r24, r26
 78e:	08 95       	ret

00000790 <_exit>:
 790:	f8 94       	cli

00000792 <__stop_program>:
 792:	ff cf       	rjmp	.-2      	; 0x792 <__stop_program>
