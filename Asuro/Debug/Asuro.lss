
Asuro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000074e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b2  00800060  0000074e  000007e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800112  00800112  00000894  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  00000894  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000183  00000000  00000000  000011e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000136b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000130  00000000  00000000  0000139a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000673  00000000  00000000  000014ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003ba  00000000  00000000  00001b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000068f  00000000  00000000  00001ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002b8  00000000  00000000  00002588  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000021a  00000000  00000000  00002840  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000493  00000000  00000000  00002a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000c0  00000000  00000000  00002eed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	bb c2       	rjmp	.+1398   	; 0x58a <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	11 e0       	ldi	r17, 0x01	; 1
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee e4       	ldi	r30, 0x4E	; 78
  3a:	f7 e0       	ldi	r31, 0x07	; 7
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 31       	cpi	r26, 0x12	; 18
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	a2 e1       	ldi	r26, 0x12	; 18
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 31       	cpi	r26, 0x14	; 20
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	77 c3       	rjmp	.+1774   	; 0x74a <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:
/** Test **/
#include "test.h"


int main(void)
{	
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
  62:	cd b7       	in	r28, 0x3d	; 61
  64:	de b7       	in	r29, 0x3e	; 62
	/** Initialisierungen **/	
	init_uart();							// initialisiere IR Übertragung
  66:	a8 d2       	rcall	.+1360   	; 0x5b8 <init_uart>
	init_led();								// initialisiere LED Steuerung
  68:	79 d1       	rcall	.+754    	; 0x35c <init_led>
	init_motor();							// initialisere Motor Steuerung
  6a:	0d d0       	rcall	.+26     	; 0x86 <init_motor>
	init_od();								// initialisiere odometrie
  6c:	e1 d0       	rcall	.+450    	; 0x230 <init_od>
	init_timer();							// initialisiere Timer
  6e:	71 d2       	rcall	.+1250   	; 0x552 <init_timer>
	
	status_led( _GREEN);
  70:	81 e0       	ldi	r24, 0x01	; 1
  72:	99 d1       	rcall	.+818    	; 0x3a6 <status_led>
	uart_puts("all inits done..." _CR);
  74:	80 e6       	ldi	r24, 0x60	; 96
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	e4 d2       	rcall	.+1480   	; 0x642 <uart_puts>
	sei();
  7a:	78 94       	sei
	
	/** DEBUG-Startwert **/
	motor_dir( _BRK, _FWD);
  7c:	61 e0       	ldi	r22, 0x01	; 1
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	4b d0       	rcall	.+150    	; 0x118 <motor_dir>

		
    while(1)
    {

		test();
  82:	dc d1       	rcall	.+952    	; 0x43c <test>

    }//while(1)
  84:	fe cf       	rjmp	.-4      	; 0x82 <main+0x24>

00000086 <init_motor>:
* /return	none
*
*
************************************************************************/
void init_motor(void)
{
  86:	cf 93       	push	r28
  88:	df 93       	push	r29
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
	/** IOs definieren **/
	DDRD |= (1 << PD4) | (1 << PD5);				// Pins für linken Motor als Ausgänge
  8e:	81 e3       	ldi	r24, 0x31	; 49
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	21 e3       	ldi	r18, 0x31	; 49
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	f9 01       	movw	r30, r18
  98:	20 81       	ld	r18, Z
  9a:	20 63       	ori	r18, 0x30	; 48
  9c:	fc 01       	movw	r30, r24
  9e:	20 83       	st	Z, r18
	DDRB |= (1 << PB4) | (1 << PB5);				// Pins für rechten Motor als Ausgänge
  a0:	87 e3       	ldi	r24, 0x37	; 55
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	27 e3       	ldi	r18, 0x37	; 55
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	f9 01       	movw	r30, r18
  aa:	20 81       	ld	r18, Z
  ac:	20 63       	ori	r18, 0x30	; 48
  ae:	fc 01       	movw	r30, r24
  b0:	20 83       	st	Z, r18
	DDRB |= (1 << PB1) | (1 << PB2);				// PWM Pins als Ausgänge
  b2:	87 e3       	ldi	r24, 0x37	; 55
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	27 e3       	ldi	r18, 0x37	; 55
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	f9 01       	movw	r30, r18
  bc:	20 81       	ld	r18, Z
  be:	26 60       	ori	r18, 0x06	; 6
  c0:	fc 01       	movw	r30, r24
  c2:	20 83       	st	Z, r18
	
	/** Motor stoppen **/
	PORTD |= (1 << PD4) | (1 << PD5);				// Ausgänge auf HIGH -> Motor blockiert
  c4:	82 e3       	ldi	r24, 0x32	; 50
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	22 e3       	ldi	r18, 0x32	; 50
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	f9 01       	movw	r30, r18
  ce:	20 81       	ld	r18, Z
  d0:	20 63       	ori	r18, 0x30	; 48
  d2:	fc 01       	movw	r30, r24
  d4:	20 83       	st	Z, r18
	PORTB |= (1 << PB4) | (1 << PB5);				// Ausgänge auf HIGH -> Motor blockiert
  d6:	88 e3       	ldi	r24, 0x38	; 56
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	28 e3       	ldi	r18, 0x38	; 56
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	f9 01       	movw	r30, r18
  e0:	20 81       	ld	r18, Z
  e2:	20 63       	ori	r18, 0x30	; 48
  e4:	fc 01       	movw	r30, r24
  e6:	20 83       	st	Z, r18
		
	/** Timer konfigurieren **/
	TCCR1A |= (1 << COM1A1) | (1 << WGM10) | (1 << COM1B1);
  e8:	8f e4       	ldi	r24, 0x4F	; 79
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	2f e4       	ldi	r18, 0x4F	; 79
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	f9 01       	movw	r30, r18
  f2:	20 81       	ld	r18, Z
  f4:	21 6a       	ori	r18, 0xA1	; 161
  f6:	fc 01       	movw	r30, r24
  f8:	20 83       	st	Z, r18
	TCCR1B |= (1 << CS11);
  fa:	8e e4       	ldi	r24, 0x4E	; 78
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	2e e4       	ldi	r18, 0x4E	; 78
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	f9 01       	movw	r30, r18
 104:	20 81       	ld	r18, Z
 106:	22 60       	ori	r18, 0x02	; 2
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
	
	uart_puts("motor init done..." _CR);
 10c:	84 e7       	ldi	r24, 0x74	; 116
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	98 d2       	rcall	.+1328   	; 0x642 <uart_puts>
}
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <motor_dir>:
* /return	none
*
*
************************************************************************/
void motor_dir( char left, char right)
{
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	00 d0       	rcall	.+0      	; 0x11e <motor_dir+0x6>
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
 122:	89 83       	std	Y+1, r24	; 0x01
 124:	6a 83       	std	Y+2, r22	; 0x02
	/** Linke Seite **/
	if ( left == _FWD)								// Motor vorwärts
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	99 f4       	brne	.+38     	; 0x152 <motor_dir+0x3a>
	{
		PORTD |= (1 << PD5);
 12c:	82 e3       	ldi	r24, 0x32	; 50
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	22 e3       	ldi	r18, 0x32	; 50
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	f9 01       	movw	r30, r18
 136:	20 81       	ld	r18, Z
 138:	20 62       	ori	r18, 0x20	; 32
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18
		PORTD &= ~(1 << PD4);		
 13e:	82 e3       	ldi	r24, 0x32	; 50
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	22 e3       	ldi	r18, 0x32	; 50
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	f9 01       	movw	r30, r18
 148:	20 81       	ld	r18, Z
 14a:	2f 7e       	andi	r18, 0xEF	; 239
 14c:	fc 01       	movw	r30, r24
 14e:	20 83       	st	Z, r18
 150:	1f c0       	rjmp	.+62     	; 0x190 <motor_dir+0x78>
	}
		
	else if ( left == _RWD)							// Motor rückwärts
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	82 30       	cpi	r24, 0x02	; 2
 156:	99 f4       	brne	.+38     	; 0x17e <motor_dir+0x66>
	{
		PORTD &= ~(1 << PD5);
 158:	82 e3       	ldi	r24, 0x32	; 50
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	22 e3       	ldi	r18, 0x32	; 50
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	f9 01       	movw	r30, r18
 162:	20 81       	ld	r18, Z
 164:	2f 7d       	andi	r18, 0xDF	; 223
 166:	fc 01       	movw	r30, r24
 168:	20 83       	st	Z, r18
		PORTD |=  (1 << PD4);		
 16a:	82 e3       	ldi	r24, 0x32	; 50
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	22 e3       	ldi	r18, 0x32	; 50
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	f9 01       	movw	r30, r18
 174:	20 81       	ld	r18, Z
 176:	20 61       	ori	r18, 0x10	; 16
 178:	fc 01       	movw	r30, r24
 17a:	20 83       	st	Z, r18
 17c:	09 c0       	rjmp	.+18     	; 0x190 <motor_dir+0x78>
	}
		
	else											// ungültige Auswahl
	{
	PORTD |= (1 << PD4) | (1 << PD5);				// Ausgänge auf HIGH -> Motor blockiert
 17e:	82 e3       	ldi	r24, 0x32	; 50
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	22 e3       	ldi	r18, 0x32	; 50
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	f9 01       	movw	r30, r18
 188:	20 81       	ld	r18, Z
 18a:	20 63       	ori	r18, 0x30	; 48
 18c:	fc 01       	movw	r30, r24
 18e:	20 83       	st	Z, r18
	}
	
	
	/** Rechte Seite **/
	if ( right == _FWD)								// Motor vorwärts
 190:	8a 81       	ldd	r24, Y+2	; 0x02
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	99 f4       	brne	.+38     	; 0x1bc <motor_dir+0xa4>
	{
		PORTB |= (1 << PB5);
 196:	88 e3       	ldi	r24, 0x38	; 56
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	28 e3       	ldi	r18, 0x38	; 56
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	f9 01       	movw	r30, r18
 1a0:	20 81       	ld	r18, Z
 1a2:	20 62       	ori	r18, 0x20	; 32
 1a4:	fc 01       	movw	r30, r24
 1a6:	20 83       	st	Z, r18
		PORTB &= ~(1 << PB4);
 1a8:	88 e3       	ldi	r24, 0x38	; 56
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	28 e3       	ldi	r18, 0x38	; 56
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	f9 01       	movw	r30, r18
 1b2:	20 81       	ld	r18, Z
 1b4:	2f 7e       	andi	r18, 0xEF	; 239
 1b6:	fc 01       	movw	r30, r24
 1b8:	20 83       	st	Z, r18
 1ba:	1f c0       	rjmp	.+62     	; 0x1fa <motor_dir+0xe2>
	}
	
	else if ( right == _RWD)						// Motor rückwärts
 1bc:	8a 81       	ldd	r24, Y+2	; 0x02
 1be:	82 30       	cpi	r24, 0x02	; 2
 1c0:	99 f4       	brne	.+38     	; 0x1e8 <motor_dir+0xd0>
	{
		PORTB &= ~(1 << PB5);
 1c2:	88 e3       	ldi	r24, 0x38	; 56
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	28 e3       	ldi	r18, 0x38	; 56
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	f9 01       	movw	r30, r18
 1cc:	20 81       	ld	r18, Z
 1ce:	2f 7d       	andi	r18, 0xDF	; 223
 1d0:	fc 01       	movw	r30, r24
 1d2:	20 83       	st	Z, r18
		PORTB |=  (1 << PB4);
 1d4:	88 e3       	ldi	r24, 0x38	; 56
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	28 e3       	ldi	r18, 0x38	; 56
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	f9 01       	movw	r30, r18
 1de:	20 81       	ld	r18, Z
 1e0:	20 61       	ori	r18, 0x10	; 16
 1e2:	fc 01       	movw	r30, r24
 1e4:	20 83       	st	Z, r18
 1e6:	09 c0       	rjmp	.+18     	; 0x1fa <motor_dir+0xe2>
	}
	
	else											// ungültige Auswahl
	{
		PORTB |= (1 << PB4) | (1 << PB5);			// Ausgänge auf HIGH -> Motor blockiert
 1e8:	88 e3       	ldi	r24, 0x38	; 56
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	28 e3       	ldi	r18, 0x38	; 56
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	f9 01       	movw	r30, r18
 1f2:	20 81       	ld	r18, Z
 1f4:	20 63       	ori	r18, 0x30	; 48
 1f6:	fc 01       	movw	r30, r24
 1f8:	20 83       	st	Z, r18
	}	
}
 1fa:	0f 90       	pop	r0
 1fc:	0f 90       	pop	r0
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <motor_pwr>:
* /return	none
*
*
************************************************************************/
void motor_pwr( uint8_t left, uint8_t right)
{
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	00 d0       	rcall	.+0      	; 0x20a <motor_pwr+0x6>
 20a:	cd b7       	in	r28, 0x3d	; 61
 20c:	de b7       	in	r29, 0x3e	; 62
 20e:	89 83       	std	Y+1, r24	; 0x01
 210:	6a 83       	std	Y+2, r22	; 0x02
	_PWM_LEFT = left;
 212:	8a e4       	ldi	r24, 0x4A	; 74
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	29 81       	ldd	r18, Y+1	; 0x01
 218:	fc 01       	movw	r30, r24
 21a:	20 83       	st	Z, r18
	_PWM_RIGHT = right;
 21c:	88 e4       	ldi	r24, 0x48	; 72
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	2a 81       	ldd	r18, Y+2	; 0x02
 222:	fc 01       	movw	r30, r24
 224:	20 83       	st	Z, r18
}
 226:	0f 90       	pop	r0
 228:	0f 90       	pop	r0
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <init_od>:
* /return	none
*
*
************************************************************************/
void init_od(void)
{
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	cd b7       	in	r28, 0x3d	; 61
 236:	de b7       	in	r29, 0x3e	; 62
	ADMUX |= (1 << REFS0);					// AVCC mit externem Kondensator am AREF-Pin
 238:	87 e2       	ldi	r24, 0x27	; 39
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	27 e2       	ldi	r18, 0x27	; 39
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	f9 01       	movw	r30, r18
 242:	20 81       	ld	r18, Z
 244:	20 64       	ori	r18, 0x40	; 64
 246:	fc 01       	movw	r30, r24
 248:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADEN);					// ADC Enable
 24a:	86 e2       	ldi	r24, 0x26	; 38
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	26 e2       	ldi	r18, 0x26	; 38
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	f9 01       	movw	r30, r18
 254:	20 81       	ld	r18, Z
 256:	20 68       	ori	r18, 0x80	; 128
 258:	fc 01       	movw	r30, r24
 25a:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADPS2) | (1 << ADPS0);	// Abtastfrequenz: 8MHz/32=250kHz (4µs)
 25c:	86 e2       	ldi	r24, 0x26	; 38
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	26 e2       	ldi	r18, 0x26	; 38
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	f9 01       	movw	r30, r18
 266:	20 81       	ld	r18, Z
 268:	25 60       	ori	r18, 0x05	; 5
 26a:	fc 01       	movw	r30, r24
 26c:	20 83       	st	Z, r18
	
	uart_puts("odometrie init done..." _CR);
 26e:	89 e8       	ldi	r24, 0x89	; 137
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	e7 d1       	rcall	.+974    	; 0x642 <uart_puts>
}
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <get_od_adc>:
* /return	uint16 Wert des ADCs
*
*
************************************************************************/
uint16_t get_od_adc(char side)
{
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	1f 92       	push	r1
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62
 284:	89 83       	std	Y+1, r24	; 0x01
	PORTD |= ( 1 << PD7);				// PD7 auf HIGH -> keine LED Steuerung
 286:	82 e3       	ldi	r24, 0x32	; 50
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	22 e3       	ldi	r18, 0x32	; 50
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	f9 01       	movw	r30, r18
 290:	20 81       	ld	r18, Z
 292:	20 68       	ori	r18, 0x80	; 128
 294:	fc 01       	movw	r30, r24
 296:	20 83       	st	Z, r18
	ADCSRA |= ( 1 << ADSC);				// Starte ADC Messung	
 298:	86 e2       	ldi	r24, 0x26	; 38
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	26 e2       	ldi	r18, 0x26	; 38
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	f9 01       	movw	r30, r18
 2a2:	20 81       	ld	r18, Z
 2a4:	20 64       	ori	r18, 0x40	; 64
 2a6:	fc 01       	movw	r30, r24
 2a8:	20 83       	st	Z, r18
	
	if( side == _RIGHT)					// aktivieren des rechten ADC
 2aa:	89 81       	ldd	r24, Y+1	; 0x01
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	29 f5       	brne	.+74     	; 0x2fa <get_od_adc+0x80>
	{
	ADMUX &= ~( 1 << MUX0);
 2b0:	87 e2       	ldi	r24, 0x27	; 39
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	27 e2       	ldi	r18, 0x27	; 39
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	f9 01       	movw	r30, r18
 2ba:	20 81       	ld	r18, Z
 2bc:	2e 7f       	andi	r18, 0xFE	; 254
 2be:	fc 01       	movw	r30, r24
 2c0:	20 83       	st	Z, r18
	ADMUX &= ~( 1 << MUX1);
 2c2:	87 e2       	ldi	r24, 0x27	; 39
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	27 e2       	ldi	r18, 0x27	; 39
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	f9 01       	movw	r30, r18
 2cc:	20 81       	ld	r18, Z
 2ce:	2d 7f       	andi	r18, 0xFD	; 253
 2d0:	fc 01       	movw	r30, r24
 2d2:	20 83       	st	Z, r18
	ADMUX &= ~( 1 << MUX2);
 2d4:	87 e2       	ldi	r24, 0x27	; 39
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	27 e2       	ldi	r18, 0x27	; 39
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	f9 01       	movw	r30, r18
 2de:	20 81       	ld	r18, Z
 2e0:	2b 7f       	andi	r18, 0xFB	; 251
 2e2:	fc 01       	movw	r30, r24
 2e4:	20 83       	st	Z, r18
	ADMUX &= ~( 1 << MUX3);
 2e6:	87 e2       	ldi	r24, 0x27	; 39
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	27 e2       	ldi	r18, 0x27	; 39
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	f9 01       	movw	r30, r18
 2f0:	20 81       	ld	r18, Z
 2f2:	27 7f       	andi	r18, 0xF7	; 247
 2f4:	fc 01       	movw	r30, r24
 2f6:	20 83       	st	Z, r18
	ADMUX &= ~( 1 << MUX1);
	ADMUX &= ~( 1 << MUX2);
	ADMUX &= ~( 1 << MUX3);		
	}		
	
	while( ADSC == 1)					// Warte bis ADC-Messung beendet
 2f8:	27 c0       	rjmp	.+78     	; 0x348 <get_od_adc+0xce>
	ADMUX &= ~( 1 << MUX1);
	ADMUX &= ~( 1 << MUX2);
	ADMUX &= ~( 1 << MUX3);
	}
	
	else if ( side == _LEFT)			// aktivieren des linken ADC
 2fa:	89 81       	ldd	r24, Y+1	; 0x01
 2fc:	88 23       	and	r24, r24
 2fe:	21 f5       	brne	.+72     	; 0x348 <get_od_adc+0xce>
	{
	ADMUX |= ( 1 << MUX0);
 300:	87 e2       	ldi	r24, 0x27	; 39
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	27 e2       	ldi	r18, 0x27	; 39
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	f9 01       	movw	r30, r18
 30a:	20 81       	ld	r18, Z
 30c:	21 60       	ori	r18, 0x01	; 1
 30e:	fc 01       	movw	r30, r24
 310:	20 83       	st	Z, r18
	ADMUX &= ~( 1 << MUX1);
 312:	87 e2       	ldi	r24, 0x27	; 39
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	27 e2       	ldi	r18, 0x27	; 39
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	f9 01       	movw	r30, r18
 31c:	20 81       	ld	r18, Z
 31e:	2d 7f       	andi	r18, 0xFD	; 253
 320:	fc 01       	movw	r30, r24
 322:	20 83       	st	Z, r18
	ADMUX &= ~( 1 << MUX2);
 324:	87 e2       	ldi	r24, 0x27	; 39
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	27 e2       	ldi	r18, 0x27	; 39
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	f9 01       	movw	r30, r18
 32e:	20 81       	ld	r18, Z
 330:	2b 7f       	andi	r18, 0xFB	; 251
 332:	fc 01       	movw	r30, r24
 334:	20 83       	st	Z, r18
	ADMUX &= ~( 1 << MUX3);		
 336:	87 e2       	ldi	r24, 0x27	; 39
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	27 e2       	ldi	r18, 0x27	; 39
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	f9 01       	movw	r30, r18
 340:	20 81       	ld	r18, Z
 342:	27 7f       	andi	r18, 0xF7	; 247
 344:	fc 01       	movw	r30, r24
 346:	20 83       	st	Z, r18
	}		
	
	while( ADSC == 1)					// Warte bis ADC-Messung beendet
 348:	00 00       	nop
	{
		//wait
	}
		
	return ADC;							// gib ADC Wert zurück
 34a:	84 e2       	ldi	r24, 0x24	; 36
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	fc 01       	movw	r30, r24
 350:	80 81       	ld	r24, Z
 352:	91 81       	ldd	r25, Z+1	; 0x01
}
 354:	0f 90       	pop	r0
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	08 95       	ret

0000035c <init_led>:
* /return	none
*
*
************************************************************************/
void init_led (void)
{
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	cd b7       	in	r28, 0x3d	; 61
 362:	de b7       	in	r29, 0x3e	; 62
	DDRD |= (1 << PD7);						// PD7 als Ausgang für Back LEDs
 364:	81 e3       	ldi	r24, 0x31	; 49
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	21 e3       	ldi	r18, 0x31	; 49
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	f9 01       	movw	r30, r18
 36e:	20 81       	ld	r18, Z
 370:	20 68       	ori	r18, 0x80	; 128
 372:	fc 01       	movw	r30, r24
 374:	20 83       	st	Z, r18
	DDRD |= (1 << PD2);						// PD2 als Ausgang für RG_LED
 376:	81 e3       	ldi	r24, 0x31	; 49
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	21 e3       	ldi	r18, 0x31	; 49
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	f9 01       	movw	r30, r18
 380:	20 81       	ld	r18, Z
 382:	24 60       	ori	r18, 0x04	; 4
 384:	fc 01       	movw	r30, r24
 386:	20 83       	st	Z, r18
	DDRB |= (1 << PB0);						// PB0 als Ausgang für RG_LED
 388:	87 e3       	ldi	r24, 0x37	; 55
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	27 e3       	ldi	r18, 0x37	; 55
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	f9 01       	movw	r30, r18
 392:	20 81       	ld	r18, Z
 394:	21 60       	ori	r18, 0x01	; 1
 396:	fc 01       	movw	r30, r24
 398:	20 83       	st	Z, r18
	
	uart_puts("led init done..." _CR);
 39a:	82 ea       	ldi	r24, 0xA2	; 162
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	51 d1       	rcall	.+674    	; 0x642 <uart_puts>
}
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	08 95       	ret

000003a6 <status_led>:
* /return	none
*
*
************************************************************************/
 void status_led( char colour)
 {
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
 3aa:	1f 92       	push	r1
 3ac:	cd b7       	in	r28, 0x3d	; 61
 3ae:	de b7       	in	r29, 0x3e	; 62
 3b0:	89 83       	std	Y+1, r24	; 0x01
	 if ( colour == _GREEN)
 3b2:	89 81       	ldd	r24, Y+1	; 0x01
 3b4:	81 30       	cpi	r24, 0x01	; 1
 3b6:	99 f4       	brne	.+38     	; 0x3de <status_led+0x38>
	 {
		 PORTB |=  ( 1 << PB0 );
 3b8:	88 e3       	ldi	r24, 0x38	; 56
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	28 e3       	ldi	r18, 0x38	; 56
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	f9 01       	movw	r30, r18
 3c2:	20 81       	ld	r18, Z
 3c4:	21 60       	ori	r18, 0x01	; 1
 3c6:	fc 01       	movw	r30, r24
 3c8:	20 83       	st	Z, r18
		 PORTD &= ~( 1 << PD2 );
 3ca:	82 e3       	ldi	r24, 0x32	; 50
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	22 e3       	ldi	r18, 0x32	; 50
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	f9 01       	movw	r30, r18
 3d4:	20 81       	ld	r18, Z
 3d6:	2b 7f       	andi	r18, 0xFB	; 251
 3d8:	fc 01       	movw	r30, r24
 3da:	20 83       	st	Z, r18
 3dc:	2b c0       	rjmp	.+86     	; 0x434 <status_led+0x8e>
	 }
	 
	 else if ( colour == _RED )
 3de:	89 81       	ldd	r24, Y+1	; 0x01
 3e0:	82 30       	cpi	r24, 0x02	; 2
 3e2:	99 f4       	brne	.+38     	; 0x40a <status_led+0x64>
	 {
		 PORTB &= ~( 1 << PB0 );
 3e4:	88 e3       	ldi	r24, 0x38	; 56
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	28 e3       	ldi	r18, 0x38	; 56
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	f9 01       	movw	r30, r18
 3ee:	20 81       	ld	r18, Z
 3f0:	2e 7f       	andi	r18, 0xFE	; 254
 3f2:	fc 01       	movw	r30, r24
 3f4:	20 83       	st	Z, r18
		 PORTD |=  ( 1 << PD2 );
 3f6:	82 e3       	ldi	r24, 0x32	; 50
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	22 e3       	ldi	r18, 0x32	; 50
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	f9 01       	movw	r30, r18
 400:	20 81       	ld	r18, Z
 402:	24 60       	ori	r18, 0x04	; 4
 404:	fc 01       	movw	r30, r24
 406:	20 83       	st	Z, r18
 408:	15 c0       	rjmp	.+42     	; 0x434 <status_led+0x8e>
	 }
	 
	 else if ( colour == _ORANGE )
 40a:	89 81       	ldd	r24, Y+1	; 0x01
 40c:	83 30       	cpi	r24, 0x03	; 3
 40e:	91 f4       	brne	.+36     	; 0x434 <status_led+0x8e>
	 {
		 PORTB |= ( 1 << PB0 );
 410:	88 e3       	ldi	r24, 0x38	; 56
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	28 e3       	ldi	r18, 0x38	; 56
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	f9 01       	movw	r30, r18
 41a:	20 81       	ld	r18, Z
 41c:	21 60       	ori	r18, 0x01	; 1
 41e:	fc 01       	movw	r30, r24
 420:	20 83       	st	Z, r18
		 PORTD |= ( 1 << PD2 );
 422:	82 e3       	ldi	r24, 0x32	; 50
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	22 e3       	ldi	r18, 0x32	; 50
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	f9 01       	movw	r30, r18
 42c:	20 81       	ld	r18, Z
 42e:	24 60       	ori	r18, 0x04	; 4
 430:	fc 01       	movw	r30, r24
 432:	20 83       	st	Z, r18
	 }
 }
 434:	0f 90       	pop	r0
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	08 95       	ret

0000043c <test>:
uint8_t timer_counter;			// Anzahl der Timer Interrupts



void test(void)
{	
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
 440:	cd b7       	in	r28, 0x3d	; 61
 442:	de b7       	in	r29, 0x3e	; 62
	switch(counter)
 444:	80 91 12 01 	lds	r24, 0x0112
 448:	88 2f       	mov	r24, r24
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	84 36       	cpi	r24, 0x64	; 100
 44e:	91 05       	cpc	r25, r1
 450:	a9 f1       	breq	.+106    	; 0x4bc <__stack+0x5d>
 452:	85 36       	cpi	r24, 0x65	; 101
 454:	91 05       	cpc	r25, r1
 456:	34 f4       	brge	.+12     	; 0x464 <__stack+0x5>
 458:	00 97       	sbiw	r24, 0x00	; 0
 45a:	81 f0       	breq	.+32     	; 0x47c <__stack+0x1d>
 45c:	82 33       	cpi	r24, 0x32	; 50
 45e:	91 05       	cpc	r25, r1
 460:	e9 f0       	breq	.+58     	; 0x49c <__stack+0x3d>
 462:	69 c0       	rjmp	.+210    	; 0x536 <__stack+0xd7>
 464:	88 3c       	cpi	r24, 0xC8	; 200
 466:	91 05       	cpc	r25, r1
 468:	09 f4       	brne	.+2      	; 0x46c <__stack+0xd>
 46a:	48 c0       	rjmp	.+144    	; 0x4fc <__stack+0x9d>
 46c:	8a 3f       	cpi	r24, 0xFA	; 250
 46e:	91 05       	cpc	r25, r1
 470:	09 f4       	brne	.+2      	; 0x474 <__stack+0x15>
 472:	54 c0       	rjmp	.+168    	; 0x51c <__stack+0xbd>
 474:	86 39       	cpi	r24, 0x96	; 150
 476:	91 05       	cpc	r25, r1
 478:	89 f1       	breq	.+98     	; 0x4dc <__stack+0x7d>
 47a:	5d c0       	rjmp	.+186    	; 0x536 <__stack+0xd7>
	{
		case 0:		motor_pwr( 0, 85);
 47c:	65 e5       	ldi	r22, 0x55	; 85
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	c1 de       	rcall	.-638    	; 0x204 <motor_pwr>
					uart_puts(_CR);
 482:	85 eb       	ldi	r24, 0xB5	; 181
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	dd d0       	rcall	.+442    	; 0x642 <uart_puts>
					uart_puts(_CR);
 488:	85 eb       	ldi	r24, 0xB5	; 181
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	da d0       	rcall	.+436    	; 0x642 <uart_puts>
					uart_puts("PWM 85");
 48e:	88 eb       	ldi	r24, 0xB8	; 184
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	d7 d0       	rcall	.+430    	; 0x642 <uart_puts>
					uart_puts(_CR);
 494:	85 eb       	ldi	r24, 0xB5	; 181
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	d4 d0       	rcall	.+424    	; 0x642 <uart_puts>
					break;
 49a:	4d c0       	rjmp	.+154    	; 0x536 <__stack+0xd7>
		
		case 50:	motor_pwr(0, 100);
 49c:	64 e6       	ldi	r22, 0x64	; 100
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	b1 de       	rcall	.-670    	; 0x204 <motor_pwr>
					uart_puts(_CR);
 4a2:	85 eb       	ldi	r24, 0xB5	; 181
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	cd d0       	rcall	.+410    	; 0x642 <uart_puts>
					uart_puts(_CR);
 4a8:	85 eb       	ldi	r24, 0xB5	; 181
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	ca d0       	rcall	.+404    	; 0x642 <uart_puts>
					uart_puts("PWM 100");
 4ae:	8f eb       	ldi	r24, 0xBF	; 191
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	c7 d0       	rcall	.+398    	; 0x642 <uart_puts>
					uart_puts(_CR);
 4b4:	85 eb       	ldi	r24, 0xB5	; 181
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	c4 d0       	rcall	.+392    	; 0x642 <uart_puts>
					break;
 4ba:	3d c0       	rjmp	.+122    	; 0x536 <__stack+0xd7>
		
		case 100:	motor_pwr(0, 150);
 4bc:	66 e9       	ldi	r22, 0x96	; 150
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	a1 de       	rcall	.-702    	; 0x204 <motor_pwr>
					uart_puts(_CR);
 4c2:	85 eb       	ldi	r24, 0xB5	; 181
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	bd d0       	rcall	.+378    	; 0x642 <uart_puts>
					uart_puts(_CR);
 4c8:	85 eb       	ldi	r24, 0xB5	; 181
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	ba d0       	rcall	.+372    	; 0x642 <uart_puts>
					uart_puts("PWM 150");
 4ce:	87 ec       	ldi	r24, 0xC7	; 199
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	b7 d0       	rcall	.+366    	; 0x642 <uart_puts>
					uart_puts(_CR);
 4d4:	85 eb       	ldi	r24, 0xB5	; 181
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	b4 d0       	rcall	.+360    	; 0x642 <uart_puts>
					break;
 4da:	2d c0       	rjmp	.+90     	; 0x536 <__stack+0xd7>
		
		case 150:	motor_pwr(0, 200);
 4dc:	68 ec       	ldi	r22, 0xC8	; 200
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	91 de       	rcall	.-734    	; 0x204 <motor_pwr>
					uart_puts(_CR);
 4e2:	85 eb       	ldi	r24, 0xB5	; 181
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	ad d0       	rcall	.+346    	; 0x642 <uart_puts>
					uart_puts(_CR);
 4e8:	85 eb       	ldi	r24, 0xB5	; 181
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	aa d0       	rcall	.+340    	; 0x642 <uart_puts>
					uart_puts("PWM 200");
 4ee:	8f ec       	ldi	r24, 0xCF	; 207
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	a7 d0       	rcall	.+334    	; 0x642 <uart_puts>
					uart_puts(_CR);
 4f4:	85 eb       	ldi	r24, 0xB5	; 181
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	a4 d0       	rcall	.+328    	; 0x642 <uart_puts>
					break;
 4fa:	1d c0       	rjmp	.+58     	; 0x536 <__stack+0xd7>
		
		case 200:	motor_pwr(0, 255);
 4fc:	6f ef       	ldi	r22, 0xFF	; 255
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	81 de       	rcall	.-766    	; 0x204 <motor_pwr>
					uart_puts(_CR);
 502:	85 eb       	ldi	r24, 0xB5	; 181
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	9d d0       	rcall	.+314    	; 0x642 <uart_puts>
					uart_puts(_CR);
 508:	85 eb       	ldi	r24, 0xB5	; 181
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	9a d0       	rcall	.+308    	; 0x642 <uart_puts>
					uart_puts("PWM 255");
 50e:	87 ed       	ldi	r24, 0xD7	; 215
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	97 d0       	rcall	.+302    	; 0x642 <uart_puts>
					uart_puts(_CR);
 514:	85 eb       	ldi	r24, 0xB5	; 181
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	94 d0       	rcall	.+296    	; 0x642 <uart_puts>
					break;
 51a:	0d c0       	rjmp	.+26     	; 0x536 <__stack+0xd7>
		
		case 250:	uart_puts(_CR);
 51c:	85 eb       	ldi	r24, 0xB5	; 181
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	90 d0       	rcall	.+288    	; 0x642 <uart_puts>
					uart_puts("done...");
 522:	8f ed       	ldi	r24, 0xDF	; 223
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	8d d0       	rcall	.+282    	; 0x642 <uart_puts>
					uart_puts(_CR);
 528:	85 eb       	ldi	r24, 0xB5	; 181
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	8a d0       	rcall	.+276    	; 0x642 <uart_puts>
					uart_puts(_CR);
 52e:	85 eb       	ldi	r24, 0xB5	; 181
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	87 d0       	rcall	.+270    	; 0x642 <uart_puts>
					break;
 534:	00 00       	nop
	}//switch(counter)	
	
	counter++;
 536:	80 91 12 01 	lds	r24, 0x0112
 53a:	8f 5f       	subi	r24, 0xFF	; 255
 53c:	80 93 12 01 	sts	0x0112, r24
	
	uart_puti(get_od_adc(_RIGHT));
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	9b de       	rcall	.-714    	; 0x27a <get_od_adc>
 544:	9e d0       	rcall	.+316    	; 0x682 <uart_puti>
	uart_puts(";");
 546:	87 ee       	ldi	r24, 0xE7	; 231
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	7b d0       	rcall	.+246    	; 0x642 <uart_puts>
			uart_puts(_CR);
		}
		
      }//( tmr_ovf == _SET)
#endif	  
}//void test(void)
 54c:	df 91       	pop	r29
 54e:	cf 91       	pop	r28
 550:	08 95       	ret

00000552 <init_timer>:
* /return	none
*
*
************************************************************************/
void init_timer(void)
{
 552:	cf 93       	push	r28
 554:	df 93       	push	r29
 556:	cd b7       	in	r28, 0x3d	; 61
 558:	de b7       	in	r29, 0x3e	; 62
	TCCR0 |=  (1 << CS02) | (1 << CS00);				//prescaler 1024
 55a:	83 e5       	ldi	r24, 0x53	; 83
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	23 e5       	ldi	r18, 0x53	; 83
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	f9 01       	movw	r30, r18
 564:	20 81       	ld	r18, Z
 566:	25 60       	ori	r18, 0x05	; 5
 568:	fc 01       	movw	r30, r24
 56a:	20 83       	st	Z, r18
														// -> 8MHz/1024= 7,8Khz ~ 128µs
	TIMSK |= (1 << TOIE0);								// enable Timer-Overflow interrupt
 56c:	89 e5       	ldi	r24, 0x59	; 89
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	29 e5       	ldi	r18, 0x59	; 89
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	f9 01       	movw	r30, r18
 576:	20 81       	ld	r18, Z
 578:	21 60       	ori	r18, 0x01	; 1
 57a:	fc 01       	movw	r30, r24
 57c:	20 83       	st	Z, r18
														
	uart_puts("timer init done..." _CR);
 57e:	89 ee       	ldi	r24, 0xE9	; 233
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	5f d0       	rcall	.+190    	; 0x642 <uart_puts>
}
 584:	df 91       	pop	r29
 586:	cf 91       	pop	r28
 588:	08 95       	ret

0000058a <__vector_9>:
* /return	none
*
*
************************************************************************/
ISR (TIMER0_OVF_vect)
{
 58a:	1f 92       	push	r1
 58c:	0f 92       	push	r0
 58e:	00 90 5f 00 	lds	r0, 0x005F
 592:	0f 92       	push	r0
 594:	11 24       	eor	r1, r1
 596:	8f 93       	push	r24
 598:	cf 93       	push	r28
 59a:	df 93       	push	r29
 59c:	cd b7       	in	r28, 0x3d	; 61
 59e:	de b7       	in	r29, 0x3e	; 62
	tmr_ovf = _SET;
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	80 93 13 01 	sts	0x0113, r24

}
 5a6:	df 91       	pop	r29
 5a8:	cf 91       	pop	r28
 5aa:	8f 91       	pop	r24
 5ac:	0f 90       	pop	r0
 5ae:	00 92 5f 00 	sts	0x005F, r0
 5b2:	0f 90       	pop	r0
 5b4:	1f 90       	pop	r1
 5b6:	18 95       	reti

000005b8 <init_uart>:
* /return	none
*
*
************************************************************************/
void init_uart(void)
{
 5b8:	cf 93       	push	r28
 5ba:	df 93       	push	r29
 5bc:	1f 92       	push	r1
 5be:	cd b7       	in	r28, 0x3d	; 61
 5c0:	de b7       	in	r29, 0x3e	; 62
		uint8_t ubrr;
		ubrr = _FOSC/16/_BAUD-1;
 5c2:	8f ec       	ldi	r24, 0xCF	; 207
 5c4:	89 83       	std	Y+1, r24	; 0x01
		/* Set baud rate */
		UBRRH = (unsigned char)(ubrr>>8);
 5c6:	80 e4       	ldi	r24, 0x40	; 64
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	29 81       	ldd	r18, Y+1	; 0x01
 5cc:	22 2f       	mov	r18, r18
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	23 2f       	mov	r18, r19
 5d2:	33 0f       	add	r19, r19
 5d4:	33 0b       	sbc	r19, r19
 5d6:	fc 01       	movw	r30, r24
 5d8:	20 83       	st	Z, r18
		UBRRL = (unsigned char)ubrr;
 5da:	89 e2       	ldi	r24, 0x29	; 41
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	29 81       	ldd	r18, Y+1	; 0x01
 5e0:	fc 01       	movw	r30, r24
 5e2:	20 83       	st	Z, r18
		/* Enable receiver and transmitter */
		UCSRB |= (1<<TXEN);
 5e4:	8a e2       	ldi	r24, 0x2A	; 42
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	2a e2       	ldi	r18, 0x2A	; 42
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	f9 01       	movw	r30, r18
 5ee:	20 81       	ld	r18, Z
 5f0:	28 60       	ori	r18, 0x08	; 8
 5f2:	fc 01       	movw	r30, r24
 5f4:	20 83       	st	Z, r18
		/* Set frame format: 8data, 1stop bit */
		UCSRC = (1<<URSEL) |(3<<UCSZ0);
 5f6:	80 e4       	ldi	r24, 0x40	; 64
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	26 e8       	ldi	r18, 0x86	; 134
 5fc:	fc 01       	movw	r30, r24
 5fe:	20 83       	st	Z, r18
		
		uart_puts("uart init done..." _CR);
 600:	8e ef       	ldi	r24, 0xFE	; 254
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	1e d0       	rcall	.+60     	; 0x642 <uart_puts>
}
 606:	0f 90       	pop	r0
 608:	df 91       	pop	r29
 60a:	cf 91       	pop	r28
 60c:	08 95       	ret

0000060e <uart_putc>:
* /return	none
*
*
************************************************************************/
void uart_putc(unsigned char data) 
{	
 60e:	cf 93       	push	r28
 610:	df 93       	push	r29
 612:	1f 92       	push	r1
 614:	cd b7       	in	r28, 0x3d	; 61
 616:	de b7       	in	r29, 0x3e	; 62
 618:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) )
 61a:	00 00       	nop
 61c:	8b e2       	ldi	r24, 0x2B	; 43
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	fc 01       	movw	r30, r24
 622:	80 81       	ld	r24, Z
 624:	88 2f       	mov	r24, r24
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	80 72       	andi	r24, 0x20	; 32
 62a:	99 27       	eor	r25, r25
 62c:	00 97       	sbiw	r24, 0x00	; 0
 62e:	b1 f3       	breq	.-20     	; 0x61c <uart_putc+0xe>
	;
	/* Put data into buffer, sends the data */
	UDR = data;
 630:	8c e2       	ldi	r24, 0x2C	; 44
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	29 81       	ldd	r18, Y+1	; 0x01
 636:	fc 01       	movw	r30, r24
 638:	20 83       	st	Z, r18
}
 63a:	0f 90       	pop	r0
 63c:	df 91       	pop	r29
 63e:	cf 91       	pop	r28
 640:	08 95       	ret

00000642 <uart_puts>:
*
* /example	uart_puts("Test Text");
*
************************************************************************/
void uart_puts (const char *s)
{
 642:	cf 93       	push	r28
 644:	df 93       	push	r29
 646:	00 d0       	rcall	.+0      	; 0x648 <uart_puts+0x6>
 648:	cd b7       	in	r28, 0x3d	; 61
 64a:	de b7       	in	r29, 0x3e	; 62
 64c:	9a 83       	std	Y+2, r25	; 0x02
 64e:	89 83       	std	Y+1, r24	; 0x01
	do
	{
		uart_putc (*s);
 650:	89 81       	ldd	r24, Y+1	; 0x01
 652:	9a 81       	ldd	r25, Y+2	; 0x02
 654:	fc 01       	movw	r30, r24
 656:	80 81       	ld	r24, Z
 658:	da df       	rcall	.-76     	; 0x60e <uart_putc>
	}
	while (*s++);
 65a:	89 81       	ldd	r24, Y+1	; 0x01
 65c:	9a 81       	ldd	r25, Y+2	; 0x02
 65e:	fc 01       	movw	r30, r24
 660:	80 81       	ld	r24, Z
 662:	21 e0       	ldi	r18, 0x01	; 1
 664:	88 23       	and	r24, r24
 666:	09 f4       	brne	.+2      	; 0x66a <uart_puts+0x28>
 668:	20 e0       	ldi	r18, 0x00	; 0
 66a:	89 81       	ldd	r24, Y+1	; 0x01
 66c:	9a 81       	ldd	r25, Y+2	; 0x02
 66e:	01 96       	adiw	r24, 0x01	; 1
 670:	9a 83       	std	Y+2, r25	; 0x02
 672:	89 83       	std	Y+1, r24	; 0x01
 674:	22 23       	and	r18, r18
 676:	61 f7       	brne	.-40     	; 0x650 <uart_puts+0xe>
}
 678:	0f 90       	pop	r0
 67a:	0f 90       	pop	r0
 67c:	df 91       	pop	r29
 67e:	cf 91       	pop	r28
 680:	08 95       	ret

00000682 <uart_puti>:
*
*			uart_puti(i);
*
************************************************************************/
void uart_puti( uint16_t data )
{
 682:	cf 93       	push	r28
 684:	df 93       	push	r29
 686:	cd b7       	in	r28, 0x3d	; 61
 688:	de b7       	in	r29, 0x3e	; 62
 68a:	28 97       	sbiw	r28, 0x08	; 8
 68c:	0f b6       	in	r0, 0x3f	; 63
 68e:	f8 94       	cli
 690:	de bf       	out	0x3e, r29	; 62
 692:	0f be       	out	0x3f, r0	; 63
 694:	cd bf       	out	0x3d, r28	; 61
 696:	98 87       	std	Y+8, r25	; 0x08
 698:	8f 83       	std	Y+7, r24	; 0x07
	char buffer[6];
	itoa(data, buffer, 10);
 69a:	8f 81       	ldd	r24, Y+7	; 0x07
 69c:	98 85       	ldd	r25, Y+8	; 0x08
 69e:	4a e0       	ldi	r20, 0x0A	; 10
 6a0:	50 e0       	ldi	r21, 0x00	; 0
 6a2:	9e 01       	movw	r18, r28
 6a4:	2f 5f       	subi	r18, 0xFF	; 255
 6a6:	3f 4f       	sbci	r19, 0xFF	; 255
 6a8:	b9 01       	movw	r22, r18
 6aa:	0c d0       	rcall	.+24     	; 0x6c4 <itoa>
	uart_puts(buffer);
 6ac:	ce 01       	movw	r24, r28
 6ae:	01 96       	adiw	r24, 0x01	; 1
 6b0:	c8 df       	rcall	.-112    	; 0x642 <uart_puts>
}
 6b2:	28 96       	adiw	r28, 0x08	; 8
 6b4:	0f b6       	in	r0, 0x3f	; 63
 6b6:	f8 94       	cli
 6b8:	de bf       	out	0x3e, r29	; 62
 6ba:	0f be       	out	0x3f, r0	; 63
 6bc:	cd bf       	out	0x3d, r28	; 61
 6be:	df 91       	pop	r29
 6c0:	cf 91       	pop	r28
 6c2:	08 95       	ret

000006c4 <itoa>:
 6c4:	fb 01       	movw	r30, r22
 6c6:	9f 01       	movw	r18, r30
 6c8:	e8 94       	clt
 6ca:	42 30       	cpi	r20, 0x02	; 2
 6cc:	bc f0       	brlt	.+46     	; 0x6fc <itoa+0x38>
 6ce:	45 32       	cpi	r20, 0x25	; 37
 6d0:	ac f4       	brge	.+42     	; 0x6fc <itoa+0x38>
 6d2:	4a 30       	cpi	r20, 0x0A	; 10
 6d4:	29 f4       	brne	.+10     	; 0x6e0 <itoa+0x1c>
 6d6:	97 fb       	bst	r25, 7
 6d8:	1e f4       	brtc	.+6      	; 0x6e0 <itoa+0x1c>
 6da:	90 95       	com	r25
 6dc:	81 95       	neg	r24
 6de:	9f 4f       	sbci	r25, 0xFF	; 255
 6e0:	64 2f       	mov	r22, r20
 6e2:	77 27       	eor	r23, r23
 6e4:	1e d0       	rcall	.+60     	; 0x722 <__udivmodhi4>
 6e6:	80 5d       	subi	r24, 0xD0	; 208
 6e8:	8a 33       	cpi	r24, 0x3A	; 58
 6ea:	0c f0       	brlt	.+2      	; 0x6ee <itoa+0x2a>
 6ec:	89 5d       	subi	r24, 0xD9	; 217
 6ee:	81 93       	st	Z+, r24
 6f0:	cb 01       	movw	r24, r22
 6f2:	00 97       	sbiw	r24, 0x00	; 0
 6f4:	a9 f7       	brne	.-22     	; 0x6e0 <itoa+0x1c>
 6f6:	16 f4       	brtc	.+4      	; 0x6fc <itoa+0x38>
 6f8:	5d e2       	ldi	r21, 0x2D	; 45
 6fa:	51 93       	st	Z+, r21
 6fc:	10 82       	st	Z, r1
 6fe:	c9 01       	movw	r24, r18
 700:	00 c0       	rjmp	.+0      	; 0x702 <strrev>

00000702 <strrev>:
 702:	dc 01       	movw	r26, r24
 704:	fc 01       	movw	r30, r24
 706:	67 2f       	mov	r22, r23
 708:	71 91       	ld	r23, Z+
 70a:	77 23       	and	r23, r23
 70c:	e1 f7       	brne	.-8      	; 0x706 <strrev+0x4>
 70e:	32 97       	sbiw	r30, 0x02	; 2
 710:	04 c0       	rjmp	.+8      	; 0x71a <strrev+0x18>
 712:	7c 91       	ld	r23, X
 714:	6d 93       	st	X+, r22
 716:	70 83       	st	Z, r23
 718:	62 91       	ld	r22, -Z
 71a:	ae 17       	cp	r26, r30
 71c:	bf 07       	cpc	r27, r31
 71e:	c8 f3       	brcs	.-14     	; 0x712 <strrev+0x10>
 720:	08 95       	ret

00000722 <__udivmodhi4>:
 722:	aa 1b       	sub	r26, r26
 724:	bb 1b       	sub	r27, r27
 726:	51 e1       	ldi	r21, 0x11	; 17
 728:	07 c0       	rjmp	.+14     	; 0x738 <__udivmodhi4_ep>

0000072a <__udivmodhi4_loop>:
 72a:	aa 1f       	adc	r26, r26
 72c:	bb 1f       	adc	r27, r27
 72e:	a6 17       	cp	r26, r22
 730:	b7 07       	cpc	r27, r23
 732:	10 f0       	brcs	.+4      	; 0x738 <__udivmodhi4_ep>
 734:	a6 1b       	sub	r26, r22
 736:	b7 0b       	sbc	r27, r23

00000738 <__udivmodhi4_ep>:
 738:	88 1f       	adc	r24, r24
 73a:	99 1f       	adc	r25, r25
 73c:	5a 95       	dec	r21
 73e:	a9 f7       	brne	.-22     	; 0x72a <__udivmodhi4_loop>
 740:	80 95       	com	r24
 742:	90 95       	com	r25
 744:	bc 01       	movw	r22, r24
 746:	cd 01       	movw	r24, r26
 748:	08 95       	ret

0000074a <_exit>:
 74a:	f8 94       	cli

0000074c <__stop_program>:
 74c:	ff cf       	rjmp	.-2      	; 0x74c <__stop_program>
